<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS简单笔记</title>
    <url>/2019/10/01/CSS%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h2><p><a href="https://pengxiandyou.github.io/2019/08/27/HTML简单笔记/">HTML简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/01/CSS简单笔记/">CSS简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/jQuery简单笔记/">jQuery简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/拓展简单笔记/">拓展简单笔记</a><br/></p>
<h2 id="一-基本语法"><a href="#一-基本语法" class="headerlink" title="一 基本语法"></a>一 基本语法</h2><ol>
<li><pre><code class="css">&lt;<span class="selector-tag">html</span>&gt;
    &lt;<span class="selector-tag">head</span>&gt;
        &lt;style type="text/css"&gt;
            选择器名{
                样式属性:样式数值;
                样式属性:样式数值;
                样式属性:样式数值;
            }
        &lt;/style&gt;
    &lt;/head&gt;
&lt;/html&gt;
&lt;!<span class="selector-tag">--</span>�0<span class="selector-tag">--</span>&gt;

<span class="selector-tag">-</span> ```<span class="selector-tag">css</span>
  .类名{
      样式属性:样式数值;
      样式属性:样式数值;
      样式属性:样式数值;
  } 
  &lt;!<span class="selector-tag">--</span>�1<span class="selector-tag">--</span>&gt;

  - 标签里写`id="ID"`</code></pre>
</li>
<li><p>引用方式</p>
<ul>
<li><pre><code class="css">&lt;!<span class="selector-tag">--</span> 内部样式 <span class="selector-tag">--</span>&gt;
&lt;<span class="selector-tag">head</span>&gt;
        &lt;style type="text/css"&gt;
            选择器名{
                样式属性:样式数值;
                样式属性:样式数值;
                样式属性:样式数值;
            }
        &lt;/style&gt;
&lt;/head&gt;&lt;!-- 只能当前页面使用 --&gt;
&lt;!<span class="selector-tag">--</span>�2<span class="selector-tag">--</span>&gt;</code></pre>
</li>
<li><pre><code class="css">&lt;!<span class="selector-tag">--</span> 行内样式 <span class="selector-tag">--</span>&gt;
&lt;span style="font-size:25px;color:pink;"&gt;爱&lt;/span&gt;
&lt;!<span class="selector-tag">--</span>�3<span class="selector-tag">--</span>&gt;</code></pre>
</li>
</ul>
<ol start="2">
<li><p>后代选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 层次关系 <span class="selector-tag">--</span>&gt;&lt;!<span class="selector-tag">--</span> 还可以和交集选择器用 <span class="selector-tag">--</span>&gt;</span><br><span class="line">选择器1 选择器2&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">列子:</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-class">.red</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br><span class="line">&lt;p&gt;我&lt;span class="red"&gt;爱&lt;/span&gt;你&lt;/p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>并集选择器</p>
</li>
<li><pre><code class="css">选择器1,选择器2,选择器3{

}
&lt;!<span class="selector-tag">--</span>�5<span class="selector-tag">--</span>&gt;</code></pre>
</li>
<li><table>
<thead>
<tr>
<th align="center">伪类名称</th>
<th align="center">含义</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>a:link</code></td>
<td align="center">未单击访问时超链接样式</td>
<td align="center"><code>a:link{color:#9ef5f9;}</code></td>
</tr>
<tr>
<td align="center"><code>a:visited</code></td>
<td align="center">单击访问后超链接样式</td>
<td align="center"><code>a:visited{color:#333;}</code></td>
</tr>
<tr>
<td align="center"><code>a:hover</code></td>
<td align="center">鼠标悬浮其上的超链接样式</td>
<td align="center"><code>a:hover{color:#ff7300;}</code></td>
</tr>
<tr>
<td align="center"><code>a:active</code></td>
<td align="center">鼠标单击未释放的超链接样式</td>
<td align="center"><code>a:active{color:#999;}</code></td>
</tr>
</tbody></table>
</li>
<li><p>设置伪类的顺序：<code>a:link-&gt;a:visited-&gt;a:hover-&gt;a:active</code></p>
</li>
<li><p>一般和超链接标签配合使用</p>
</li>
</ol>
</li>
<li><p>背景样式</p>
<ul>
<li><code>background-color</code></li>
<li><code>background-image:url(路径)</code></li>
<li><code>background-repeat</code>:图片平铺方式 <code>no-repeat</code> <code>repeat-x</code> <code>repeat-y</code> 默认:<code>repeat</code></li>
<li><code>background-position</code>:设置图片偏远 <code>50px 100px</code> <code>50% 100%</code> <code>left bottom</code> <code>center center</code> <code>right top</code>等等</li>
<li><code>background</code>: <code>颜色 图片 position repeat</code></li>
</ul>
</li>
<li><p>列表样式</p>
<ul>
<li><p><code>list-style-type</code></p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
<th align="center">语法示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>none</code></td>
<td align="center">无标记符号(可做导航栏; 可横排 间隔)</td>
<td align="center"><code>list-style-type:none;</code></td>
</tr>
<tr>
<td align="center"><code>disc</code></td>
<td align="center">实心圆，默认类型</td>
<td align="center"><code>list-style-type:disc;</code></td>
</tr>
<tr>
<td align="center"><code>circle</code></td>
<td align="center">空心圆</td>
<td align="center"><code>list-style-type:circle;</code></td>
</tr>
<tr>
<td align="center"><code>square</code></td>
<td align="center">实心正方形</td>
<td align="center"><code>list-style-type:square;</code></td>
</tr>
<tr>
<td align="center"><code>decimal</code></td>
<td align="center">数字</td>
<td align="center"><code>list-style-type:decimal;</code></td>
</tr>
</tbody></table>
</li>
<li><p><code>list-style-image</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">list-style-image</span>: <span class="built_in">url</span>(image/arrow-right. gif); </span><br><span class="line">	<span class="attribute">list-style-type</span>: circle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>list-style-position</code> : <code>inside</code> <code>outside</code></p>
</li>
</ul>
</li>
</ol>
<h2 id="五-结合-lt-div-gt"><a href="#五-结合-lt-div-gt" class="headerlink" title="五 结合&lt;div&gt;"></a>五 结合<code>&lt;div&gt;</code></h2><ol>
<li><p>用法 : </p>
<ul>
<li>网页布局 </li>
<li>排版网页内容</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>语法例子:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">280px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id="header"&gt; 网页内容 &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可加属性 </p>
<ul>
<li><code>border:1px red solid;</code></li>
</ul>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL简单笔记一</title>
    <url>/2019/08/22/MySQL%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/22/MySQL简单笔记一/">MySQL简单笔记一</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/23/MySQL简单笔记二之DDL/">MySQL简单笔记二之DDL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/26/MySQL简单学习笔记三之DMl和DQL/">MySQL简单学习笔记三之DMl和DQL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/27/MySQL语法的Oracle练习表分享/">MySQL语法的Oracle练习表分享</a><br/></p>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql: "></a><font color=blue align=center>mysql: </font></h1><h2 id="启动停止-net-start-stop-mysql"><a href="#启动停止-net-start-stop-mysql" class="headerlink" title="启动停止 net start/stop mysql"></a>启动停止 net start/stop mysql</h2><h2 id="登陆-mysql-u用户名-p密码"><a href="#登陆-mysql-u用户名-p密码" class="headerlink" title="登陆 mysql -u用户名 -p密码"></a>登陆 mysql -u用户名 -p密码</h2><h2 id="退出-quit；exit；"><a href="#退出-quit；exit；" class="headerlink" title="退出 quit；exit；"></a>退出 quit；exit；</h2><h2 id="查看所有数据库-show-databases"><a href="#查看所有数据库-show-databases" class="headerlink" title="查看所有数据库 show databases;"></a>查看所有<font color=green>数据库</font> show <font color=green>databases</font>;</h2><h2 id="新建数据库-create-database-数据库名；"><a href="#新建数据库-create-database-数据库名；" class="headerlink" title="新建数据库 create database 数据库名；"></a>新建数据库 create database 数据库名；</h2><h2 id="test数据库给用户用-一般不用"><a href="#test数据库给用户用-一般不用" class="headerlink" title="test数据库给用户用 一般不用"></a>test数据库给用户用 <font color=red>一般不用</font></h2><h2 id="进入数据库-ues-数据库名"><a href="#进入数据库-ues-数据库名" class="headerlink" title="进入数据库 ues 数据库名"></a>进入数据库 ues 数据库名</h2><h2 id="查看当前数据库的表-show-tables"><a href="#查看当前数据库的表-show-tables" class="headerlink" title="查看当前数据库的表 show tables;"></a>查看当前数据库的<font color=gren>表</font> show <font color=green>tables</font>;</h2><h2 id="查看表的结构-desc-表名；"><a href="#查看表的结构-desc-表名；" class="headerlink" title="查看表的结构 desc 表名；"></a>查看表的结构 desc 表名；</h2><h2 id="查看某张表的数据-select-from-表名；"><a href="#查看某张表的数据-select-from-表名；" class="headerlink" title="查看某张表的数据 select * from 表名；"></a>查看某张表的数据 select * from 表名；</h2><h2 id="sql语句官方建议大写-我们一般小写-本身不区分大小写"><a href="#sql语句官方建议大写-我们一般小写-本身不区分大小写" class="headerlink" title="sql语句官方建议大写 我们一般小写,本身不区分大小写"></a>sql语句官方建议大写 <font color=red>我们一般小写,本身不区分大小写</font></h2><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><ol>
<li>DDL:数据定义语言 Data Definition Language<ul>
<li>对象的创建 删除 修改 :建库 建表 修改表 删除表 删库 <font color=red size =5>create drop alter</font></li>
</ul>
</li>
<li>DML:数据操作语言 Data Manipulation Language<ul>
<li>增删改; 添加数据 删除数据 修改数据 <font color=red size =5>insert update delete</font></li>
</ul>
</li>
<li>DCL:数据控制语言 Data Control Language<ul>
<li>创建用户 分配账号密码 分配权限 <font color=red size =5>grant revoke</font></li>
</ul>
</li>
<li>DQL:数据查询语言 Data Query Language<ul>
<li>查询: <font color=red size =5>select</font></li>
</ul>
</li>
<li>DTL:数据事务语言 Data Trasaction Language<ul>
<li>执行事务操作</li>
</ul>
</li>
</ol>
<h1 id="表"><a href="#表" class="headerlink" title="表:"></a>表:</h1><ul>
<li><p>每列数据类型</p>
<ul>
<li>int：整型 从-2^31到2^31-1的整型数据。存储大小为 4个字节</li>
<li>double：浮点型，例如double（5，2）表示最多5位，其中必须有2位小数，即最大值为999.99；</li>
<li>decimal：泛型型，在表金钱方面使用该类型，因为不会出现精度缺失问题；</li>
<li>char：固定长度字符串类型：char（长度）char（10）：该列最大存储10个字符，我的实际字符5，后面会用空格填满</li>
<li>varchar：可变长度字符串类型；</li>
<li>text：字符串类型；直接使用改类型，不需要规定长度，会多使用一个专门的空间存储长度</li>
<li>blob：字节类型；存放二进制字节编码       图片（小说）要真正存储二进制数据，一般结合高级语言</li>
<li>date：日期类型，格式为：yyyy-MM-dd；</li>
<li>time：时间类型，格式为：hh:mm:ss</li>
<li>timestamp：时间戳类型；yyyy-MM-dd hh:mm:ss</li>
<li>datetime：日期时间yyyy-MM-dd hh:mm:ss   *<em>timestamp和datetime的范围不同 *</em></li>
</ul>
<p>有复合主键 一般不用 底层 索引 底层 二叉树</p>
</li>
</ul>
<h1 id="唯一键约束："><a href="#唯一键约束：" class="headerlink" title="唯一键约束："></a>唯一键约束：</h1><p>该列数据不能重复<br>唯一键可以为空 MysQL允许多列为空（SQL Server只允许一列为空)<br>唯一键可以多个<br>唯一约束的创建：就是创建一个唯一的索引</p>
<h1 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h1><p>MySQL不支持，（Sqlserver和oracle都支持）</p>
<h1 id="外键约束："><a href="#外键约束：" class="headerlink" title="外键约束："></a>外键约束：</h1><p>约束表和表之间的关系<br>外键所在的表就是子表<br>子表引用数据的表就是主表<br>字表的外键列引用主表的主键列（或者唯一键）</p>
<h1 id="范式："><a href="#范式：" class="headerlink" title="范式："></a>范式：</h1><p>设计数据库的一个标准，范式的等级越高，冗余越低，<del>一般的项目到瑟三阶范三（传统项目）</del></p>
<p>互联网项目：大数据，冗余大，基本都是单表<br>将一个表的数据拆成多个表：降低冗余，降低查询效率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  一阶范式：表中不能套表所有的数据库系统，都不会违反一阶范式</span><br><span class="line">-  二阶范式：满足一阶范式，非主键列必须依赖于主键。一个表中必须要主键  函数依赖：y&#x3D;f（x）x--&gt;y 删除异常 更新异常 插入异常</span><br><span class="line">-  三阶范式：满足二阶范式，不存在传递依赖 x--&gt;y y--&gt;z x--&gt;z</span><br></pre></td></tr></table></figure>





<p><font color=red size=10>语句:</font></p>
<ol>
<li>数据库<ul>
<li>创建 create database 库名;</li>
<li>删除 drop database 库名;</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL简单学习笔记三之DMl和DQL</title>
    <url>/2019/08/26/MySQL%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E4%B9%8BDMl%E5%92%8CDQL/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/22/MySQL简单笔记一/">MySQL简单笔记一</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/23/MySQL简单笔记二之DDL/">MySQL简单笔记二之DDL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/26/MySQL简单学习笔记三之DMl和DQL/">MySQL简单学习笔记三之DMl和DQL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/27/MySQL语法的Oracle练习表分享/">MySQL语法的Oracle练习表分享</a><br/></p>
<center > <font size=10>DML</font></center>
1. 添加数据

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- insert into 表名(列123...) values(值123..)</span><br><span class="line">INSERT INTO student VALUES(5,&#39;eee&#39;,15);</span><br><span class="line">INSERT INTO student(id,NAME,age) VALUES(6,&#39;fff&#39;,60);</span><br><span class="line">INSERT INTO student(id,NAME) VALUES(7,&#39;ggg&#39;);</span><br><span class="line">INSERT INTO student VALUES(8,&#39;hhh&#39;,NULL);</span><br><span class="line">INSERT INTO student VALUES(9,&#39;iii&#39;,DEFAULT);</span><br><span class="line">-- 插入 varchar 或 date 型的数据要用 单引号 引起来</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>修改数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- update 表 set 列1&#x3D;值1....</span><br><span class="line">-- 无条件则改所有行的该列值</span><br><span class="line">UPDATE student SET age&#x3D;35;</span><br><span class="line">UPDATE student SET age&#x3D;35 WHERE id&#x3D;1;</span><br><span class="line">UPDATE student SET NAME&#x3D;&#39;zs&#39;,age&#x3D;32 WHERE id&#x3D;10;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- delete from </span><br><span class="line">-- 没有条件删除全表</span><br><span class="line">DELETE FROM student </span><br><span class="line">DELETE FROM student WHERE id&#x3D;8;</span><br><span class="line">-- truncate table 表 删除全表,先删后建表 DDL 不属于DML</span><br><span class="line">DELETE FROM student WHERE id&#x3D;9 AND NAME&#x3D;iii;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr/>
<center > <font size=10>DQL</font></center>
1. 查询

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- select 列名123.. from 表名</span><br><span class="line">-- *所有列</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT id ,&#96;name&#96; ,age FROM student;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>条件查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 条件查询 &#x3D; !&#x3D; &lt;&gt; &lt; &lt;&#x3D; &gt;&#x3D; &gt; </span><br><span class="line">-- between...and; in(set); is null; and; or; not; </span><br><span class="line">SELECT * FROM student WHERE age &#x3D;20 AND gender&#x3D;&#39;女&#39;;</span><br><span class="line">SELECT * FROM student WHERE age IN(20,35,12);</span><br><span class="line">SELECT * FROM student WHERE age NOT IN(20,35,12);</span><br><span class="line">SELECT * FROM student WHERE NOT(age&#x3D;20 OR age&#x3D;35 OR age&#x3D;12 );</span><br><span class="line">SELECT * FROM student WHERE NAME IS NULL ;</span><br><span class="line">SELECT * FROM student WHERE NAME IS NOT NULL ;</span><br><span class="line">SELECT * FROM student WHERE age&gt;&#x3D;10 AND age&lt;&#x3D;60;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 10 AND 60;</span><br><span class="line">SELECT * FROM student WHERE age NOT BETWEEN 15 AND 60;#我试的时候not在age前后都可以</span><br></pre></td></tr></table></figure>
</li>
<li><p>模糊查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- %代表任意( 1,0,多) _表示一个任意</span><br><span class="line">-- 和like一起使用</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;a%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT NAME FROM student;</span><br><span class="line">SELECT DISTINCT age FROM student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合数据 如和 可能为空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *,id+age FROM student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>试用数据的函数 自学 理解为编程语言有返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *,id+IFNULL(age,0)FROM student;</span><br><span class="line">SELECT CURDATE();#用select输出</span><br><span class="line">SELECT YEAR(CURDATE());</span><br><span class="line">SELECT ADDDATE(CURDATE(),10);</span><br></pre></td></tr></table></figure>
</li>
<li><p>给列名起别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id sid,NAME sname,age sage FROM student;</span><br><span class="line">SELECT id AS sid,NAME AS sname,age AS sage FROM student;</span><br><span class="line">SELECT *,id+age AS &#39;和&#39; FROM student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序 默认升序<code>asc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY age;</span><br><span class="line">SELECT * FROM student ORDER BY age ASC;</span><br><span class="line">SELECT * FROM student ORDER BY age DESC;#降序</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定多个参考列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY age ASC,NAME ASC;</span><br></pre></td></tr></table></figure>
</li>
<li><p>顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*顺序</span><br><span class="line">select</span><br><span class="line">from</span><br><span class="line">where -- 筛选</span><br><span class="line">group by</span><br><span class="line">having</span><br><span class="line">order by</span><br><span class="line">limit	-- 排序</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 10 AND 60 ORDER BY NAME;</span><br></pre></td></tr></table></figure>
</li>
<li><p>聚合函数 数据统计</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- sum() max() min() avg() count()</span><br><span class="line">SELECT SUM(id) ,AVG(age),MAX(age),MIN(age) FROM student;</span><br><span class="line">SELECT COUNT(*) FROM student ;#写* 列(会统计非空)都可 一般用 * 主键</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- group by</span><br><span class="line">SELECT gender,COUNT(*) FROM student GROUP BY gender;</span><br><span class="line">SELECT age,gender,COUNT(*) FROM student GROUP BY age,gender;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组再筛选</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- having 统计后再筛选</span><br><span class="line">SELECT  age,gender,COUNT(*) FROM student GROUP BY age,gender HAVING COUNT(*)&gt;&#x3D;2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页 limit 叶索引 页大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 0,2;</span><br><span class="line">SELECT * FROM student LIMIT 1,2;</span><br><span class="line">SELECT * FROM student LIMIT 5;</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student AS stu,course AS cou WHERE stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>内连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student stu INNER JOIN course cou ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;;#inner可以省</span><br><span class="line">SELECT * FROM student stu </span><br><span class="line">INNER JOIN course cou </span><br><span class="line">ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96; #一般连接条件</span><br><span class="line">WHERE stu.&#96;gender&#96;&#x3D;&#39;男&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左外连接  左边全显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student stu </span><br><span class="line">LEFT OUTER JOIN course cou </span><br><span class="line">ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>右外连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student stu </span><br><span class="line">RIGHT OUTER JOIN course cou </span><br><span class="line">ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完全外连接 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student stu </span><br><span class="line">LEFT OUTER JOIN course cou </span><br><span class="line">ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM student stu </span><br><span class="line">RIGHT OUTER JOIN course cou </span><br><span class="line">ON stu.&#96;course_id&#96;&#x3D;cou.&#96;id&#96;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>交叉连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student ,course ;</span><br><span class="line">SELECT * FROM student CROSS JOIN course;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自然连接 内 也可以 加 <code>right</code> <code>left</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student NATURAL JOIN course;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>子查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 功能最强大 </span><br><span class="line">-- 查询嵌套 </span><br><span class="line">&#x2F;*select (子查询)</span><br><span class="line">from (子查询)</span><br><span class="line">where (子查询)</span><br><span class="line">*&#x2F;</span><br><span class="line">-- 比eee年龄高的学生</span><br><span class="line">SELECT * FROM student WHERE age&gt;(SELECT age FROM student WHERE NAME&#x3D;&#39;eee&#39;);</span><br><span class="line">-- 比男生最大年龄还大的女士 大于所有</span><br><span class="line">SELECT * FROM student WHERE gender!&#x3D;&#39;男&#39; AND age&gt;ALL(SELECT age FROM student WHERE gender&#x3D;&#39;男&#39;);</span><br><span class="line">--  大于任意 最低</span><br><span class="line">SELECT * FROM student WHERE gender!&#x3D;&#39;男&#39; AND age&gt;ANY(SELECT age FROM student WHERE gender&#x3D;&#39;男&#39;);</span><br><span class="line">-- 和aaa这个女士学同一门课的女士 </span><br><span class="line">SELECT * FROM student </span><br><span class="line">WHERE (gender,course_id) IN (SELECT gender,course_id FROM student WHERE NAME &#x3D;&#39;aaa&#39;) AND NAME!&#x3D;&#39;aaa&#39;;</span><br><span class="line">-- 查询学生和课程</span><br><span class="line">SELECT NAME,course FROM student s,(SELECT * FROM course) c WHERE s.&#96;course_id&#96;&#x3D;c.id ORDER BY NAME; </span><br><span class="line">-- 相关子查询</span><br><span class="line">SELECT NAME, (SELECT course FROM course c WHERE s.&#96;course_id&#96;&#x3D;c.id) FROM student s ORDER BY NAME;</span><br></pre></td></tr></table></figure>
</li>
<li><p>了解事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#手动开事务,将若干个语句作为一个原子操作</span><br><span class="line">star transaction;</span><br><span class="line">语句</span><br><span class="line">commit;#提交</span><br><span class="line">rollback;#回滚</span><br></pre></td></tr></table></figure>













</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery简单笔记</title>
    <url>/2019/10/24/jQuery%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/27/HTML简单笔记/">HTML简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/01/CSS简单笔记/">CSS简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/jQuery简单笔记/">jQuery简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/拓展简单笔记/">拓展简单笔记</a><br/></p>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>$(选择器).方法();</p>
<p>jQuery:简写$,工厂函数,将don对象转换jQuery对象</p>
<p>js中操作的对象就是dom对象</p>
<p>选择器: 要操作的元素</p>
<p>方法:参数都是函数,jQuery中的方法都是事件方法</p>
<p>$(document).ready(function(){</p>
<p>});类似onload</p>
<p>各个对象只能调用自己的方法</p>
<p>连缀写法: $(#mydiv).mouseover(function(){</p>
<p>$(this).css(“background”,”red”)</p>
<p>}).mouseout(function(){</p>
<p>$(this).css(“background”,”pink”)</p>
<p>});</p>
<p>css(“属性”,属性值) 为元素设置css样式的值</p>
<p>addClass() 为元素添加类样式</p>
<p>next() 获得元素其后紧邻的同类元素</p>
<p>sho() 显示 “slow”</p>
<p>jQuery对象转dom对象 jQuery对象[0]  jQuery对象.get(0)</p>
<p>$(“h3”).css(“background”,”#369”);</p>
<p>$(“p”).each(function(i item){}); </p>
<p>jQuery有很多选择器</p>
<p>*全局选择器</p>
<p>表单事件 <code>focus</code> <code>blur</code></p>
<p>复合事件 <code>hover</code></p>
<p>动画 <code>show()</code> <code>hide()</code> <code>fadeIn()</code> <code>fadeOut()</code></p>
<p>addClass() removeClass() toggleClass()</p>
<p>.val()</p>
<p>元素添加 appendTo() prependTo() </p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL简单笔记二之DDL</title>
    <url>/2019/08/23/MySQL%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0%E4%BA%8C%E4%B9%8BDDL/</url>
    <content><![CDATA[<hr/>
<font color=pink size =10>学习要自己思考,举一反三,保持好奇心(比如我在这里这么干会怎么样). </font>

<hr/>
<a id="more"></a>
# 系列链接
[MySQL简单笔记一](https://pengxiandyou.github.io/2019/08/22/MySQL简单笔记一/)<br/>

<p><a href="https://pengxiandyou.github.io/2019/08/23/MySQL简单笔记二之DDL/">MySQL简单笔记二之DDL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/26/MySQL简单学习笔记三之DMl和DQL/">MySQL简单学习笔记三之DMl和DQL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/27/MySQL语法的Oracle练习表分享/">MySQL语法的Oracle练习表分享</a><br/></p>
<h1 id="一-数据库"><a href="#一-数据库" class="headerlink" title="一 数据库"></a>一 数据库</h1><ol>
<li><p>创建数据库</p>
<ul>
<li><code>CREATE DATABASE db2;</code></li>
<li>不存在就创建 <code>CREATE DATABAS IF NOT EXISTS db2;</code></li>
</ul>
</li>
<li><p>删除数据库</p>
<ul>
<li><code>DROP DATABASE db2;</code></li>
<li>存在就删 <code>DROP DATABASE IF EXISTS db2;</code></li>
</ul>
</li>
</ol>
<h1 id="二-表"><a href="#二-表" class="headerlink" title="二 表"></a>二 表</h1><ol>
<li><p>创建表 可以使用``(Tab上面的键)避免关键字冲突 NAME也可以创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">&#96;name&#96; VARCHAR(10),</span><br><span class="line">age INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表 <code>DROP TABLE stu;</code></p>
</li>
<li><p>修改表</p>
<ol>
<li><p>添加列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stu ADD(</span><br><span class="line">address VARCHAR(10),</span><br><span class="line">email VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列类型 <code>ALTER TABLE stu MODIFY email VARCHAR(50);</code></p>
</li>
<li><p>修改列名 <code>ALTER TABLE stu CHANGE address addr VARCHAR(50);</code></p>
</li>
<li><p>删除列 <code>ALTER TABLE stu DROP email;</code></p>
</li>
<li><p>修改表名 <code>ALTER TABLE stu RENAME TO student;</code></p>
</li>
</ol>
</li>
</ol>
<h1 id="三-约束"><a href="#三-约束" class="headerlink" title="三 约束"></a>三 约束</h1><ol>
<li><p>主键约束</p>
<ol>
<li><pre><code class="mysql">CREATE TABLE t1(
id INT PRIMARY KEY,
NAME VARCHAR(10)
);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 添加主键 &#96;ALTER TABLE t1 ADD PRIMARY KEY(id);&#96;</span><br><span class="line"></span><br><span class="line">3. 删除主键 &#96;ALTER TABLE t1 DROP PRIMARY KEY;&#96;</span><br><span class="line"></span><br><span class="line">4. 自动增长 </span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;mysql</span><br><span class="line">   CREATE TABLE t1(</span><br><span class="line">   id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">   NAME VARCHAR(10)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>修改让自动增长 <code>ALTER TABLE t1 CHANGE id id INT AUTO_INCREMENT;</code></p>
</li>
<li><p>修改不让自动增长 <code>ALTER TABLE t1 CHANGE id id INT;</code></p>
</li>
</ol>
</li>
<li><p>非空约束</p>
<ol>
<li><pre><code class="mysql">CREATE TABLE t1(
id INT PRIMARY KEY,
NAME VARCHAR(10) NOT NULL
);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   2. 修改 仿照修改自动增长</span><br><span class="line"></span><br><span class="line">3. 唯一键约束</span><br><span class="line"></span><br><span class="line">   1.</span><br></pre></td></tr></table></figure>
CREATE TABLE t1(
id INT PRIMARY KEY,
NAME VARCHAR(10) UNIQUE
);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   2. 删除唯一键 &#96;ALTER TABLE t1 DROP INDEX NAME;&#96;</span><br><span class="line"></span><br><span class="line">   3. 修改表,创建唯一键 索引 &#96;ALTER TABLE t1 ADD CONSTRAINT uq_name UNIQUE(NAME);&#96;</span><br><span class="line"></span><br><span class="line">4. 外键约束 </span><br><span class="line"></span><br><span class="line">   1.</span><br></pre></td></tr></table></figure>
-- 命名 fk_子表名_列名
--      fk_主表名_子表名_列名
CREATE TABLE dep(
did INT PRIMARY KEY,
dname VARCHAR(10)
);
CREATE TABLE emp(
eid INT PRIMARY KEY,
ename VARCHAR(10),
did INT,
CONSTRAINT fk_dep_emp_did FOREIGN KEY(did) REFERENCES dep(did)
);</code></pre>
</li>
<li><p>删除外键 <code>ALTER TABLE emp DROP FOREIGN KEY fk_dep_emp_did;</code></p>
</li>
<li><p>添加外键 <code>ALTER TABLE emp ADD CONSTRAINT fk_dep_emp_did FOREIGN KEY(did) REFERENCES dep(did);</code></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语法的Oracle练习表分享</title>
    <url>/2019/08/27/MySQL%E8%AF%AD%E6%B3%95%E7%9A%84Oracle%E7%BB%83%E4%B9%A0%E8%A1%A8%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/22/MySQL简单笔记一/">MySQL简单笔记一</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/23/MySQL简单笔记二之DDL/">MySQL简单笔记二之DDL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/26/MySQL简单学习笔记三之DMl和DQL/">MySQL简单学习笔记三之DMl和DQL</a><br/></p>
<p><a href="https://pengxiandyou.github.io/2019/08/27/MySQL语法的Oracle练习表分享/">MySQL语法的Oracle练习表分享</a><br/></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE EMP</span><br><span class="line">(</span><br><span class="line">EMPNO NUMERIC(4) PRIMARY KEY,</span><br><span class="line">ENAME VARCHAR(10),</span><br><span class="line">JOB VARCHAR(9),</span><br><span class="line">MGR NUMERIC(4),</span><br><span class="line">HIREDATE DATE,</span><br><span class="line">SAL NUMERIC(7,2),</span><br><span class="line">COMM NUMERIC(7,2),</span><br><span class="line">DEPNO NUMERIC(4)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">CREATE TABLE Dept(</span><br><span class="line">DEPTNO NUMERIC(4),</span><br><span class="line">DNAME VARCHAR(14),</span><br><span class="line">LOC VARCHAR(13)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">CREATE TABLE Salgrade</span><br><span class="line">(</span><br><span class="line">GRADE NUMERIC,</span><br><span class="line">LOSAL  NUMERIC,</span><br><span class="line">HISAL NUMERIC </span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">CREATE TABLE Bonus</span><br><span class="line">(</span><br><span class="line">ENAME VARCHAR(10),</span><br><span class="line">JOB VARCHAR(9),</span><br><span class="line">SAL NUMERIC,</span><br><span class="line">COMM NUMERIC</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">INSERT INTO Dept VALUES (10,&#39;ACCOUNTING&#39;,&#39;NEW YORK&#39;);</span><br><span class="line">INSERT INTO Dept VALUES (20,&#39;RESEARCH&#39;,&#39;DALLAS&#39;);</span><br><span class="line">INSERT INTO Dept VALUES (30,&#39;SALES&#39;,&#39;CHICAGO&#39;);</span><br><span class="line">INSERT INTO Dept VALUES (40,&#39;OPERATIONS&#39;,&#39;BOSTON&#39;);</span><br><span class="line"> </span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7369,&#39;SMITH&#39;,&#39;CLERK&#39;,7902,&#39;1980-12-17&#39;,800,NULL,20);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7499,&#39;ALLEN&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-02-20&#39;,1600,300,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7521,&#39;WARD&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-02-22&#39;,1250,500,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7566,&#39;JONES&#39;,&#39;MANAGER&#39;,7839,&#39;1981-04-02&#39;,2975,NULL,20);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7654,&#39;MARTIN&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-09-28&#39;,1250,1400,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7698,&#39;BLAKE&#39;,&#39;MANAGER&#39;,7839,&#39;1981-05-01&#39;,2850,NULL,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7782,&#39;CLARK&#39;,&#39;MANAGER&#39;,7839,&#39;1981-06-09&#39;,2450,NULL,10);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7839,&#39;KING&#39;,&#39;PRESIDENT&#39;,NULL,&#39;1981-11-17&#39;,5000,NULL,10);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7844,&#39;TURNER&#39;,&#39;SALESMAN&#39;,7698,&#39;1981-09-08&#39;,1500,0,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7900,&#39;JAMES&#39;,&#39;CLERK&#39;,7698,&#39;1981-12-03&#39;,950,NULL,30);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7902,&#39;FORD&#39;,&#39;ANALYST&#39;,7566,&#39;1981-12-03&#39;,3000,NULL,20);</span><br><span class="line">INSERT INTO EMP VALUES</span><br><span class="line">(7934,&#39;MILLER&#39;,&#39;CLERK&#39;,7782,&#39;1982-01-23&#39;,1300,NULL,10);</span><br><span class="line"> </span><br><span class="line">INSERT INTO SALGRADE VALUES (1,700,1200);</span><br><span class="line">INSERT INTO SALGRADE VALUES (2,1201,1400);</span><br><span class="line">INSERT INTO SALGRADE VALUES (3,1401,2000);</span><br><span class="line">INSERT INTO SALGRADE VALUES (4,2001,3000);</span><br><span class="line">INSERT INTO SALGRADE VALUES (5,3001,9999);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<p>问：为什么在前面？</p>
<p>答：硬盘坏了，重新搭建后自动生成的。</p>
<p>问：为什么不调到最后？</p>
<p>答：我不想，虽然可以。</p>
<p>问：为什么不删除？</p>
<p>答：可以拿来做测试。</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<p>qwertyuiop;lkjhgfdszxcvbnm,wertyudfghurtyuityuityuhui</p>
<p>awsedrftghj</p>
<p>edcrfvtgbyhnj</p>
<p>sxdcfvgbhnj</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wwwwwwwhenidadadwd4384</span><br></pre></td></tr></table></figure>



<p>zwxecrtvybnumi</p>
<p>xsdcfvgbhnj</p>
<p>zwxedcfghnj</p>

</div></div>

<p>2333</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显&#x2F;隐内容 %&#125;</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>



<div>
    <div class="fold_hider">
        <div class="close hider_title">点击显示/隐藏代码</div>
    </div>
    <div class="fold">
        要隐藏的部分
        25338785
        54535
        2424
    </div>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;fold_hider&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;close hider_title&quot;&gt;点击显示&#x2F;隐藏代码&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;fold&quot;&gt;</span><br><span class="line">        要隐藏的部分</span><br><span class="line">        25338785</span><br><span class="line">        54535</span><br><span class="line">        2424</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<p><strong>666</strong></p>
]]></content>
  </entry>
  <entry>
    <title>关于我想编译JDK但强迫症和知识不允许这件事</title>
    <url>/2021/03/03/%E5%85%B3%E4%BA%8E%E6%88%91%E6%83%B3%E7%BC%96%E8%AF%91JDK%E4%BD%86%E5%BC%BA%E8%BF%AB%E7%97%87%E5%92%8C%E7%9F%A5%E8%AF%86%E4%B8%8D%E5%85%81%E8%AE%B8%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><p>&emsp;&emsp;很久以前看过程序羊（自己去B站找）用mac编译过JDK。我是windows，不方便，虽然可以用虚拟机安装一个ubuntu（我挺喜欢kali的，但是我没学，虽然知道一些攻击，因为不是很想像以前一样当脚本小子），但我就想在windows上搞，并且不想安装那些软件——用一次就卸载。我就想用我电脑现有的完成，所以一直拖。</p>
<p>&emsp;&emsp;算上这次我一共编译过两次工具，第一次是在PVZ里面。作者提供了一个外挂的源代码，要我们自己编译。还有就是这一次。首先去lua的官网下载源代码，不想编译就多看看下载其他的。</p>
<p>&emsp;&emsp;首先是解压，由于是在windows上，所以可以尝试多次解压出来。我用7z试过。不过我还是在Cmder里用<code>tar -zxvf lua-5.3.4.tar.gz -C lua</code>，lua这个文件夹要存在。解压后终端进入到src文件夹下，执行<code>mingw32-make.exe mingw</code>。其中<code>mingw32-make.exe</code>是因为mingw的<code>make</code>是这个，<code>mingw</code>在官方的直到文档里提到过，自己看。</p>
<blockquote>
<P>
     Do "<kbd>make</kbd>" and see if your platform is listed.
 The platforms currently supported are:
</P>
<p class="display" >
   <font color=red>aix bsd c89 freebsd generic linux macosx mingw posix solaris</font>
</p>
<p>
 If your platform is listed, just do "<kbd>make xxx</kbd>", where xxx
 is your platform name.
</p><p>
 If your platform is not listed, try the closest one or posix, generic,
 c89, in this order.
</p><p>
</p>
</blockquote>
<p>&emsp;&emsp;测试也简单，在src文件下，进入终端输入<code>lua</code>，执行<code>print &quot;hello world&quot;</code>，没问题还可以建一个lua文件<code>echo print &quot;Hello World&quot; &gt;&gt; test.lua</code>，然后执行<code>dofile(&quot;test.lua&quot;)</code>。还可以添加环境变量，这样在哪里都可以执行了，比如我在<code>D:\桌面\github--page</code>下，我可以在lua里执行<code>dofile(&quot;../编程/lua/lua-5.3.4/src/test.lua&quot;)</code>，再比如我在桌面，我可以<code>dofile(&quot;./编程/lua/lua-5.3.4/src/test.lua&quot;)</code>。</p>
<p>&emsp;&emsp;完事。但是编译JDk可不简单。假期末尾其实还简单了解了netcat，这东西好玩，功能挺强大的，东西不是很多，虽然又忘的差不多了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.cnblogs.com/Allen-rg/p/11454911.html" target="_blank" rel="noopener">win10 ‘make’ 不是内部或外部命令</a></li>
<li><a href="https://blog.csdn.net/weixin_38391755/article/details/80380786" target="_blank" rel="noopener">Makefile教程（绝对经典，所有问题看这一篇足够了）</a>(太长了，没看多少)</li>
<li><a href="https://blog.csdn.net/quicmous/article/details/102987619" target="_blank" rel="noopener">lua 源代码初次编译</a></li>
</ol>
]]></content>
      <categories>
        <category>这算教程吧</category>
      </categories>
      <tags>
        <tag>lua</tag>
        <tag>mingw</tag>
      </tags>
  </entry>
  <entry>
    <title>假期学习记录和总结</title>
    <url>/2019/08/21/%E5%81%87%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E5%92%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<center> <font color=red size=50>知识点为我所了解,不保证完全正确</font> </center>
<hr/>

<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>&emsp;&emsp;考试结束后,闲的无聊,不想打游戏,于是开始写代码.写了个 <a href="https://github.com/pengxiandyou/RockPaperScissors-BC-201908" target="_blank" rel="noopener">剪刀石头布</a> 的小游戏.虽然没做到我想要的结果,但还不错.</p>
<p>&emsp;&emsp;在这个小游戏制作过程中,我复习了上次Java实践的一些知识点,不知道东西就百度和问群友.这就是所谓的<font color= pink >面向百度编程</font>.有空我会上传到我的 <del><a href="https://github.com/pengxiandyou" target="_blank" rel="noopener">Github</a></del> (已上传)或者<a href="https://gitee.com/pengxiandyou" target="_blank" rel="noopener">码云</a>上</p>
<p>&emsp;&emsp;在这之前我还为我的红警写了一个简单的文件删除工具.</p>
<p>知识点</p>
<ol>
<li><p>重写<code>JPanel</code>使之可以带背景图片,再次改写使之可以为后面切换背景做铺垫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;  </span><br><span class="line">	 ImageIcon icon = <span class="keyword">new</span> ImageIcon(<span class="string">"src\\rock_paper_scissors\\背景.jpg"</span>); </span><br><span class="line">	Image img = icon.getImage();  </span><br><span class="line">	g.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, icon.getIconWidth(), icon.getIconHeight(), 	icon.getImageObserver());  </span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<ol start="2">
<li><p>了解了一点画布概念</p>
</li>
<li><p>获取当前时间<code>System.currentTimeMillis()</code></p>
</li>
<li><p>每隔多少时间执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer=<span class="keyword">new</span> Timer(<span class="keyword">false</span>);</span><br><span class="line">timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">代码;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>JFrame</code>设置大小时要注意包含边框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"窗口边框上"</span>+jf.getInsets().top);<span class="comment">//上</span></span><br><span class="line">System.out.println(<span class="string">"窗口边框下"</span>+jf.getInsets().bottom);<span class="comment">//下</span></span><br><span class="line">System.out.println(<span class="string">"窗口边框左"</span>+jf.getInsets().left);<span class="comment">//左</span></span><br><span class="line">System.out.println(<span class="string">"窗口边框右"</span>+jf.getInsets().right);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"内容面板宽度"</span>+jf.getContentPane().getSize().width);<span class="comment">//宽 jf.getContentPane()好像可以不加</span></span><br><span class="line">System.out.println(<span class="string">"内容面板的高度"</span>+jf.getContentPane().getSize().height);<span class="comment">//高</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器打开指定链接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Desktop desktop = Desktop.getDesktop(); </span><br><span class="line">desktop.browse(<span class="keyword">new</span> URI(<span class="string">"https://space.bilibili.com/20837528"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件选择器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line"><span class="comment">// 创建一个默认打开用户文件夹的问价选择器</span></span><br><span class="line">JFileChooser chooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line"><span class="keyword">int</span> flag = chooser.showOpenDialog(frame);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若选择了文件，则打印选择了什么文件</span></span><br><span class="line"><span class="keyword">if</span> (flag == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">	System.out.println(<span class="string">"用户选择了文件："</span> + chooser.getSelectedFile());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于路径这些,打包要注意.<code>jar</code>包里读文件没学会实在太难了</p>
</li>
<li><p>通过<code>File</code>获取当前路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File directory = <span class="keyword">new</span> File(<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(directory.getCanonicalPath()); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些监听器,一些小知识点</p>
</li>
<li><p>这个真不能保证对,主要我没学透,而且有好多不同的图.个人感觉这张是比较对的</p>
<p>  <img src="https://i.loli.net/2019/08/21/eFmJnQzKLHZfh8N.png" alt="JFream.png"></p>
</li>
</ol>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>​    &emsp;&emsp;假期中还学了一些其他的.<code>JFrame</code>和<code>JPanel</code>的进一步了解.学习了Git和Github,并注册了Github账号,而且在Github上搭建静态博客.学习了MarkDown语法.学习了Java的一些小知识点(好像没记住).进一步学习了集合和IO流.简单学习了数据库.进一步学习JDBC.模仿使用了Test.使用了c3p0.使用了beanutils.使用了dbutils.进一步学习了MySQL.进一步学习了HTML.学习lCSS.学习JavaScript.进一步学习了JavaWeb.进一步学习了socket编程.简单了解了设计模式.了解JAVA新特性,即拉姆达表达式和函数式接口.学习了计算机二级的MS Office.学习了idea和eclipse的一些快捷键.</p>
<p>​    &emsp;&emsp;有空我会把 <a href="https://pengxiandyou.github.io/2019/08/22/MySQL简单笔记一/">MySQL的笔记</a>, <a href="https://pengxiandyou.github.io/2019/08/27/HTML%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/">HTML的笔记</a> ,<a href="https://pengxiandyou.github.io/2019/10/01/CSS%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/">CSS的笔记</a>, <a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript的笔记</a>写成博客</p>
<center> <font color=pink>最后祝您生活愉快</font> </center>]]></content>
      <categories>
        <category>记录</category>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我懒到极致不想太麻烦地切换java版本这件事</title>
    <url>/2021/03/15/%E5%85%B3%E4%BA%8E%E6%88%91%E6%87%92%E5%88%B0%E6%9E%81%E8%87%B4%E4%B8%8D%E6%83%B3%E5%A4%AA%E9%BA%BB%E7%83%A6%E5%9C%B0%E5%88%87%E6%8D%A2java%E7%89%88%E6%9C%AC%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<p>&emsp;&emsp;首先自己寻找JDK并安装，我不提供。然后一一安装。 至于安装在哪里，就看你的喜欢和你的管理方式。高版本的安装其实很方便。<br>&emsp;&emsp;<img src="https://i.loli.net/2021/03/15/BHMiKtEybpuDGWd.png" alt="我的java安装路径.PNG"></p>
<p>&emsp;&emsp;对于环境变量，先去<code>Path</code>把带<code>java</code>字眼的路径删掉。当然你也可先备份再删，也可以不删，只不过后续需要把添加的java相关路径放在前面。</p>
<p>&emsp;&emsp;继续环境变量。对于<code>CLASSPATH</code>，有些ide需要，比如eclipse。它们之间比较玄学，所以还是保留者，没有就添上。由于要变更版本，所以要相对引用。不过不需担心，管它找不到找得到。</p>
<p>&emsp;&emsp;由于高版本的JDK目录结构变了，以及由于Applet几乎不使用了，没有单独安装JRE了。所以可以参考我的设计方式，反正只要能到达手动切换也比较简单即可。</p>
<p>&emsp;&emsp;我的设计如图。<code>HOME</code>是给<code>CLASSPATH</code>用的。每安装一个版本都要如图创建    <code>JDKxx_HOME</code>和<code>JDKxx_JDK_JRE</code>。当然你也可以创建一个bat（vbs或许更好吧），在安装时故意设计好安装路径，然后根据文件夹的名称来创建这两个变量。我就不需要了，我只简单搞了一个一键切换版本的。</p>
<p>&emsp;&emsp;<img src="https://i.loli.net/2021/03/15/vHTSFszO4AYZLXr.png" alt="我java版本切换切换.PNG"></p>
<p>&emsp;&emsp;双版本之间切换</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 变量延迟 虽然感觉此处不需要</span><br><span class="line"><span class="built_in">setlocal</span> ENABLEDELAYEDEXPANSION</span><br><span class="line"></span><br><span class="line">:: 管理员权限</span><br><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject("Shell.Application").ShellExecute("<span class="built_in">cmd</span>.exe","/c %~s0 ::","","runas",<span class="number">1</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"><span class="built_in">cd</span> /d "%~dp0"</span><br><span class="line"></span><br><span class="line">::换成utf-<span class="number">8</span></span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">:: 预设环境变量</span><br><span class="line"><span class="built_in">set</span> jdk8_home=<span class="variable">%JDK8_HOME%</span></span><br><span class="line"><span class="built_in">set</span> jdk8_java=<span class="variable">%JDK8_JDK_JRE%</span></span><br><span class="line"><span class="built_in">set</span> jdk11_home=<span class="variable">%JDK11_HOME%</span></span><br><span class="line"><span class="built_in">set</span> jdk11_java=<span class="variable">%JDK11_JDK_JRE%</span></span><br><span class="line"></span><br><span class="line">:: 当前</span><br><span class="line"><span class="built_in">set</span> current_home=<span class="variable">%JAVA_HOME%</span></span><br><span class="line"><span class="built_in">set</span> current_java=<span class="variable">%JAVA%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> jdk8_home=<span class="variable">%jdk8_home%</span></span><br><span class="line"><span class="built_in">echo</span> jdk8_java=<span class="variable">%jdk8_java%</span></span><br><span class="line"><span class="built_in">echo</span> jdk11_home=<span class="variable">%jdk11_home%</span></span><br><span class="line"><span class="built_in">echo</span> jdk11_java=<span class="variable">%jdk11_java%</span></span><br><span class="line"><span class="built_in">echo</span> current_home=<span class="variable">%current_home%</span></span><br><span class="line"><span class="built_in">echo</span> current_java=<span class="variable">%current_java%</span></span><br><span class="line"></span><br><span class="line">::交换，会换成绝对路径，要相对引用的话，可以用<span class="variable">%%转</span>义一个%，不过名字要改成环境变量的名字。</span><br><span class="line"><span class="keyword">if</span> "<span class="variable">%current_java%</span>" <span class="keyword">equ</span> "<span class="variable">%jdk8_java%</span>"  (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">11</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%jdk11_home%</span></span><br><span class="line">	SETX /M JAVA <span class="variable">%jdk11_java%</span></span><br><span class="line">	) <span class="keyword">else</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">8</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%jdk8_home%</span></span><br><span class="line">	SETX /M JAVA <span class="variable">%jdk8_java%</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="comment">rem pause</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;多个版本之间切换，输入型的。（傻逼了，直接根据输入进行拼接就可以了，那还要判断呀）</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 变量延迟 虽然感觉此处不需要</span><br><span class="line"><span class="built_in">setlocal</span> ENABLEDELAYEDEXPANSION</span><br><span class="line"></span><br><span class="line">:: 管理员权限</span><br><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject("Shell.Application").ShellExecute("<span class="built_in">cmd</span>.exe","/c %~s0 ::","","runas",<span class="number">1</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"><span class="built_in">cd</span> /d "%~dp0"</span><br><span class="line"></span><br><span class="line">::换成utf-<span class="number">8</span></span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">::记住   <span class="built_in">set</span> /a 执行数学计算</span><br><span class="line">::		<span class="built_in">set</span> /p 提示用户输入</span><br><span class="line"><span class="built_in">set</span> /p aim="你想要的java版本："</span><br><span class="line"></span><br><span class="line">:: 当前</span><br><span class="line"><span class="built_in">set</span> current_home=<span class="variable">%JAVA_HOME%</span></span><br><span class="line"><span class="built_in">set</span> current_java=<span class="variable">%JAVA%</span></span><br><span class="line"><span class="built_in">echo</span> current_home=<span class="variable">%JAVA_HOME%</span></span><br><span class="line"><span class="built_in">echo</span> current_java=<span class="variable">%JAVA%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::本想设计成map的方式的</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">8</span>  (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">8</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK8_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK8_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">9</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">9</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK9_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK9_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">10</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">10</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK10_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK10_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">11</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">11</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK11_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK11_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">12</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">12</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK12_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK12_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">13</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">10</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK13_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK13_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">14</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">10</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK14_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK14_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%aim%</span> <span class="keyword">equ</span> <span class="number">15</span> (</span><br><span class="line">	<span class="built_in">echo</span> 换成<span class="number">10</span></span><br><span class="line">	SETX /M JAVA_HOME <span class="variable">%%J</span>DK15_HOME%%</span><br><span class="line">	SETX /M JAVA <span class="variable">%%J</span>DK15_JDK_JRE%%</span><br><span class="line">	<span class="keyword">goto</span> end</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"><span class="comment">rem pause</span></span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;以后切换版本就只须点击bat（我后来觉得vbs好一些）即可，真是方便呐。如果使用频繁还可创建快捷方式，利用<code>win+R</code>来快速切换，哈，究极方便。</p>
]]></content>
      <categories>
        <category>这算教程吧</category>
      </categories>
      <tags>
        <tag>bat</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>回形数组的自我解答</title>
    <url>/2021/01/15/%E5%9B%9E%E5%BD%A2%E6%95%B0%E7%BB%84%E7%9A%84%E8%87%AA%E6%88%91%E8%A7%A3%E7%AD%94/</url>
    <content><![CDATA[<h1 id="前期想法"><a href="#前期想法" class="headerlink" title="前期想法"></a>前期想法</h1><p>&emsp;&emsp;由于当时老师刚讲完杨辉三角，而我做杨辉三角是不用数组进行存储的，而是用组合数直接算，直接打印，想算多少算多少。因此我的初步想法是直接打印，与此对应的思路是两个<code>for</code>，通过判断对<code>i</code>和<code>j</code>进行操作，以进行旋转。此时还是正着走的。</p>
<p>&emsp;&emsp;因为暂时想不出，就使用纸张进行画图。最先发现的是奇偶的最后的拐弯不一样。于是又算出最后一个数的坐标。阿巴阿巴阿巴（省略一大段）。</p>
<h1 id="最终想法"><a href="#最终想法" class="headerlink" title="最终想法"></a>最终想法</h1><p>&emsp;&emsp;一言以蔽之，倒着走，算出拐弯，算出步数以及操作方式和操作对象。</p>
<p>&emsp;&emsp;虽然中间思考很久，但我不想叨逼叨这些碎碎念。</p>
<p><img src="https://i.loli.net/2021/01/15/RQKNgyZ1qh9b8mL.png" alt="回旋数组的解题思路以例4.png"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>&emsp;&emsp;这是用<code>Sublime</code>写的，不想打开idea。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Scanner scancer = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">	<span class="keyword">int</span> size = scancer.nextInt();<span class="comment">//要大于1</span></span><br><span class="line">	<span class="keyword">int</span> num = size * size;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	旋转数矩阵</span></span><br><span class="line"><span class="comment">	思路：根据矩阵大小算出最后一个数并算出它的位置，</span></span><br><span class="line"><span class="comment">	通过观察发现，倒着旋转，奇数和偶数的矩阵里最后的旋转不同（即不是i，就是j）。</span></span><br><span class="line"><span class="comment">	通过矩阵大小，算出拐弯次数。</span></span><br><span class="line"><span class="comment">	倒着看，算出每走（size=4为例，1，1，2，2，3，3，3（4跳出成3））拐弯。</span></span><br><span class="line"><span class="comment">	倒着看，每次拐弯后对i，j的操作不同，两两一组，根据第几次循环判断对i还是j操作，根据每两次（根据次数算出第几组，根据组确定操作是+还是-）</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[size][size];</span><br><span class="line">	<span class="comment">/*分奇偶情况*/</span></span><br><span class="line">	<span class="keyword">if</span> (size % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">/*顺着数，最后一个数*/</span></span><br><span class="line">		j = (i=size/<span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">		mat[i][j] = num;</span><br><span class="line">		<span class="comment">/*控制循环次数，也可理解为共拐几次弯。例：size=4，共拐2*size-1次弯*/</span></span><br><span class="line">		label:<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; <span class="number">2</span>*size ; l++ ) &#123;</span><br><span class="line">			<span class="comment">/*第几组，和 走多少步后拐弯*/</span></span><br><span class="line">			<span class="keyword">int</span> temp = (<span class="keyword">int</span>)java.lang.Math.ceil((<span class="keyword">float</span>)l/(<span class="keyword">float</span>)<span class="number">2</span>);<span class="comment">//注意如果不强转的话，最后一行只有一个。因为1/2=0，而我不能要0，要从1开始。</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>;m &lt; temp;m++ ) &#123;</span><br><span class="line">				<span class="keyword">if</span>(l % <span class="number">2</span> == <span class="number">1</span>)&#123;<span class="comment">//j 更改1为0可实现顺时针旋转</span></span><br><span class="line">					<span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">						<span class="comment">/*右移*/</span></span><br><span class="line">						j+=<span class="number">1</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="comment">/*左移*/</span></span><br><span class="line">						j-=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;<span class="comment">//i</span></span><br><span class="line">					<span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">						<span class="comment">/*上移*/</span></span><br><span class="line">						i-=<span class="number">1</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="comment">/*下移*/</span></span><br><span class="line">						i+=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				mat[i][j] = (num-=<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="number">1</span> == num) &#123;</span><br><span class="line">					<span class="comment">/*这里就是最后一组的第一个的最后要少走一步（即最后一次拐弯后，最后一步）*/</span></span><br><span class="line">					<span class="keyword">break</span> label;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		i = j = size / <span class="number">2</span>;</span><br><span class="line">		mat[i][j] = num;</span><br><span class="line">	label:<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; <span class="number">2</span>*size ; l++ ) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = (<span class="keyword">int</span>)java.lang.Math.ceil((<span class="keyword">float</span>)l/(<span class="keyword">float</span>)<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>;m &lt; temp;m++ ) &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(l % <span class="number">2</span> == <span class="number">1</span>)&#123;<span class="comment">//j</span></span><br><span class="line">					<span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">						j-=<span class="number">1</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						j+=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;<span class="comment">//i</span></span><br><span class="line">					<span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">						i+=<span class="number">1</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						i-=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				mat[i][j] = (num-=<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="number">1</span> == num) &#123;</span><br><span class="line">					<span class="keyword">break</span> label;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;mat.length ; l++ ) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; mat[l].length; m++ ) &#123;<span class="comment">//这里也可以顺时针旋转</span></span><br><span class="line">			System.out.print(mat[l][m]+<span class="string">"\t"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>&emsp;&emsp;对于当时弹幕里的对角线，我暂时没想出。对于我这个代码，感觉可以奇偶合并在一起。我的想法是，构造一个函数对操作对象和操作方式进行映射。</p>
]]></content>
      <categories>
        <category>练习</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>在Typora里使用mermaid画图</title>
    <url>/2020/10/04/%E5%9C%A8Typora%E9%87%8C%E4%BD%BF%E7%94%A8mermaid%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="mermaid之graph"><a href="#mermaid之graph" class="headerlink" title="mermaid之graph"></a>mermaid之graph</h1><h2 id="初始操作"><a href="#初始操作" class="headerlink" title="初始操作"></a>初始操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​~~~mermaid</span><br><span class="line">graph 方向;</span><br><span class="line">代码</span><br><span class="line">由于相关特性以及不想改文件，把此处的‘~’换成‘&#96;’</span><br></pre></td></tr></table></figure>

<p><code>~</code>换<code>`</code></p>
<h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><ul>
<li>TB-从上到下</li>
<li>TD-自顶向下/从上至下相同</li>
<li>BT-从下到上</li>
<li>RL-从右到左</li>
<li>LR-从左到右</li>
</ul>
<h2 id="id-结点-形状"><a href="#id-结点-形状" class="headerlink" title="id[结点]形状"></a>id[结点]形状</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">id0</span><br><span class="line">id[矩形]</span><br><span class="line">id1(圆角)</span><br><span class="line">id2([操场体育场形])</span><br><span class="line">id4[[羽毛球场形]]</span><br><span class="line">%% 我Tyopa圆柱是黑的</span><br><span class="line">id5[(圆柱)]</span><br><span class="line">id3((园))</span><br><span class="line">id6&gt;丝带形]</span><br><span class="line">id7&#123;菱形&#125;</span><br><span class="line">id8&#123;&#123;六角&#125;&#125;</span><br><span class="line">id9[&#x2F;平行四边形&#x2F;]</span><br><span class="line">id10[\平行四边形\]</span><br><span class="line">id11[&#x2F;上梯形\]</span><br><span class="line">id12[\下梯形&#x2F;]</span><br><span class="line">%%不像正方形</span><br><span class="line">id13[[正方形]]</span><br><span class="line">%%不支持</span><br><span class="line">id14[&#123;棱柱体&#125;]</span><br><span class="line">id15(&#123;圆弧&#125;)</span><br><span class="line">id16&#123;(圆弧)&#125;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph TD;
    id0
id[矩形]
id1(圆角)
id2([操场体育场形])
id4[[羽毛球场形]]
%% 我Tyopa圆柱是黑的
id5[(圆柱)]
id3((园))
id6>丝带形]
id7{菱形}
id8
id9[/平行四边形/]
id10[\平行四边形\]
id11[/上梯形\]
id12[\下梯形/]
id13[[正方形]]</pre>





<h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><p>实线<code>---</code></p>
<pre class="mermaid">graph LR;
A---B</pre>

<p>实线箭头<code>--&gt;</code></p>
<pre class="mermaid">graph LR;
A-->B</pre>

<p>虚线<code>-.-</code></p>
<pre class="mermaid">graph LR;
A-.-B</pre>

<p>虚线箭头<code>-.-&gt;</code></p>
<pre class="mermaid">graph LR;
A-.->B</pre>

<p>粗线<code>===</code></p>
<pre class="mermaid">graph LR;
A===B</pre>

<p>粗线箭头<code>==&gt;</code></p>
<pre class="mermaid">graph LR;
A==>B</pre>



<h2 id="线上文字"><a href="#线上文字" class="headerlink" title="线上文字"></a>线上文字</h2><p><code>--文字---</code>、<code>--文字--&gt;</code>、<code>---|文字|</code>、<code>--&gt;|文字|</code></p>
<pre class="mermaid">graph LR;
A --连--- B --连--> C ---|连| D -->|连| E</pre>

<p><code>-.文字.-</code>、<code>-.文字.-&gt;</code>、<code>-.-|文字|</code>、<code>-.-&gt;|文字|</code></p>
<pre class="mermaid">graph LR;
A-.连.-B-.连.->C-.-|连|D-.->|连|E</pre>

<p><code>==文字===</code>、<code>==文字==&gt;</code>、同理</p>
<pre class="mermaid">graph LR;
A==连===B==连==>C</pre>



<h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><pre class="mermaid">graph TB
    c1-->a2
    %% 如图可以改显示的东西
    subgraph one [1]
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end</pre>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    %% 如图可以改显示的东西--专有id</span><br><span class="line">    subgraph one [1]</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>



<h2 id="flowchart"><a href="#flowchart" class="headerlink" title="flowchart"></a>flowchart</h2><p>如果把<code>graph</code>换成<code>flowchart</code>，则有其他的连接和子图之间的连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flowchart TD;</span><br><span class="line">a--ob</span><br><span class="line">b--xa</span><br><span class="line">c o--o b</span><br><span class="line">b &lt;--&gt; c</span><br><span class="line">c x--x e</span><br><span class="line">a --&gt; e</span><br></pre></td></tr></table></figure>

<pre class="mermaid">flowchart TD;
a--ob
b--xa
c o--o b
b <--> c
c x--x e
a --> e</pre>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line">    one --&gt; two</span><br><span class="line">    three --&gt; two</span><br><span class="line">    two --&gt; c2</span><br></pre></td></tr></table></figure>

<pre class="mermaid">flowchart TB
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
    one --> two
    three --> two
    two --> c2</pre>



<h2 id="样式和类"><a href="#样式和类" class="headerlink" title="样式和类"></a>样式和类</h2><p>线的样式<code>linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;</code>会应用于第4个连接。</p>
<pre class="mermaid">graph LR;
A-->B
linkStyle 0 stroke:#ff3,stroke-width:4px,color:red;</pre>

<p>节点的样式<code>style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</code>。</p>
<pre class="mermaid">graph LR
    id1(Start)-->id2(Stop)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</pre>

<p>类定义<code>classDef className fill:#f9f,stroke:#333,stroke-width:4px;</code>。</p>
<p>类附加<code>class nodeId1,nodeId2 className;</code>。</p>
<p>附加还可以用<code>:::</code>来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A:::someclass --&gt; B</span><br><span class="line">    classDef someclass fill:#f96;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph LR
    A:::someclass --> B
    classDef someclass fill:#f96;</pre>

<p>默认类<code>classDef default fill:#f9f,stroke:#333,stroke-width:4px;</code>，它将被分配给所有没有特定类定义的节点。</p>
<p>外部预定义的CSS类在Typora不起作用，但变成网页应该可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .cssClass &gt; rect&#123;</span><br><span class="line">        fill:#FF0000;</span><br><span class="line">        stroke:#FFFF00;</span><br><span class="line">        stroke-width:4px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">------------------</span><br><span class="line">graph LR;</span><br><span class="line">    A--&gt;B[AAA&lt;span&gt;BBB&lt;&#x2F;span&gt;];</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    class A cssClass;</span><br></pre></td></tr></table></figure>

<style>
    .cssClass > rect{
        fill:#FF0000;
        stroke:#FFFF00;
        stroke-width:4px;
    }
</style>

<pre class="mermaid">graph LR;
    A-->B[AAA<span>BBB</span>];
    B-->D;
    class A cssClass;</pre>

<p>需要学好多css的感觉。</p>
<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><pre class="mermaid">graph LR
id1["(233)"]
id2["#quot;"]-->id3["#9829;"]</pre>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1[&quot;(233)&quot;]</span><br><span class="line">id2[&quot;#quot;&quot;]--&gt;id3[&quot;#9829;&quot;]</span><br></pre></td></tr></table></figure>

<p>需要查找关于html的转义。</p>
<h2 id="click"><a href="#click" class="headerlink" title="click"></a>click</h2><p>在Tyopa中不起作用，还不显示，要变成网页</p>
<script>
     var callback = function(){
      console.log('A callback was triggered');
  }
</script>


<pre class="mermaid">graph LR;
    A-->B;
    click A callback "Tooltip for a callback"
    click B "http://www.github.com" "This is a tooltip for a link" _blank</pre>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var callback &#x3D; function()&#123;</span><br><span class="line">      alert(&#39;A callback was triggered&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">----------------</span><br><span class="line">graph LR;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    click A callback &quot;Tooltip for a callback&quot;</span><br><span class="line">    click B &quot;http:&#x2F;&#x2F;www.github.com&quot; &quot;This is a tooltip for a link&quot;</span><br></pre></td></tr></table></figure>

<p>默认情况下，链接在同一浏览器选项卡/窗口中打开。它可以通过添加链接目标的点击定义来改变这种（<code>_self</code>，<code>_blank</code>，<code>_parent</code>和<code>_top</code>支持）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    B--&gt;C;</span><br><span class="line">    click A &quot;http:&#x2F;&#x2F;www.github.com&quot; _blank</span><br><span class="line">    click B &quot;http:&#x2F;&#x2F;www.github.com&quot; &quot;Open this in a new tab&quot; _blank</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph LR;
    A-->B;
    B-->C;
    click A "http://www.github.com" _blank
    click B "http://www.github.com" "Open this in a new tab" _blank</pre>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A &amp; B--&gt; C &amp; D</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph TB
    A & B--> C & D</pre>

<p>注释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A &amp; B--&gt; C &amp; D</span><br><span class="line">    %% 如此使用真方便</span><br></pre></td></tr></table></figure>

<p> 关于空格和分号，尽量标准吧。</p>
<p>关于icon，Typora不会显示，在博客里用可能会需要引入一些东西。不过一般应该都引入了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C--&gt;|3|F[&quot;fa:fa-car Car&quot;]</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph LR;
C-->|3|F["fa:fa-car Car"]</pre>







<h1 id="其他图"><a href="#其他图" class="headerlink" title="其他图"></a>其他图</h1><p>以后再整理，暂时用不上。</p>
]]></content>
      <categories>
        <category>这算教程吧</category>
        <category>Typora</category>
        <category>mermaid</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>拓展简单笔记</title>
    <url>/2019/10/24/%E6%8B%93%E5%B1%95%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/27/HTML简单笔记/">HTML简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/01/CSS简单笔记/">CSS简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/jQuery简单笔记/">jQuery简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/拓展简单笔记/">拓展简单笔记</a><br/></p>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><h2 id="一-理解概念"><a href="#一-理解概念" class="headerlink" title="一 理解概念"></a>一 理解概念</h2><ul>
<li>一对标签就是一个盒子</li>
</ul>
<h2 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h2><ol>
<li><p>边框</p>
<ul>
<li><p>border-color`</p>
  <table>
      <tr>
          <td >属性</td>
          <td>说明</td>
          <td>示例</td>
      </tr>
      <tr>
          <td>border-top-color</td>
          <td>上边框颜色</td>
           <td>border-top-color:#369;</td>
      </tr>
       <tr>
          <td>border-right-color</td>
          <td>右边框颜色</td>
           <td>border-right-color:#369;</td>
      </tr>
        <tr>
          <td>border-bottom-color</td>
          <td>下边框</td>
            <td>border-bottom-color:#369;</td>
      </tr>  
         <tr>
          <td>border-left-color</td>
          <td>左边框颜色</td>
             <td>border-left-color:#369;</td>
      </tr>
           <tr>
          <td rowspan="4">border-color</td>
          <td>四个边框同一色</td>
               <td>border-color:#369;</td>
      </tr>
           <tr>
          <td>上下#369<br/>
               左右#000</td>
          <td>border-color:#369 #000;</td>
      </tr>
           <tr>
          <td>上#369<br/>
               左右#000<br/>
               下#f00</td>
          <td>border-color:#369 #000 #f00;</td>
      </tr>
           <tr>
          <td>上#369<br/>
               右#000<br/>
              下#f00<br/>
              左#00f
               <td>border-color:#369 #000 #f00 #00f</td>
      </tr>
  </table>
</li>
<li><p><code>border-width</code>  同理 从上开始顺时针转 <code>1px</code> <code>thin</code> <code>medium</code> <code>thick</code></p>
</li>
<li><p><code>border-style</code> 同理  同理 <code>double</code> <code>solid</code> <code>dotted</code> <code>none</code> <code>hidden</code> <code>dashed</code></p>
</li>
<li><p><code>border:1px red solid;</code> 也可结合四边来写 如 : <code>border-top</code></p>
</li>
</ul>
</li>
<li><p>边距</p>
<ol>
<li><p>外边距 <code>px</code></p>
<ul>
<li><code>margin</code> 可以: <code>1px</code> , <code>2px 3px</code> , <code>4px 5px 6px</code> , <code>7px 8px 9px 10px</code></li>
<li><code>margin-top</code></li>
<li><code>margin-right</code></li>
<li><code>margin-bottom</code></li>
<li><code>margin-left</code></li>
</ul>
<p>妙用: 网页居中对齐 <code>margin:0px auto;</code> 网页<code>1024X768</code>比较合适 小于1000</p>
</li>
<li><p>内边距 padding 同上</p>
</li>
</ol>
</li>
</ol>
<h1 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h1><ol>
<li>块级元素<ul>
<li><code>div</code> <code>p</code> <code>ul</code> <code>li</code>等</li>
<li>一个标签独占一行</li>
<li><code>display:inline;</code> 变行级元素</li>
</ul>
</li>
<li>行级元素<ul>
<li><code>span</code> <code>a</code> <code>img</code> 等</li>
<li>一行从左往右一次摆放</li>
<li><code>display:block;</code> 变块级元素</li>
</ul>
</li>
<li><code>display:none;</code> 可以不显示 看不见摸不着 但在</li>
</ol>
<h1 id="div布局"><a href="#div布局" class="headerlink" title="div布局"></a>div布局</h1><ol>
<li>浮动: 元素浮动以后,会脱离标准流,后面的元素抢占属于该元素的位置<ul>
<li><code>float:left;</code></li>
</ul>
</li>
<li>定位: <code>position:static;</code> 相对定位: <code>relative 可加偏移量(相对标准流) top:50px;left:50px;</code><ul>
<li>static : 默认值,标准布局,不要使用偏移量</li>
<li>relative : 相对定位,没有偏移量就是标准流的位置,有则相对标准流发生偏移,偏移以后不会脱离标准流</li>
<li>absolute : 绝对定位 有偏移量 相对父级标签偏远 父级标签没有定位属性则找父级的父级 直到找到或最终相对浏览器</li>
<li>fixed : 相对浏览器 瑟情广告记忆</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>拓展</category>
      </categories>
      <tags>
        <tag>拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技能竞赛可能用到命令集合v1.0</title>
    <url>/2020/07/22/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%8F%AF%E8%83%BD%E7%94%A8%E5%88%B0%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88v1-0/</url>
    <content><![CDATA[<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="配环境变量"><a href="#配环境变量" class="headerlink" title="配环境变量"></a>配环境变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld</span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure>

<h1 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname px02</span><br></pre></td></tr></table></figure>

<h1 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r hadoop&#x2F; px03:&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id 地址</span><br></pre></td></tr></table></figure>

<h1 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date 查看时间</span><br><span class="line">tzselect 选择时间</span><br><span class="line">date -s 00:00 修改时间</span><br><span class="line">ntpdate master同步</span><br></pre></td></tr></table></figure>

<h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动zkServer.sh start</span><br><span class="line">状态zkServer.sh status</span><br></pre></td></tr></table></figure>

<h1 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">	master格式化 hadoop namenode -format</span><br><span class="line">	start-all.sh</span><br><span class="line">查看</span><br><span class="line">	master:50070</span><br><span class="line">	master:18088</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">hadoop-daemon.sh start secondarynamenode</span><br></pre></td></tr></table></figure>

<h2 id="wordcount案例"><a href="#wordcount案例" class="headerlink" title="wordcount案例"></a>wordcount案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -put &#39;文件&#39; 目录</span><br><span class="line">hadoop jar $HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.9.2.jar wordcount &#x2F;input&#x2F;wordcount.txt &#x2F;output</span><br><span class="line">hadoop fs -cat &#x2F;output&#x2F;part-r-00000</span><br></pre></td></tr></table></figure>

<h2 id="计算PI案例"><a href="#计算PI案例" class="headerlink" title="计算PI案例"></a>计算PI案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.9.2.jar pi 5 5</span><br></pre></td></tr></table></figure>



<h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可记做hadoop fs -shell命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 帮助</span><br><span class="line">hadoop fs -help 命令</span><br><span class="line"># 查看</span><br><span class="line">hadoop fs -ls 目录</span><br><span class="line"># 创建目录</span><br><span class="line">hadoop fs -mkdir 目录</span><br><span class="line"># 查看文件</span><br><span class="line">hadoop fs -cat 文件</span><br><span class="line"># 追加</span><br><span class="line">hadoop fs -appendToFile 源文件 目标文件</span><br><span class="line"># 从本地（不是windows）剪切粘贴到HDFS</span><br><span class="line">hadoop fs -moveFromLocal 文件 目录</span><br><span class="line"># 从本机拷贝 等同于 -put</span><br><span class="line">hadoop fs -copyFromLocal 文件 目录</span><br><span class="line"># 拷贝回本地 等同于 -get </span><br><span class="line">hadoop fs -copyToLocal 文件 目录</span><br><span class="line"># HDFS中拷贝到另一个路径</span><br><span class="line">hadoop fs -cp 文件 目录</span><br><span class="line"># 移动 -mv</span><br></pre></td></tr></table></figure>

<h1 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">	slave1下</span><br><span class="line">		hive --service metastore</span><br><span class="line">	master下</span><br><span class="line">		hive</span><br><span class="line">		测试show databases;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">库、表等可在web页面查看</span><br></pre></td></tr></table></figure>

<h2 id="创建库表"><a href="#创建库表" class="headerlink" title="创建库表"></a>创建库表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database test;</span><br><span class="line"># 创建管理表or内部表</span><br><span class="line">create table st(id int,name string)</span><br><span class="line">row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line"># 创建外部表</span><br><span class="line"> create external table dept(deptno int,dname string,loc int)</span><br><span class="line"> row format delimited fields terminated by &#39;\t&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="load导数据"><a href="#load导数据" class="headerlink" title="load导数据"></a>load导数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入数据 也可以自己建</span><br><span class="line">load data local inpath &#39;文件&#39; into table 表名;</span><br></pre></td></tr></table></figure>

<h2 id="desc表"><a href="#desc表" class="headerlink" title="desc表"></a>desc表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看表格式化数据 可看类型</span><br><span class="line">desc formatted dept;</span><br></pre></td></tr></table></figure>

<h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建分区表 单的</span><br><span class="line">create table dept_partition(dno int,dname string,loc string)</span><br><span class="line">partitioned by(month string)</span><br><span class="line">row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line">	# 加载数据</span><br><span class="line">	load data local inpath &#39;&#x2F;opt&#x2F;dept.txt&#39; into table dept_partition partition(month&#x3D;&#39;202006&#39;);</span><br><span class="line">	# 查询</span><br><span class="line">	select * from dept_partition;</span><br><span class="line">	select * from dept_partition where month&#x3D;202006;</span><br><span class="line">	# 增加分区表 可以跟多个partition，空格隔开 感觉本质是文件夹 </span><br><span class="line">	alter table dept_partition add partition(month&#x3D;&#39;202004&#39;);</span><br><span class="line">	# 删除</span><br><span class="line">	add换drop，多个partition用逗号隔开</span><br><span class="line"># 创建多分区</span><br><span class="line">by(month string,day string) 举一反三</span><br></pre></td></tr></table></figure>

<h2 id="表修改"><a href="#表修改" class="headerlink" title="表修改"></a>表修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重命名表</span><br><span class="line">alter table st rename to st01;</span><br><span class="line"># 增加、修改、替换列信息</span><br><span class="line">	# 增加、替换</span><br><span class="line">	 alter table st01 add|replace columns(age int);</span><br><span class="line">	# 更新</span><br><span class="line">	alter table st01 change age sex string;</span><br><span class="line"># 删除表</span><br><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过查询语句插入数据</span><br><span class="line">	# 创建表</span><br><span class="line">	create table st(</span><br><span class="line">    &gt; id int,name string)</span><br><span class="line">    &gt; partitioned by(month string)</span><br><span class="line">    &gt; row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line">    # 插入基本的数据</span><br><span class="line">	insert into table st partition(month&#x3D;&#39;202006&#39;)values(3,&#39;zs&#39;),(2,&#39;ww&#39;);</span><br><span class="line">	# 查询单张表插入</span><br><span class="line">	insert overwrite table st partition(month&#x3D;&#39;202007&#39;)</span><br><span class="line">    &gt; select id,name from st;</span><br><span class="line">    # 查询多张插入</span><br><span class="line">    from student</span><br><span class="line">    &gt; insert overwrite table student partition(month&#x3D;&#39;201707&#39;)</span><br><span class="line">    &gt; select id, name where month&#x3D;&#39;201709&#39;</span><br><span class="line">    &gt; insert overwrite table student partition(month&#x3D;&#39;201706&#39;)</span><br><span class="line">    &gt; select id, name where month&#x3D;&#39;201709&#39;;</span><br><span class="line"># 查询语句中创建表并加入数据</span><br><span class="line">create table st03</span><br><span class="line">&gt; as select id,name from st;</span><br></pre></td></tr></table></figure>

<h2 id="insert导出"><a href="#insert导出" class="headerlink" title="insert导出"></a>insert导出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># insert导出 导出目录，目录里有文件 去掉local可导到HDFS</span><br><span class="line">	# 未格式化</span><br><span class="line">	insert overwrite local directory &#39;&#x2F;opt&#x2F;st&#39; select * from st05;</span><br><span class="line">	# 格式化</span><br><span class="line">	insert overwrite local directory &#39;&#x2F;opt&#x2F;st&#39; row format delimited fields terminated by &#39;\t&#39; select * from st05;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set 变量名&#x3D;值</span><br><span class="line">$&#123;hiveconf:变量名&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set hive.exec.mode.local.auto&#x3D;true;</span><br></pre></td></tr></table></figure>



<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e #写一个定时任务</span><br><span class="line">键入i，进入编辑模式</span><br><span class="line">输入内容：</span><br><span class="line"># 每十分钟执行一次</span><br><span class="line">*&#x2F;10 * * * * usr&#x2F;sbin&#x2F;ntpdate master</span><br><span class="line"># 早8到晚5，每半小时执行一次</span><br><span class="line">*&#x2F;30 5-17 * * * usr&#x2F;sbin&#x2F;ntpdate master</span><br><span class="line">查看定时任务</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库原理课后练习之单表查询</title>
    <url>/2020/04/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="开门见山"><a href="#开门见山" class="headerlink" title="开门见山"></a>开门见山</h1><p>注：<font color=pink>数据涉及隐私，自行寻找。表的结构很简单，自行分析下面的语句进行建表，不予提供</font></p>
<p>1.查询学生姓名和年龄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select s.sname,s.sage from s;</span><br></pre></td></tr></table></figure>

<p>2.查询班号，姓名，电话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select s.class, s.sname,s.phone from s;</span><br></pre></td></tr></table></figure>

<p>3.查询学生所有信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s</span><br></pre></td></tr></table></figure>

<p>4.查询学生姓名及出生年份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sname,year(now())-sage as barith from s;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ggjucheng/p/3352280.html" target="_blank" rel="noopener">MySQL：日期函数、时间函数总结</a>，<a href="https://www.cnblogs.com/pandaly/p/10267950.html" target="_blank" rel="noopener">MySQL常用日期时间函数</a>.</p>
<p>5.查询学生姓名（大写），出生年份（别名）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select upper(sname),year(now())-sage as barith from s;</span><br></pre></td></tr></table></figure>

<p>6.描述每个学生信息，格式如下：<br><code>&lt;sname&gt;is from &lt;province&gt;，[He | She]is [young I old]，Phonenumber is &lt;pno&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat(sname,&#39; is from &#39;,province,&#39; , &#39;,if(ssex&#x3D;&#39;f&#39;,&#39;She&#39;,&#39;He&#39;),&#39; is &#39;,if(sage&gt;21,&#39;old&#39;,&#39;young&#39;),&#39; , &#39;,&#39;Phonenumber is &#39;,phone) as info from s;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/pan_junbiao/article/details/86524612" target="_blank" rel="noopener">MySQL字符串的拼接、截取、替换、查找位置</a></p>
<p>7.询班级学生来自哪几个省（去掉重复行）distinct</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct province  from s;</span><br></pre></td></tr></table></figure>

<p>8.查询20岁以下的学生 where</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where sage&lt;20;</span><br></pre></td></tr></table></figure>

<p>9.查询1班20岁以下的男同学 and</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where sage&lt;20 and ssex&#x3D;&#39;m&#39; and class&#x3D;1;</span><br></pre></td></tr></table></figure>

<p>10.查询1班20岁男同学或者2班19岁女同学 or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where (sage&#x3D;20 and ssex&#x3D;&#39;m&#39; and class&#x3D;1) or (sage&#x3D;19 and ssex&#x3D;&#39;f&#39; and class&#x3D;2);</span><br></pre></td></tr></table></figure>

<p>11.查询19岁到21岁之间的问学 between..and.…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where sage between 19 and 21;</span><br></pre></td></tr></table></figure>

<p>12.查询山西省和河北省的学生in.…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where province in(&#39;shanxi&#39;,&#39;hebei&#39;);</span><br></pre></td></tr></table></figure>

<p>13.查询所有姓李的学生 like  <a href="https://www.cnblogs.com/IT-Monkey/p/3286405.html" target="_blank" rel="noopener">MySql like模糊查询使用详解</a>，<a href="https://blog.csdn.net/zuihongyan518/article/details/81131042" target="_blank" rel="noopener">MySQL–更高效的mysql模糊查询的方法</a></p>
<p>由于库里的名字是拼音，所以推荐用正则 <a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">正则表达式 - 语法</a>，<a href="http://www.regexlab.com/zh/regref.htm" target="_blank" rel="noopener">揭开正则表达式的神秘面纱</a>，这两篇网页后面真是精妙。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#[]里是声母的开头 ｛1｝应该是多此一举 无法排除lin ling</span><br><span class="line">select * from s where sname rlike&#39;^li[bpmfdtnlgkhjqxrzcsyw]&#123;1&#125;&#39; ;</span><br><span class="line">#[]里是可以和i构成韵母的字母 无法排除lian liang 不能添加n，因为还有lina等这样的名字 后续分析添上a应该筛选出来的全为li</span><br><span class="line">select * from s where sname rlike&#39;^li[^(ng)uea]&#39; ;</span><br><span class="line">#注意括号 括号这东西不好理解 括号里的前括号为了匹配不是lin型的，后面的括号匹配lin型的，此括号里的[]包含了韵母的开头 </span><br><span class="line">select * from s where sname rlike&#39;^li(([^(ng)uea])|(n[aoeiuv]))&#39; ;</span><br><span class="line">#如果对拼音不熟悉，可以通过打字测试拼音组合。</span><br></pre></td></tr></table></figure>

<p>14.查询所有使用移动号码的学生 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where phone rlike&#39;^1((3[456789])|47|(5[012789])|78|(8[23478])|198)&#39;;</span><br></pre></td></tr></table></figure>

<p>15.查询所有未使用移动号码的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where phone not rlike&#39;^1((3[456789])|47|(5[012789])|78|(8[23478])|198)&#39;;</span><br></pre></td></tr></table></figure>

<p>16.查询没有电话号码的学生 is null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from s where phone is null;</span><br></pre></td></tr></table></figure>

<p>17.查询1班所有学生姓名及年龄，按年龄升序排列 order by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sname,sage from s where class&#x3D;1 order by sage;</span><br></pre></td></tr></table></figure>

<p>18.查询2班所有学生姓名，省份，性别，年龄，结果先按省份排列，同省的再按性别排。同省同性制再按年龄排。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sname,province,ssex,sage from s where class&#x3D;2 order by province,ssex,sage;</span><br></pre></td></tr></table></figure>

<p>19.统计学生人数count</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from s;</span><br></pre></td></tr></table></figure>

<p>20.统计学生来自几个省 count</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(distinct province) from s;</span><br></pre></td></tr></table></figure>

<p>21.统计学生平均年龄 avg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select avg(sage) from s;</span><br></pre></td></tr></table></figure>

<p>22.统计学生人数，平均年龄，最大年龄，最小年龄</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),avg(sage),max(sage),min(sage) from s;</span><br></pre></td></tr></table></figure>

<p>23.统计学生人数（分班统计）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class ,count(*) from s group by class;</span><br></pre></td></tr></table></figure>

<p>24.统计学生来自几个省（分班统计）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class ,count(distinct province) from s group by class;</span><br></pre></td></tr></table></figure>

<p>25.统计学生平均年龄（分班统计）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class ,avg(sage) from s group by class;</span><br></pre></td></tr></table></figure>

<p>26.统计学生人数，平均年龄，最大年龄，最小年龄（分班统计）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class ,count(*),avg(sage),max(sage),min(sage) from s group by class;</span><br></pre></td></tr></table></figure>

<p>27.统计学生每个年龄段的人数，只考虑年龄段人数超过3人的，结果按人数高到低排列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sage ,count(*) as number from s group by sage having number&gt;3 order by 2;</span><br><span class="line">select sage ,count(*) as number from s group by sage having number&gt;3 order by number;</span><br></pre></td></tr></table></figure>

<p>28.统计学生每个年龄段的人数（分班统计）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class,sage,count(*) from s group by class,sage;</span><br></pre></td></tr></table></figure>

<p>29.统计学生每个年龄段的人数（分班分性别统计），只考虑山西省学生，并且分组人数超过3人的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select class,ssex,sage,count(*) from s where province&#x3D;&#39;shanxi&#39; group by 1,2,3 having count(*)&gt;3;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>练习</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构循环队列</title>
    <url>/2019/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50 <span class="comment">//容量 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"><span class="comment">//循环队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base;</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">	f, t</span><br><span class="line">&#125;Bool;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q-&gt;base = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!Q-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> OVERFLOW;</span><br><span class="line">	&#125;</span><br><span class="line">	Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function">Bool <span class="title">isEmpty</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q-&gt;front == Q-&gt;rear ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否满</span></span><br><span class="line"><span class="function">Bool <span class="title">isFull</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队 </span></span><br><span class="line"><span class="function">Status <span class="title">enQueue</span><span class="params">(SqQueue* Q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isFull(Q))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	Q-&gt;base[Q-&gt;rear] = e;</span><br><span class="line">	Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">ElemType <span class="title">deQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(Q))<span class="keyword">return</span> ERROR;</span><br><span class="line">	ElemType e = Q-&gt;base[Q-&gt;front];</span><br><span class="line">	Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取队头</span></span><br><span class="line"><span class="function">ElemType <span class="title">getHead</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!isEmpty(Q))<span class="keyword">return</span> Q-&gt;base[Q-&gt;front];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqQueue* Q = <span class="keyword">new</span> SqQueue;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"初始化-----------%s\n"</span>, initQueue(Q) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmpty(Q) ? <span class="string">"空"</span> : <span class="string">"不空"</span>);</span><br><span class="line">	<span class="keyword">char</span>* str = <span class="string">"https://github.com/pengxiandyou"</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始入队\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _mbstrlen(str) - <span class="number">1</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"入队-----------%s--------长度  %d\n"</span>, enQueue(Q, str[i]) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>, getLength(Q));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmpty(Q) ? <span class="string">"空"</span> : <span class="string">"不空"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"队头为---------%c\n"</span>, getHead(Q));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始出队\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">31</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>, deQueue(Q));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第三次上机代码</title>
    <url>/2019/10/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/src/work/DataStructure/experiment3/" target="_blank" rel="noopener">报告</a></center>
# 病毒检测 

<p>反正就是和比人不一样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//堆串</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> arr[<span class="number">600</span>];</span><br><span class="line">	<span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">&#125;HString;</span><br><span class="line"><span class="comment">//BF算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">index_BF</span><span class="params">(HString HS<span class="comment">/*人的DNA*/</span>, HString T<span class="comment">/*病毒的DNA*/</span>, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = pos;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (!(i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= HS.length))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= HS.length&amp;&amp;j &lt;= T.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (T.arr[j] == HS.arr[i])</span><br><span class="line">		&#123;</span><br><span class="line">			i++; j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = i - j + <span class="number">2</span>; j = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j &gt; T.length ?  i - T.length : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检测函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">Virus_Detection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num<span class="comment">/*任务数*/</span>, flag<span class="comment">/*状态标志*/</span>;</span><br><span class="line">	<span class="keyword">int</span> f = <span class="number">0</span>,t = <span class="number">0</span>;<span class="comment">//个数</span></span><br><span class="line">	HString *HS = <span class="keyword">new</span> HString;</span><br><span class="line">	HString *T = <span class="keyword">new</span> HString;</span><br><span class="line">	ifstream inFile;<span class="comment">//对象</span></span><br><span class="line">	ofstream outFile;</span><br><span class="line">	inFile.<span class="built_in">open</span>(<span class="string">"待检测.txt"</span>);</span><br><span class="line">	outFile.<span class="built_in">open</span>(<span class="string">"已检测.txt"</span>);</span><br><span class="line">	inFile &gt;&gt; num;</span><br><span class="line">	<span class="keyword">int</span> temp_num = num;</span><br><span class="line">	HString* temp= <span class="keyword">new</span> HString;</span><br><span class="line">	<span class="keyword">while</span> (num--)</span><br><span class="line">	&#123;</span><br><span class="line">		inFile &gt;&gt; (*T).arr + <span class="number">1</span>;</span><br><span class="line">		(*T).length = <span class="built_in">strlen</span>(T-&gt;arr + <span class="number">1</span>);</span><br><span class="line">		inFile &gt;&gt; (*HS).arr + <span class="number">1</span>;</span><br><span class="line">		(*HS).length = <span class="built_in">strlen</span>(HS-&gt;arr + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> Len=(*temp).length = (*T).length;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Len; i++)<span class="comment">//病毒环状要比多次</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, j=i; k&lt;= Len; k++,j++)<span class="comment">//从环状病毒取病毒</span></span><br><span class="line">			&#123;</span><br><span class="line">				(*temp).arr[k] = (*T).arr[(j<span class="number">-1</span>)% Len +<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			(*temp).arr[Len + <span class="number">1</span>] = <span class="string">'\0'</span>;<span class="comment">//不加的话，文件里会出现未初始化而显示的屯</span></span><br><span class="line">			flag = index_BF(*HS, *temp, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (flag)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag)</span><br><span class="line">		&#123;</span><br><span class="line">			t++;</span><br><span class="line">			outFile &lt;&lt; (*T).arr + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (*HS).arr + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"是"</span> &lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="string">"携带病毒："</span>&lt;&lt; (*temp).arr+<span class="number">1</span>&lt;&lt;<span class="string">" 位置："</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			f++;</span><br><span class="line">			outFile &lt;&lt; (*T).arr + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (*HS).arr + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"否"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	outFile &lt;&lt; <span class="string">"共"</span>&lt;&lt; temp_num &lt;&lt;<span class="string">"人，其中感染"</span> &lt;&lt; t &lt;&lt; <span class="string">"人，未感染"</span> &lt;&lt;f &lt;&lt;<span class="string">"人"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	inFile.<span class="built_in">close</span>();</span><br><span class="line">	outFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Virus_Detection();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"已进行检测\n请输入要调用的功能编号 可使用ctrl+c结束或其它"</span></span><br><span class="line">		<span class="string">"\n1 记事本打开已检测.txt\n"</span></span><br><span class="line">		<span class="string">"2 记事本打开待检测.txt\n"</span></span><br><span class="line">		<span class="string">"3 cmd输出已检测.txt\n"</span></span><br><span class="line">		<span class="string">"4 cmd输出待检测.txt\n"</span></span><br><span class="line">		<span class="string">"5 打开当前文件夹\n"</span>);</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="literal">NULL</span>;</span><br><span class="line">	srand(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'1'</span>:system(<span class="string">"已检测.txt"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'2'</span>:system(<span class="string">"待检测.txt"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'3'</span>:system(<span class="string">"type 已检测.txt"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'4'</span>:system(<span class="string">"type 待检测.txt"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'5'</span>:rand()%<span class="number">2</span>==<span class="number">0</span>? system(<span class="string">"explorer ."</span>): system(<span class="string">"start ."</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:system(<span class="string">"pause"</span>);<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>功能不够</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DataType elem;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">lchild</span>;</span></span><br><span class="line">&#125;TreeNode, *PTREE;</span><br><span class="line"><span class="comment">//先序创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatTree</span><span class="params">(PTREE *Root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> val = <span class="number">0</span>;<span class="comment">//用于下面存放数据</span></span><br><span class="line">	val = getchar();<span class="comment">//输入数据值</span></span><br><span class="line">	<span class="comment">//如果输入'*'，则指向为空</span></span><br><span class="line">	<span class="keyword">if</span> (val == <span class="string">'*'</span>|| val == <span class="string">'#'</span> || val == <span class="string">'.'</span>)</span><br><span class="line">		(*Root) = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//如果输入非'*'，则给数据域赋值</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		(*Root) = (PTREE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));<span class="comment">//申请内存空间</span></span><br><span class="line">		<span class="keyword">if</span> ((*Root) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"创建结点失败，无法分配可用内存..."</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			(*Root)-&gt;elem = val;<span class="comment">//给结点数据域赋值</span></span><br><span class="line">			CreatTree(&amp;(*Root)-&gt;lchild);</span><br><span class="line">			CreatTree(&amp;(*Root)-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTree</span><span class="params">(PTREE Root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(Root-&gt;elem);</span><br><span class="line">		PreOrderTree(Root-&gt;lchild);</span><br><span class="line">		PreOrderTree(Root-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结点个数01*49**8**25**6** ABD***CE**FG*** 01*49**8**25**6*37***</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodeNum</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == Tree)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> GetNodeNum(Tree-&gt;lchild) + GetNodeNum(Tree-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLeafNum</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> GetLeafNum(Tree-&gt;lchild) + GetLeafNum(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//度为1结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodde1Num</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild != <span class="literal">NULL</span> || Tree-&gt;rchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> + GetNodde1Num(Tree-&gt;lchild) + GetNodde1Num(Tree-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> GetNodde1Num(Tree-&gt;lchild) + GetNodde1Num(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//度为2结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodde2Num</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild != <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>+ GetNodde2Num(Tree-&gt;lchild) + GetNodde2Num(Tree-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> GetNodde2Num(Tree-&gt;lchild) + GetNodde2Num(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PTREE root;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入前序 *或#或.为空\t"</span>);</span><br><span class="line">	CreatTree(&amp;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"前序遍历 ：\t"</span>);</span><br><span class="line">	PreOrderTree(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"递归求所有结点 %d\n"</span>, GetNodeNum(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"等式求所有结点 %d\n"</span>, GetLeafNum(root)+ GetNodde2Num(root) + GetNodde1Num(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"递归求所有叶子结点 %d\n"</span>, GetLeafNum(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"性质求所有叶子结点 %d\n"</span>, GetNodde2Num(root)+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"递归求所有度为1的结点 %d\n"</span>, GetNodde1Num(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"等式求所有度为1的结点 %d\n"</span>, GetNodeNum(root)- GetLeafNum(root)- GetNodde2Num(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"递归求所有度为2的结点 %d\n"</span>, GetNodde2Num(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"性质求所有度为2的结点 %d\n"</span>, GetLeafNum(root)<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"总结： 根据书中的性质3和一个等式，只要有两个数据（度2和度0算一个），其他数据都可以算出\n"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构线性表链式实现作业</title>
    <url>/2019/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%93%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	(*L)-&gt;data = <span class="number">0</span>;</span><br><span class="line">	(*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">isEmpty</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (*L)-&gt;next == <span class="literal">NULL</span> ? <span class="string">"空"</span> : <span class="string">"不空"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = *L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		++i;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认头插法建表</span></span><br><span class="line"><span class="function">Status <span class="title">creatListHead</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p ;</span><br><span class="line">	<span class="keyword">char</span> str[] = <span class="string">"myGithub:https://github.com/pengxiandyou"</span>;</span><br><span class="line">	(*L)-&gt;data=(<span class="keyword">int</span>)_mbstrlen(str);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;(<span class="keyword">int</span>)_mbstrlen(str); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		p-&gt;data = str[i];</span><br><span class="line">		p-&gt;next = (*L)-&gt;next;</span><br><span class="line">		(*L)-&gt;next = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认尾插法建表 </span></span><br><span class="line"><span class="function">Status <span class="title">creatListEnd</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p,r=*L;</span><br><span class="line">	<span class="keyword">char</span> str[] = <span class="string">"myGithub:https://github.com/pengxiandyou"</span>;</span><br><span class="line">	(*L)-&gt;data = (<span class="keyword">int</span>)_mbstrlen(str);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)_mbstrlen(str); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		p-&gt;data = str[i];</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//必须要否则遍历异常</span></span><br><span class="line">		r -&gt;next= p;</span><br><span class="line">		r = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">traversalList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">insertList</span><span class="params">(LinkList* L, <span class="keyword">int</span> i ,<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || (i &gt; (*L)-&gt;data || i &lt; <span class="number">1</span>))<span class="keyword">return</span> ERROR;</span><br><span class="line">	LinkList p=*L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//定在前一个</span></span><br><span class="line">        j++;</span><br><span class="line">	&#125;</span><br><span class="line">	LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	q-&gt;data = c;</span><br><span class="line">	q-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = q;</span><br><span class="line">	(*L)-&gt;data++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByIndex</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//if (L == NULL || (i &gt; (L)-&gt;data || i &lt; 1))return NULL;</span></span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	p = p-&gt;next;</span></span><br><span class="line">	<span class="keyword">return</span> (p);<span class="comment">//前一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByElem</span><span class="params">(LinkList L, <span class="keyword">char</span> c ,<span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;p-&gt;next-&gt;data!=c)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	*i = j + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> p; <span class="comment">//前一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除 通过索引</span></span><br><span class="line"><span class="function">Status <span class="title">deleteListElem</span><span class="params">(LinkList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = getListByIndex(*L, i);</span><br><span class="line">	LinkList q = p-&gt;next;</span><br><span class="line">	p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	(*L)-&gt;data--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除 通过值 </span></span><br><span class="line"><span class="function">Status <span class="title">deleteListElem</span><span class="params">(LinkList* L, <span class="keyword">char</span> c,<span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = getListByElem(*L, c,i);</span><br><span class="line">	LinkList q = p-&gt;next;</span><br><span class="line">	p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	(*L)-&gt;data--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逆置链表</span></span><br><span class="line"><span class="function">Status <span class="title">Reverse</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = (*L)-&gt;next;</span><br><span class="line">	LinkList q = *L;</span><br><span class="line">	LinkList s;</span><br><span class="line">	<span class="keyword">while</span> (q-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		q = q-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (p!=q)</span><br><span class="line">	&#123;</span><br><span class="line">		s = q-&gt;next;</span><br><span class="line">		q-&gt;next = p;</span><br><span class="line">		(*L)-&gt;next = p-&gt;next;</span><br><span class="line">		p-&gt;next = s;</span><br><span class="line">		p = (*L)-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改值 根据索引</span></span><br><span class="line"><span class="function">Status <span class="title">changeElemByIndex</span><span class="params">(LinkList* L,<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	getListByIndex(*L, i)-&gt;next-&gt;data = c;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间结点 运用快慢指针</span></span><br><span class="line"><span class="comment">//快慢指针可以判断是否为环,两链表是否相交等</span></span><br><span class="line"><span class="function">LNode* <span class="title">findListMiddle</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList fast, slow;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	fast = slow = L;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; fast != <span class="literal">NULL</span>&amp;&amp;fast-&gt;next != <span class="literal">NULL</span>; fast = fast-&gt;next-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		slow = slow-&gt;next;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除表</span></span><br><span class="line"><span class="function">Status <span class="title">deleteALL</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = *L, q;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		q = p-&gt;next;</span><br><span class="line">		p-&gt;next = q-&gt;next;</span><br><span class="line">		(*L)-&gt;data--;</span><br><span class="line">		<span class="built_in">free</span>(q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList L;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始初始化\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"初始化-------%s\n"</span>, initList(&amp;L)==OK?<span class="string">"成功"</span>:<span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//判空</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表为-----%s\n"</span>, isEmpty(&amp;L));</span><br><span class="line">	<span class="comment">//获取长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-%d\n"</span>,getLength(&amp;L));</span><br><span class="line">	<span class="comment">//建表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始建表,使用默认头插法方式,尾插法未使用\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"建表---------%s\n"</span>, creatListHead(&amp;L)==OK?<span class="string">"成功"</span>:<span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-%d\n"</span>, getLength(&amp;L));</span><br><span class="line">	<span class="comment">//遍历表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始遍历\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历---------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//逆转链表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始逆转\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"逆转-------------------%s\n"</span>, Reverse(&amp;L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历-------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"逆转-------------------%s\n"</span>, Reverse(&amp;L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历-------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//中间结点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"寻找中间结点\n"</span>);</span><br><span class="line">	LNode* s = findListMiddle(L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"地址为 %d\t值为 %c\n"</span>,s -&gt;next, s-&gt;data);</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始查找\n"</span>);</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	LNode* t= getListByElem(L, <span class="string">'h'</span>, &amp;i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"按值(h)查找,值为 %c\t索引为 %d\n"</span>, t-&gt;next-&gt;data, i);</span><br><span class="line">	t = getListByIndex(L, <span class="number">20</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"按为(20)查找,值为 %c\n"</span>, t-&gt;next-&gt;data);</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始插入\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"在索引1处插入!---------%s\n"</span>, insertList(&amp;L,<span class="number">1</span>,<span class="string">'!'</span>) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-%d\n"</span>, getLength(&amp;L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历---------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//改值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始改值\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"更改索引1处的值为%%-----%s\n"</span>, changeElemByIndex(&amp;L, <span class="string">'%'</span>, <span class="number">1</span>) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历--------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始删除\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"通过索引1\n"</span>);</span><br><span class="line">	deleteListElem(&amp;L, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-----------%d\n"</span>, getLength(&amp;L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历-------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"通过值#\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"在索引1处插入#---------%s\n"</span>, insertList(&amp;L, <span class="number">1</span>, <span class="string">'#'</span>) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-----------%d\n"</span>, getLength(&amp;L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历-------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	deleteListElem(&amp;L,<span class="string">'#'</span>, &amp;j);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"单链表长度为-----------%d\n"</span>, getLength(&amp;L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历-------------------%s\n"</span>, traversalList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="comment">//删除表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始删除表\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"删除-------------------%s\n"</span>, deleteALL(&amp;L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第四次上机代码</title>
    <url>/2019/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/src/work/DataStructure/experiment4/" target="_blank" rel="noopener">报告</a></center>

<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>丰富了许多</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DataType elem;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">lchild</span>;</span></span><br><span class="line">&#125;TreeNode, *PTREE;</span><br><span class="line"><span class="comment">//先序创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatTree</span><span class="params">(PTREE *Root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> val = <span class="number">0</span>;<span class="comment">//用于下面存放数据</span></span><br><span class="line">	val = getchar();<span class="comment">//输入数据值</span></span><br><span class="line">					<span class="comment">//如果输入'*'，则指向为空</span></span><br><span class="line">	<span class="keyword">if</span> (val == <span class="string">'*'</span> || val == <span class="string">'#'</span> || val == <span class="string">'.'</span>)</span><br><span class="line">		(*Root) = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//如果输入非'*'，则给数据域赋值</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		(*Root) = (PTREE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));<span class="comment">//申请内存空间</span></span><br><span class="line">		<span class="keyword">if</span> ((*Root) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"创建结点失败，无法分配可用内存..."</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			(*Root)-&gt;elem = val;<span class="comment">//给结点数据域赋值</span></span><br><span class="line">			CreatTree(&amp;(*Root)-&gt;lchild);</span><br><span class="line">			CreatTree(&amp;(*Root)-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span> <span class="params">(PTREE Root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(Root-&gt;elem);</span><br><span class="line">		PreOrderTraverse(Root-&gt;lchild);</span><br><span class="line">		PreOrderTraverse(Root-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(PTREE Root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		InOrderTraverse(Root-&gt;lchild);</span><br><span class="line">		<span class="built_in">putchar</span>(Root-&gt;elem);</span><br><span class="line">		InOrderTraverse(Root-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(PTREE Root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		PostOrderTraverse(Root-&gt;lchild);</span><br><span class="line">		PostOrderTraverse(Root-&gt;rchild);</span><br><span class="line">		<span class="built_in">putchar</span>(Root-&gt;elem);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(PTREE Root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (Depth(Root-&gt;lchild)&gt;Depth(Root-&gt;rchild) ? Depth(Root-&gt;lchild) : Depth(Root-&gt;rchild )) + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//结点个数01*49**8**25**6** ABD***CE**FG*** 01*49**8**25**6*37***</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodeNum</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == Tree)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> GetNodeNum(Tree-&gt;lchild) + GetNodeNum(Tree-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLeafNum</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> GetLeafNum(Tree-&gt;lchild) + GetLeafNum(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//度为1结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodde1Num</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild != <span class="literal">NULL</span> || Tree-&gt;rchild == <span class="literal">NULL</span>&amp;&amp;Tree-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> + GetNodde1Num(Tree-&gt;lchild) + GetNodde1Num(Tree-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> GetNodde1Num(Tree-&gt;lchild) + GetNodde1Num(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//度为2结点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodde2Num</span><span class="params">(PTREE Tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;lchild != <span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span> + GetNodde2Num(Tree-&gt;lchild) + GetNodde2Num(Tree-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> GetNodde2Num(Tree-&gt;lchild) + GetNodde2Num(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">char</span>* c,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;c&lt;&lt; <span class="string">"求得结果为\t"</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PTREE root=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"菜单：\n"</span></span><br><span class="line">		<span class="string">"0 先序建表\n"</span></span><br><span class="line">		<span class="string">"1 前序遍历\n"</span></span><br><span class="line">		<span class="string">"2 中序遍历\n"</span></span><br><span class="line">		<span class="string">"3 后序遍历\n"</span></span><br><span class="line">		<span class="string">"4 树的深度\n"</span></span><br><span class="line">		<span class="string">"5 递归所有结点\n"</span></span><br><span class="line">		<span class="string">"6 等式求所有结点\n"</span></span><br><span class="line">		<span class="string">"7 递归求所有叶子结点\n"</span></span><br><span class="line">		<span class="string">"8 性质求所有叶子结点\n"</span></span><br><span class="line">		<span class="string">"9 递归求所有度为1的结点\n"</span></span><br><span class="line">		<span class="string">"a 等式求所有度为1的结点\n"</span></span><br><span class="line">		<span class="string">"b 递归求所有度为2的结点\n"</span></span><br><span class="line">		<span class="string">"c 性质求所有度为2的结点\n"</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'0'</span>:getchar();<span class="comment">/*过滤回车符*/</span> CreatTree(&amp;root); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'1'</span>:<span class="built_in">printf</span>(<span class="string">"1 前序遍历结果： "</span>); PreOrderTraverse(root); <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="keyword">break</span>;<span class="comment">//前序遍历</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">'2'</span>:<span class="built_in">printf</span>(<span class="string">"2 中序遍历结果： "</span>); InOrderTraverse(root);  <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'3'</span>:<span class="built_in">printf</span>(<span class="string">"3 后序遍历结果： "</span>); PostOrderTraverse(root); <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'4'</span>:myprintf(<span class="string">"4 树的深度 "</span>,Depth(root)); <span class="keyword">break</span>;<span class="comment">//深度</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">'5'</span>:myprintf(<span class="string">"5 递归所有结点 "</span>,GetNodeNum(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'6'</span>:myprintf(<span class="string">"6 等式求所有结点 "</span>,GetLeafNum(root) + GetNodde2Num(root) + GetNodde1Num(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'7'</span>:myprintf(<span class="string">"7 递归求所有叶子结点 "</span>,GetLeafNum(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'8'</span>:myprintf(<span class="string">"8 性质求所有叶子结点 "</span>,GetNodde2Num(root) + <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'9'</span>:myprintf(<span class="string">"9 递归求所有度为1的结点 "</span>,GetNodde1Num(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'a'</span>:myprintf(<span class="string">"a 等式求所有度为1的结点 "</span>,GetNodeNum(root) - GetLeafNum(root) - GetNodde2Num(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'b'</span>:myprintf(<span class="string">"b 递归求所有度为2的结点 "</span>,GetNodde2Num(root)); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'c'</span>:myprintf(<span class="string">"c 性质求所有度为2的结点 "</span>,GetLeafNum(root) - <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'\n'</span>:<span class="keyword">case</span> <span class="string">'\t'</span>:<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:system(<span class="string">"pause"</span>);<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>储存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VerTexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ArcType;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VALUE INT_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	VerTexType vexs[MAX_NUM];<span class="comment">//节点</span></span><br><span class="line">	ArcType arcs[MAX_NUM][MAX_NUM];<span class="comment">//邻接矩阵</span></span><br><span class="line">	<span class="keyword">int</span> vexnum, arcnum;<span class="comment">//节点数,边数</span></span><br><span class="line">&#125; Graph;</span><br><span class="line"><span class="comment">//寻找索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(Graph g, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;g.vexnum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (c == g.vexs[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建无向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_create</span><span class="params">(Graph * g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"输入节点数和边数"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; g-&gt;vexnum &gt;&gt; g-&gt;arcnum;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"输入顶点"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexnum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; g-&gt;vexs[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(g-&gt;arcs, <span class="number">0</span>, <span class="keyword">sizeof</span>(g-&gt;arcs));<span class="comment">//初始化矩阵</span></span><br><span class="line">	<span class="keyword">char</span> v1=<span class="literal">NULL</span>, v2 = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"输入边"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g-&gt;arcnum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">		k = LocateVex(*g, v1);</span><br><span class="line">		l = LocateVex(*g, v2);</span><br><span class="line">		g-&gt;arcs[k][l] = <span class="number">1</span>;</span><br><span class="line">		g-&gt;arcs[l][k] = g-&gt;arcs[k][l];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(Graph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"邻接矩阵为"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.vexnum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g.vexnum; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.arcs[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Graph g;</span><br><span class="line">	g_create(&amp;g);</span><br><span class="line">	myprintf(g);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构顺序栈</title>
    <url>/2019/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F%E6%A0%88/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50 <span class="comment">//容量 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"><span class="comment">//顺序结构储存</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base;</span><br><span class="line">	ElemType* top;</span><br><span class="line">	<span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> </span><br><span class="line">&#123;</span><br><span class="line">	f,t</span><br><span class="line">&#125;Bool;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;base = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">	S-&gt;stacksize = MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function">Bool <span class="title">isEmpty</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;base == S-&gt;top ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top - S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">Status <span class="title">pushElem</span><span class="params">(SqStack* S,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getLength(S) == S-&gt;stacksize)<span class="keyword">return</span> ERROR;</span><br><span class="line">	*(S-&gt;top) = e;</span><br><span class="line">	S-&gt;top++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">ElemType <span class="title">popElem</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S))<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	S-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> *(S-&gt;top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取栈顶</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!isEmpty(S))<span class="keyword">return</span> *(S-&gt;top - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack* S = <span class="keyword">new</span> SqStack;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"初始化-----------%s\n"</span>, initStack(S) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmpty(S) ? <span class="string">"空"</span> : <span class="string">"不空"</span>);</span><br><span class="line">	<span class="keyword">char</span>* str = <span class="string">"https://github.com/pengxiandyou"</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始入栈\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = _mbstrlen(str)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"入栈-----------%s--------长度  %d\n"</span>, pushElem(S, str[i])==OK?<span class="string">"成功"</span>:<span class="string">"失败"</span>,getLength(S));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>,isEmpty(S) ? <span class="string">"空"</span> : <span class="string">"不空"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"栈顶为---------%c\n"</span>, getTop(S));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始出栈\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">31</span>- <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,popElem(S) );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构线性表顺序实现作业</title>
    <url>/2019/09/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E5%AE%9E%E7%8E%B0%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表储存空间初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMRNT 10 <span class="comment">//线性表储存空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"></span><br><span class="line">					  <span class="comment">//线性表动态分配顺序储存结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;<span class="comment">//储存空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1初始化一个空的表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	L-&gt;elem = (ElemType*)__vcrt_malloc_normal(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!(L-&gt;elem))</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配失败</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">	L-&gt;listsize = LIST_INIT_SIZE;<span class="comment">//容量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">	ElemType* q = &amp;(L-&gt;elem[i - <span class="number">1</span>]), *p = <span class="literal">NULL</span>;<span class="comment">// q为插入位置</span></span><br><span class="line">	<span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">		* (p + <span class="number">1</span>) = *p;<span class="comment">// 插入位置及之后的元素后移</span></span><br><span class="line">	*q = e;<span class="comment">// 插入e</span></span><br><span class="line">	++(L-&gt;length);<span class="comment">// 表长增加1</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == L-&gt;listsize) &#123;</span><br><span class="line">		ElemType*  newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		L-&gt;elem = newbase;<span class="comment">// 新基址</span></span><br><span class="line">		L-&gt;listsize += LISTINCREMRNT;<span class="comment">// 增加存储容量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">isEmtey</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length == <span class="number">0</span> ? <span class="string">"空"</span> : <span class="string">"不空"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5清空</span></span><br><span class="line"><span class="function">Status <span class="title">clearList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__vcrt_free_normal(L-&gt;elem);</span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6摧毁</span></span><br><span class="line"><span class="function">Status <span class="title">destryList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	__vcrt_free_normal(L);</span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7通过索引取值</span></span><br><span class="line"><span class="function">ElemType <span class="title">getElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;elem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8通过值取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndexByElem</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; L-&gt;length; ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((L-&gt;elem[j]) == e)</span><br><span class="line">			<span class="keyword">return</span> j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//9通过索引改值</span></span><br><span class="line"><span class="function">ElemType <span class="title">changeElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  L-&gt;elem[i - <span class="number">1</span>] = e;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10删除元素</span></span><br><span class="line"><span class="function">Status <span class="title">deleteElmeByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &lt; L-&gt;length - <span class="number">1</span>; ++j)</span><br><span class="line">		L-&gt;elem[j] = L-&gt;elem[j + <span class="number">1</span>];</span><br><span class="line">	--(L-&gt;length);</span><br><span class="line">	ElemType*  newbase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (((L-&gt;listsize) - (L-&gt;length)) &gt;= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize - LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase) &#123;</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;elem = newbase;</span><br><span class="line">			L-&gt;listsize -= LISTINCREMRNT;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//11遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">myPrintf</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"第%d个值------------%d\n"</span>,i+<span class="number">1</span>, (L-&gt;elem[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	SqList* L = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	<span class="comment">//创建表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"线性表创建状态----%d\n"</span>, InitList(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"当前容量----------%d\n"</span>, L-&gt;listsize);</span><br><span class="line">	<span class="comment">//获取长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"长度--------------%d\n"</span>, getLength(L));</span><br><span class="line">	<span class="comment">//判空</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmtey(L));</span><br><span class="line">	<span class="comment">//为表赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"插入状态%d---------%d\n"</span>,i, ListInsert(L, i + <span class="number">1</span>, i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"当前容量----------%d\n"</span>, L-&gt;listsize);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"长度--------------%d\n"</span>, getLength(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmtey(L));</span><br><span class="line">	<span class="comment">//遍历表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始遍历表\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历状态----------%s\n"</span>, myPrintf(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmtey(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"长度--------------%d\n"</span>, getLength(L));</span><br><span class="line">	<span class="comment">//通过索引取值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"通过索引5取值得---%d\n"</span>, getElemByIndex(L,<span class="number">5</span>));</span><br><span class="line">	<span class="comment">//通过值取索引</span></span><br><span class="line">	ElemType e = <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"通过值4取索引得----%d\n"</span>, getIndexByElem(L,e));	</span><br><span class="line">	<span class="comment">//通过索引改值</span></span><br><span class="line">	e = <span class="number">66</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"通过索引6改值后为--%d\n"</span>, changeElemByIndex(L, <span class="number">6</span>,e));</span><br><span class="line">	<span class="comment">//删除元素</span></span><br><span class="line">	<span class="keyword">int</span> temp = L-&gt;length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=temp;++i)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"删除元素-----------%s\n"</span>, deleteElmeByIndex(L, <span class="number">5</span>) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"遍历状态----------%s\n"</span>, myPrintf(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmtey(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"长度--------------%d\n"</span>, getLength(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"当前容量----------%d\n"</span>, L-&gt;listsize);</span><br><span class="line">	<span class="comment">//清空表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"开始清空表\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"清空状态----------%s\n"</span>, clearList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否为空----------%s\n"</span>, isEmtey(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"长度--------------%d\n"</span>, getLength(L));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"当前容量----------%d\n"</span>, L-&gt;listsize);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//摧毁表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"摧毁表的状态------%s\n"</span>, destryList(L) == OK ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>); </span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的东西</title>
    <url>/2020/08/12/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><table border="1">
<tr>
<th>标题</th>
<th>链接</th>
 <th>作者</th>   
</tr>
<tr>
    <td><a href="https://www.bilibili.com/video/BV1za4y1E7oS" target="_blank" rel="noopener">盘点一些你不太熟悉但是十分有趣的HTML标签</a></a></td>
    <td><a href="https://www.bilibili.com/video/BV1za4y1E7oS" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1za4y1E7oS</a></a></td>
<td><a href="https://space.bilibili.com/10433048" target="_blank" rel="noopener">lookroot</a></td>
</tr>
<tr>
<td>我和你</td>
<td>你和我</td>
<td>在一起</td>
</tr>
<tr>
<td>我爱你</td>
<td>你爱我</td>
<td>生一群</td>
</tr>
</table>



<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="有趣的html"><a href="#有趣的html" class="headerlink" title="有趣的html"></a>有趣的html</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>&lt;input type=&quot;color&quot; name=&quot;&quot;&gt;</code><input type="color" name=""></p>
<p><code>&lt;input type=&quot;range&quot; name=&quot;&quot;&gt;</code><input type="range" name=""></p>
<p><code>&lt;input type=&quot;time&quot; name=&quot;&quot;&gt;</code><input type="time" name=""></p>
<p><code>&lt;input type=&quot;date&quot; name=&quot;&quot;&gt;</code><input type="date" name=""></p>
<p><code>&lt;input type=&quot;datetime-local&quot; name=&quot;&quot;&gt;</code><input type="datetime-local" name=""></p>
<p><code>&lt;input type=&quot;week&quot; name=&quot;&quot;&gt;</code><input type="week" name=""></p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"list"</span> <span class="attr">list</span>=<span class="string">"emaillist"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"emaillist"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"@qq.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"@gamil.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<input type="list" list="emaillist" name="">

<datalist id="emaillist">
    <option value="@qq.com"></option>
    <option value="@gamil.com"></option>
</datalist>

<h3 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">max</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">"30"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><progress value="" max=""></progress><progress value="30" max="100"></progress></p>
<h3 id="meter"><a href="#meter" class="headerlink" title="meter"></a>meter</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">low</span>=<span class="string">"30"</span> <span class="attr">optimum</span>=<span class="string">"50"</span> <span class="attr">high</span>=<span class="string">"70"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">low</span>=<span class="string">"30"</span> <span class="attr">optimum</span>=<span class="string">"50"</span> <span class="attr">high</span>=<span class="string">"70"</span> <span class="attr">value</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">low</span>=<span class="string">"30"</span> <span class="attr">optimum</span>=<span class="string">"50"</span> <span class="attr">high</span>=<span class="string">"70"</span> <span class="attr">value</span>=<span class="string">"80"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><meter max="100" min="0" low="30" optimum="50" high="70" value="20"></meter><meter max="100" min="0" low="30" optimum="50" high="70" value="50"></meter><meter max="100" min="0" low="30" optimum="50" high="70" value="80"></meter></p>
<h3 id="小东西合在一起"><a href="#小东西合在一起" class="headerlink" title="小东西合在一起"></a>小东西合在一起</h3><ul>
<li><code>&lt;del&gt;删除线&lt;/del&gt;</code><del>删除线</del>typora-markdown:<code>~~删除线~~</code><del>删除线</del></li>
<li><code>&lt;ins&gt;下划线&lt;/ins&gt;</code><ins>下划线</ins><code>&lt;u&gt;下划线&lt;/u&gt;</code><u>下划线</u>(不推荐)</li>
<li><code>&lt;abbr title=&quot;你放上来了&quot;&gt;放上来&lt;/abbr&gt;</code><abbr title="你放上来了">放上来</abbr></li>
<li><code>&lt;mark&gt;我学到了&lt;/mark&gt;</code><mark>我学到了</mark></li>
<li><code>&lt;details&gt;&lt;summary&gt;点击查看更多&lt;/summary&gt;&lt;p&gt;没更多&lt;/p&gt;&lt;/details&gt;</code><details><summary>点击查看更多</summary><p>没更多</p></details></li>
</ul>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://dwz.cn/NMaOCMyf"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>我是头像<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure>
        <img src="https://dwz.cn/NMaOCMyf" width="200" height="200">
        <figcaption>我是头像</figcaption>
</figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span><span class="comment">&lt;!--可以实现响应式图片，应该需要服务器支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"https://dwz.cn/NMaOCMyf"</span> <span class="attr">media</span>=<span class="string">"(max-width:300px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"https://dwz.cn/NMaOCMyf"</span> <span class="attr">media</span>=<span class="string">"(max-width:600px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://dwz.cn/NMaOCMyf"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<picture>
    <source srcset="https://dwz.cn/NMaOCMyf" media="(max-width:300px)">
    <source srcset="https://dwz.cn/NMaOCMyf" media="(max-width:600px)">
    <img src="https://dwz.cn/NMaOCMyf" alt="">
</picture>

<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form action="">
    <fieldset>
        无聊<input type="text" name=""><br>
        有趣<input type="password" name=""><br>
    </fieldset>
</form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form action="">
    text-r<input type="text" name="" required><br>
    email-r<input type="email" name="" required><br>
    <input type="submit" name="" value="提交"><br>
</form>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"MAILTO:1508115864@qq.com"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"text/plain"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不建议 --》</span></span><br></pre></td></tr></table></figure>

<form action="MAILTO:1508115864@qq.com" method="POST" enctype="text/plain">
    <input type="text" name=""><br>
    <input type="submit" name="" value="提交"><br>
</form>

<h3 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">id</span>=<span class="string">"dialog"</span> <span class="attr">open</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可以关的弹窗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"javascript:document.getElementById('dialog').close()"</span>&gt;</span>关<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<dialog id="dialog-my" open>
    <p><strong>提示</strong></p>
    <p>可以关的弹窗</p>
    <button onclick="javascript:document.getElementById('dialog-my').close()">关</button>
</dialog><button onclick="javascript:document.getElementById('dialog-my').show()">开</button><button onclick="javascript:document.getElementById('dialog-my').close()">关</button>





<h1 id="hexo-next"><a href="#hexo-next" class="headerlink" title="hexo-next"></a>hexo-next</h1><h2 id="全文阅读"><a href="#全文阅读" class="headerlink" title="全文阅读"></a>全文阅读</h2><p>&emsp;<code>read_more_btn: true</code>阅读全文的按钮显示。</p>
<p>&emsp;<code>excerpt_description: true</code>如果<code>true</code>，则预览写在<code>description:</code>即可。如果<code>false</code>，则需要用<code>&lt;!-- more --&gt;</code>来分割。前者不好写复杂的东西，不能回车等，需要用html。后者则需要每次都写。</p>
]]></content>
      <categories>
        <category>合集</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>markdown</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次健健康天天报自动化失败</title>
    <url>/2020/04/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%81%A5%E5%81%A5%E5%BA%B7%E5%A4%A9%E5%A4%A9%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h1 id="为什么要搞"><a href="#为什么要搞" class="headerlink" title="为什么要搞"></a>为什么要搞</h1><p>本来，在手机上好好的，也很流畅，用<code>Xposed edge</code>搞了个定时任务，每天执行。后来，网页越更新越不流畅，在选地址的页面可以卡很久。一点用手机填的欲望都没有。</p>
<p>免费领了<a href="[https://pengxiandyou.github.io/2020/04/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91ECS%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B/](https://pengxiandyou.github.io/2020/04/03/记一次阿里云ECS的使用过程/)">阿里云的服务器</a>，想挂在上面。这样就可省时省力了。</p>
<h1 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h1><p>首先用<code>Fiddler</code>抓包，分析大致流程。抓了好几次，才稍微清晰点，因为知识不足。</p>
<p>最终因为cookie时效性不长，再加上<code>login?code=</code>每一次生成都不一样，而告终。</p>
<h1 id="后续可能思路"><a href="#后续可能思路" class="headerlink" title="后续可能思路"></a>后续可能思路</h1><ol>
<li>写个服务器，通过服务器来进行转发等等。</li>
<li>看能否通过python或其他语言编写一个简易的抓包工具，获取到信息后进行后续操作。</li>
</ol>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>通过截断，发现企业微信登录，点击天天报，发现<code>login?code=</code>是程序生成的（应该），所以可能会通过点击天天报，然后后续通过其他方式（dll？等）完成后续。</p>
<h1 id="在后续"><a href="#在后续" class="headerlink" title="在后续"></a>在后续</h1><ol>
<li><p>反编译apk，发现一个很有意思代码，感觉很妙啊。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> e = [], t = <span class="number">0</span>; t &lt; <span class="keyword">this</span>.w.length; t++) <span class="keyword">this</span>.w[t] &amp;&amp; (e[<span class="built_in">Math</span>.floor(t / <span class="number">6</span>)] ^= <span class="number">1</span> &lt;&lt; t % <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; e.length; t++) e[t] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</span>.charAt(e[t] || <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> e.join(<span class="string">""</span>) + <span class="string">"~"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对“音量增强器”、<a href="https://github.com/nining377/UnblockMusicPro_Xposed" target="_blank" rel="noopener">“ unblock music pro”</a>思考，如果写个Xposed模块进行hook，应该可行。（对吧？）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>记录</category>
        <category>懒惰记录</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑出坑记一</title>
    <url>/2019/10/11/%E8%B8%A9%E5%9D%91%E5%87%BA%E5%9D%91%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<ol>
<li><p>使用hexo在Github搭建博客后，没有404页面很痛苦。根据教程在404文件夹里写index.html结果没用。今天，我又看了一些教材。直接在根目录（<del>在public里建</del>，在 资源文件夹建或在主题资源文件夹建，不要直接在Github里建，否则推送后会消失）建一个404.html或404.md，大家可以在 <a href="https://www.github.com/pengxiandyou" target="_blank" rel="noopener">我的仓库</a> 里直接复制腾讯公益404页面，只须改一点。</p>
</li>
<li><p>QQ浏览器对于localhost:4000打不开（127.0.0.1:4000也打不开），报 SLL 的错误 而其他浏览器可以正常访问。</p>
<p>找到interner工具-高级-还原高级设置 我观察了一些 使用Sll3.0的钩去掉了 记得重启。</p>
</li>
<li><p>不蒜子与live2d冲突，解决：看<code>F12</code>,自行搜索文件内容找到文件，把<code>style=&quot;display: none;&quot;</code>删了。此时对于页脚的显示应该解决了。对于每一篇文章，可以把外层<code>&lt;span&gt;</code>去掉，或者修改js代码。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2020/08/10/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="从遇见狂神说视频里截的图"><a href="#从遇见狂神说视频里截的图" class="headerlink" title="从遇见狂神说视频里截的图"></a>从<a href="https://space.bilibili.com/95256449" target="_blank" rel="noopener"><strong>遇见狂神说</strong></a><a href="https://www.bilibili.com/video/BV1FE411P7B3" target="_blank" rel="noopener">视频</a>里截的图</h1><p>结果示意图</p>
<p><img src="https://i.loli.net/2020/08/10/o8GzfitwRECyv5S.png" alt="2020-07-30_170946.PNG">文件操作</p>
<p><img src="https://i.loli.net/2020/08/10/oabC3Qp2YniJ78d.png" alt="2020-07-30_172632.PNG">忽略文件<br><img src="https://i.loli.net/2020/08/10/6i3lbROQ1eackyt.png" alt="2020-07-30_180209.PNG"></p>
<h1 id="简介、诞生、安装等"><a href="#简介、诞生、安装等" class="headerlink" title="简介、诞生、安装等"></a>简介、诞生、安装等</h1><p>&emsp;没有，自己查。关于安装，我没用官方的。我用的是<a href="https://cmder.net/" target="_blank" rel="noopener">cmder</a>。它集成了Git。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a><a href="https://www.baidu.com/s?wd=Git%20配置" target="_blank" rel="noopener">配置</a></h1><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span>  --list</span><br></pre></td></tr></table></figure>

<p>&emsp;从上面三条命令可以看出<code>--list</code>&hArr;<code>-l</code>。system指安装目录下的gitconfig文件，global指用户目录（~）下的gitconfig文件，local指当前仓库的gitconfig文件。</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"150811"</span> <span class="comment"># 名称 引号可加可不加</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email 150811@qq.com <span class="comment"># 邮箱</span></span><br></pre></td></tr></table></figure>

<p>&emsp;看了上上面的命令，可以自行对上面的命令进行改造。实在不想打命令，可以去对应文件修改。关于冒充，最好不要。</p>
<h1 id="命令合集部分跳转"><a href="#命令合集部分跳转" class="headerlink" title="命令合集部分跳转"></a>命令合集部分跳转</h1><ol>
<li><a href=#qt>其他</a></li>
<li><a href=#tag>tag</a></li>
<li><a href=#rebase>rebase</a></li>
<li><a href=#pf>pull和fetch</a></li>
<li><a href=#push>push</a></li>
<li><a href=#cherry-pick>chrerry-pick</a></li>
<li><a href=#stash>stash</a></li>
<li><a href="#merge">merge合并和rebase</a></li>
<li>[branch](# branch分支相关)</li>
<li><a href="#remote远程相关">remote</a></li>
<li><a href="#rm">rm</a></li>
<li><a href="#checkout">checkout和resotre恢复相关</a></li>
<li><a href="#reset">reset和revert</a></li>
<li><a href="#log">log</a></li>
</ol>
<h1 id="命令合集"><a href="#命令合集" class="headerlink" title="命令合集"></a>命令合集</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>&emsp;这个命令可以初始化一个空仓库。也可以用下面的命令得到一个仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url] [dir]</span><br></pre></td></tr></table></figure>

<p>&emsp;如果不加路径，就会在当前路径生成一个仓库名的文件夹。后续需要进入这个文件夹。所以我一般会用<code>.</code>这路径。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git add [file]</span><br></pre></td></tr></table></figure>

<p>&emsp;<code>git add</code>这个命令作用很多。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"消息"</span> [file 不加则全部]</span><br><span class="line">git commit //会进入编辑模式，用的编辑器取决于配置文件</span><br><span class="line">git commit --amend //常常用来修改某个branch上最顶端的commit</span><br><span class="line">git commit -c ORIG_HEAD  //-c选项使得新提交的<span class="built_in">log</span> message重用ORIG_HEAD指向的commit使用的<span class="built_in">log</span> message，但允许用户编辑（查--amend得到）</span><br></pre></td></tr></table></figure>

<p>&emsp;这个不多说，<del>懂得都懂，不懂得，说了你也不明白，不如不说。你们也别来问我怎么了，利益牵扯太大，说了对你们也没什么好处，当不知道就行了，其余的我只能说这里面水很深，牵扯到很多大人物。详细资料你们自己找是很难找的，网上大部分已经删除干净了，所以我只能说懂得都懂，不懂得也没办法。</del></p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>&emsp;这个命令可以查看当前仓库的状态，会提示你用什么命令来解决问题。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff [file]</span><br></pre></td></tr></table></figure>

<p>&emsp;这个命令可以看到文件有什么修改。当然这时可能看到乱码。自行解决。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff：是查看working tree与index的差别的。</span><br><span class="line">git diff --cached：是查看index与repository的差别的。</span><br><span class="line">git diff HEAD：是查看working tree和repository的差别的。其中：HEAD代表的是最近的一次commit的信息。</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=diff>上述命令</span>来自<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">教程</a>的评论区，我比较相信。<code>git diff HEAD -- readme.txt</code>中间确实有空格。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>

<p>&emsp;这个命令建议使用简写。不打命令就在文件里改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lg = <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class="line">llg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=log>这个命令</span>可以看每次的命令。对于我来说，可以方便回退到某个版本。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br><span class="line">下面有git reset --soft HEAD^ </span><br><span class="line">默认是--mixed</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=reset>这个命令</span>可以回退到某一个版本。win上需要双倍<code>^</code>（父）。后面可以理解为指针。还有~<num>。</p>
<p>&emsp;对于使用<code>--hard</code>，我还是有些疑惑。我还是查阅过一点资料的。这种疑惑是一种知识不全的感觉。</p>
<p>&emsp;<code>reset</code>好像有点危险。远程无效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure>

<p>&emsp;可以分享给别人。撤销提交，引入新提交，和提交前一样。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=checkout>这个命令</span>结合可以撤销修改到最近的<code>commit or add</code>(感觉有问题，是不是直接从暂存区恢复？)状态。理解起来很烦，所以我一般用<code>switch</code>。</p>
<p>&emsp;修改了工作区，可以用上面的命令丢弃修改。改了工作区有<code>add</code>了，用<code>git reset HEAD &lt;file&gt;</code>，再使用上面的命令。</p>
<p>&emsp;较高的Git版本，会提示用<code>restore</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">从暂存区恢复工作区，</span><br><span class="line">git resotre --worktree readme.txt</span><br><span class="line">从master恢复暂存区 </span><br><span class="line">git restore --staged readme.txt</span><br><span class="line">从master同时恢复工作区和暂存区</span><br><span class="line">git restore --<span class="built_in">source</span>=HEAD --staged --worktree readme.txt</span><br></pre></td></tr></table></figure>

<hr>
<p>&emsp;<span id=rm>rm</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm</span><br><span class="line">git rm --cached</span><br><span class="line">git rm -r</span><br><span class="line">直觉告诉我应该有</span><br><span class="line">git rm -rf</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin [仓库克隆或下载那的链接]</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=remote>这个命令</span>结合可以关联远程仓库。我是把<code>origin</code>理解为主机名的，配置文件看一看，大概就理解了。取消关联<code>git remote rm origin</code>（没试过）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>&emsp;上面的命令用来查看远程库的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line">追踪远程分支</span><br><span class="line">还可以</span><br><span class="line">git<span class="string">'checkout……</span></span><br></pre></td></tr></table></figure>

<p>&emsp;第一次推送要用类似上面的命令。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">推荐使用</span><br><span class="line">git switch -c dev</span><br></pre></td></tr></table></figure>

<p>&emsp;上面的<span id=branch>命令</span>表示创建并切换分支。可以理解为下面两条命令。似乎还可以加上远程分支<code>origin/name</code>和<code>commit_id</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>

<p>&emsp;对于查看分支可以用下面的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>&emsp;删除分支可以用下面的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br><span class="line">-D 强行删除</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span><br></pre></td></tr></table></figure>

<p>&emsp;上面的命令是来链接本地分支与远程分支的。</p>
<hr>
<p>&emsp;<span id=merge>合并</span>，假设有两个分支，在生成另一个分支切出去后，主分支没动。当另一个分支有提交后，在主分支合并会直接前进。如果主分支也有提交，合并会形成一个新的提交。它有两个父结点的提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br><span class="line">git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase master 会把当前的复制到master。 可以跟两个，搬后面的</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=stash>这个命令</span>可以储藏当前工作区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p>&emsp;查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;恢复</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick 4c805e2</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=cherry-pick>这个命令</span>可以复制指定提交到当前HEAD，可以更多个<code>commit_id</code>，不过顺序又要求（如果没记错）。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [主机名] [本地分支]:[远程分支]</span><br><span class="line">不带参数会和push.default有关。</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=push>这个命令</span>不加本地分支会删除远程分支。</p>
<hr>
<div id=pf>pull和fetch</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull 等价git fetch 加 git merge</span><br><span class="line">git pull --rebase</span><br><span class="line">git pull [主机名] [远程分支]:[本地分支]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch 本地master不会前进</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase 分支合并在前面</span><br><span class="line">git rebase -i HEAD~4 提交历史是直线，还可以用前面的分支名。（游戏得出）</span><br><span class="line">git rebase --interactive HEAD~4</span><br></pre></td></tr></table></figure>

<p>&emsp;<span id=rebase>如果</span>不知道哈希值，可以用它的交互模式。可以调序、删除不要、合并提交（游戏）。</p>
<hr>
<div id=tag>tag</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag v1.0</span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line">git tag -a v0.1 -m <span class="string">"version 0.1 released"</span> 1094adb</span><br><span class="line">git show &lt;tagname&gt;</span><br><span class="line">git tag -d v0.1</span><br><span class="line">git push origin v1.0</span><br><span class="line">git push origin --tags</span><br><span class="line">git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>

<hr>
<p>&emsp;<div id=qt>其他</div></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [commit_id/branch_name] 我是这么理解的。还可以加~、^</span><br><span class="line">---</span><br><span class="line">cat .git\HEAD 看HEAD的指向。</span><br><span class="line">git symbolic-ref HEAD 如果HAED指向引用，用这个查看指向。</span><br><span class="line">---</span><br><span class="line">git branch -f master HEAD~3 ‘-f’容许我们将分支强制移动到指定位置。 </span><br><span class="line">git reset --soft HEAD^  //将branch的头指针向前移动一个commit，--soft选项使得index和workspace tree的内容保持移动之前不变（查--amend得到的）（前面有--hard的，因此可以反向理解）</span><br><span class="line">---</span><br><span class="line">git bisect</span><br><span class="line">---</span><br><span class="line">git describe &lt;ref&gt; </span><br><span class="line">输出&lt;tag&gt;_&lt;numCommits&gt;_g&lt;<span class="built_in">hash</span>&gt;</span><br><span class="line">tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， <span class="built_in">hash</span> 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。</span><br><span class="line">当 ref 提交记录上有某个标签时，则只输出标签名称</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML简单笔记</title>
    <url>/2019/08/27/HTML%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<center><font size=10 > <a name=w3c href=https://www.w3school.com.cn/>w3c</a> </font></center>
<hr/>
# 系列链接

<p><a href="https://pengxiandyou.github.io/2019/08/27/HTML简单笔记/">HTML简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/01/CSS简单笔记/">CSS简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/jQuery简单笔记/">jQuery简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/拓展简单笔记/">拓展简单笔记</a><br/></p>
<h1 id="一-标题标签"><a href="#一-标题标签" class="headerlink" title="一 标题标签"></a>一 标题标签</h1><ol>
<li><p><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></p>
</li>
<li><p><code>&lt;h2&gt;二级标题&lt;/h2&gt;</code></p>
</li>
<li><p><code>&lt;h3&gt;三级标题&lt;/h3&gt;</code></p>
</li>
<li><p><code>&lt;h4&gt;四级标题&lt;/h4&gt;</code> </p>
</li>
<li><p><code>&lt;h5&gt;五级标题&lt;/h5&gt;</code> </p>
</li>
<li><p><code>&lt;h6&gt;六级标题&lt;/h6&gt;</code> </p>
</li>
<li><p><code>&lt;h7&gt;七级标题&lt;/h7&gt;</code>  <font color=red> 没有</font></p>
</li>
</ol>
<h1 id="二-段落标签"><a href="#二-段落标签" class="headerlink" title="二 段落标签"></a>二 段落标签</h1><ol>
<li><code>&lt;p&gt;段落&lt;/p&gt;</code></li>
</ol>
<h1 id="三-标签"><a href="#三-标签" class="headerlink" title="三`标签"></a>三`标签</h1><ol>
<li><code>&lt;br/&gt;</code></li>
</ol>
<h1 id="四-水平线标签"><a href="#四-水平线标签" class="headerlink" title="四 水平线标签"></a>四 水平线标签</h1><ol>
<li><code>&lt;hr /&gt;</code></li>
</ol>
<h1 id="五-加粗和斜体"><a href="#五-加粗和斜体" class="headerlink" title="五 加粗和斜体"></a>五 加粗和斜体</h1><ol>
<li><code>&lt;strong&gt;加粗&lt;/strong&gt;</code> <strong>加粗</strong></li>
<li><code>&lt;b&gt;加粗&lt;/b&gt;</code> <b>加粗</b></li>
<li><code>&lt;em&gt;斜体&lt;/em&gt;</code> <em>斜体</em></li>
<li><code>&lt;i&gt;斜体&lt;/i&gt;</code>  <i>斜体</i></li>
<li><code>&lt;font size=&quot;3&quot; color=&quot;red&quot;&gt;字体标签&lt;/font&gt;</code> <font size="3" color="red">字体标签</font></li>
<li>按照标准不建议用 有样式 <code>css</code>来控制  自己怎么方便怎么用</li>
</ol>
<h1 id="六-特殊符号-网页显示一些东西"><a href="#六-特殊符号-网页显示一些东西" class="headerlink" title="六 特殊符号 (网页显示一些东西)"></a>六 特殊符号 (网页显示一些东西)</h1><ol>
<li><code>&amp;nbsp;</code> 空&nbsp;格</li>
<li><code>&amp;lt;</code> &lt;</li>
<li><code>&amp;gt;</code> &gt;</li>
<li><code>&amp;quto;</code>  “ markdown不识别可能</li>
<li><code>&amp;copy;</code> &copy;</li>
</ol>
<h1 id="七-图片标签"><a href="#七-图片标签" class="headerlink" title="七 图片标签"></a>七 图片标签</h1><ol>
<li><code>&lt;img src=&quot;&quot; /&gt;</code><ul>
<li><code>src</code>: 指定图片路径 <font color="blue">相对引用:</font>以当前网页路径作为参考位置,了解<font color="red">.</font> 和<font color="red">..</font> <font color="blue">绝对引用:</font> 例如 <a href="https://www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png?where=super" target="_blank" rel="noopener">https://www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png?where=super</a></li>
<li><code>width</code> <code>height</code></li>
<li><code>title</code>: 鼠标放到图片上的悬浮文字提示</li>
<li><code>al</code>t: 图片不能正常显示 替换图片的文</li>
</ul>
</li>
</ol>
<h1 id="八-超链接"><a href="#八-超链接" class="headerlink" title="八 超链接"></a>八 超链接</h1><ol>
<li><code>&lt;a href=&quot;&quot;&gt;链接焦点 图片or文字&lt;/a&gt;</code> <a href="">超链接</a><ul>
<li>target:  _self:默认值  _blank:新窗口 </li>
<li>锚链接: 当前页面跳转 先在目标地写<code>&lt;a name=&quot;锚名字&quot;&gt;&lt;/a&gt;</code> 然后点击<code>&lt;a href=&quot;#锚名字&quot;&gt;&lt;/a&gt;</code> # 浏览器解释回到最上面 例如: <a href="#w3c">顶部w3c</a></li>
<li>功能链接: 可以启动第三方软件 有特定格式 例如 <code>&lt;a href=&quot;mailto:1508115864@qq.com&quot;&gt;联系我&lt;/a&gt;</code> <a href="mailto:1508115864@qq.com">联系我</a></li>
</ul>
</li>
</ol>
<h1 id="九-列表"><a href="#九-列表" class="headerlink" title="九 列表"></a>九 列表</h1><ol>
<li><p>无序列表</p>
<ol>
<li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如</p>
<ul><li>桔子</li><li>香蕉</li><li>苹果</li></ul>
</li>
<li><p>type: square: 正方形 disc: 实心圈(网页默认) circle: 空心圈</p>
</li>
</ol>
</li>
<li><p>有序列表</p>
<ol>
<li><pre><code class="html">h<span class="tag">&lt;<span class="name">ol</span>&gt;</span>
<span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span>
<span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span>
<span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span>
<span class="tag">&lt;/<span class="name">ol</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   	如</span><br><span class="line">      </span><br><span class="line">   &lt;ol&gt;&lt;li&gt;桔子&lt;&#x2F;li&gt;&lt;li&gt;香蕉&lt;&#x2F;li&gt;&lt;li&gt;苹果&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;</span><br><span class="line">   2. type: A &lt;font color &#x3D;&quot;green&quot;&gt;or&lt;&#x2F;font&gt; a I &lt;font color &#x3D;&quot;green&quot;&gt;or&lt;&#x2F;font&gt; i</span><br><span class="line">   </span><br><span class="line">3. 定义列表(常来用来做图文混排)</span><br><span class="line"></span><br><span class="line">   1. &#96;&#96;&#96;html</span><br><span class="line">      &lt;dl&gt;</span><br><span class="line">      &lt;dt&gt;水果:&lt;&#x2F;dt&gt;</span><br><span class="line">      &lt;dd&gt;桔子&lt;&#x2F;dd&gt;</span><br><span class="line">      &lt;dd&gt;香蕉&lt;&#x2F;dd&gt;</span><br><span class="line">      &lt;dd&gt;苹果&lt;&#x2F;dd&gt;</span><br><span class="line">      &lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure></span>
如
   <span class="tag">&lt;<span class="name">dl</span>&gt;</span>
   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>水果:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>
   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>
   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>
   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>
   <span class="tag">&lt;/<span class="name">dl</span>&gt;</span>
</code></pre>
</li>
</ol>
</li>
</ol>
<h1 id="十-表格布局-DIV-框架布局后面再说"><a href="#十-表格布局-DIV-框架布局后面再说" class="headerlink" title="十 表格布局 (DIV 框架布局后面再说)"></a>十 表格布局 (DIV 框架布局后面再说)</h1><ol>
<li><p>规整排列数据</p>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">table</span>&gt;</span>//网页默认没有边框
    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>//行
        <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>//列
        <span class="tag">&lt;<span class="name">td</span>&gt;</span>你爱我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="name">td</span>&gt;</span>我和你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
        <span class="tag">&lt;<span class="name">td</span>&gt;</span>你和我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="name">table</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;table&gt;</span><br><span class="line">   	&lt;tr&gt;</span><br><span class="line">   		&lt;td&gt;我爱你&lt;&#x2F;td&gt;</span><br><span class="line">   		&lt;td&gt;你爱我&lt;&#x2F;td&gt;</span><br><span class="line">   	&lt;&#x2F;tr&gt;</span><br><span class="line">   	&lt;tr&gt;</span><br><span class="line">   		&lt;td&gt;我和你&lt;&#x2F;td&gt;</span><br><span class="line">   		&lt;td&gt;你和我&lt;&#x2F;td&gt;</span><br><span class="line">   	&lt;&#x2F;tr&gt;</span><br><span class="line">   &lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">3. border 边框(数&#96;px&#96;) width height</span><br><span class="line"></span><br><span class="line">4. 表格对齐</span><br><span class="line"></span><br><span class="line">5. 单元格对齐</span><br><span class="line"></span><br><span class="line">   &lt;table&gt;</span><br><span class="line">   	&lt;tr&gt;</span><br><span class="line">   		&lt;td&gt;属性&lt;&#x2F;td&gt;</span><br><span class="line">   		&lt;td&gt;值&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;说明&lt;&#x2F;td&gt;</span><br><span class="line">   	&lt;&#x2F;tr&gt;</span><br><span class="line">   	&lt;tr&gt;</span><br><span class="line">   		&lt;td&gt;align&lt;br &#x2F;&gt;水平对齐方式&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;left&lt;br &#x2F;&gt;center&lt;br &#x2F;&gt;right&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;左对齐&lt;br&#x2F;&gt;居中对齐&lt;br &#x2F;&gt;右对齐&lt;&#x2F;td&gt;</span><br><span class="line">   	&lt;&#x2F;tr&gt;</span><br><span class="line">       	&lt;tr&gt;</span><br><span class="line">   		&lt;td&gt;valign&lt;br &#x2F;&gt;垂直对齐方式&lt;&#x2F;td&gt;</span><br><span class="line">   		&lt;td&gt;top&lt;br &#x2F;&gt;middle&lt;br &#x2F;&gt;bottom&lt;br &#x2F;&gt;baseline&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;顶端对齐&lt;br&#x2F;&gt;居中对齐&lt;br &#x2F;&gt;低端对齐&lt;br &#x2F;&gt;基线对齐&lt;&#x2F;td&gt;</span><br><span class="line">   	&lt;&#x2F;tr&gt;</span><br><span class="line">   &lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">6. 好多地方都可以用上面的东西 就近原则</span><br><span class="line"></span><br><span class="line">7. 跨行跨列</span><br><span class="line"></span><br><span class="line">   - 跨列 水平合并</span><br><span class="line"></span><br><span class="line">     &#96;&#96;&#96;html</span><br><span class="line">     &lt;table&gt;</span><br><span class="line">     	&lt;tr&gt;</span><br><span class="line">     		&lt;td colspan&#x3D;&quot;2&quot;&gt;你我&lt;&#x2F;td&gt;</span><br><span class="line">     	&lt;&#x2F;tr&gt;</span><br><span class="line">     	&lt;tr&gt;</span><br><span class="line">     		&lt;td&gt;我爱你&lt;&#x2F;td&gt;</span><br><span class="line">     		&lt;td&gt;你爱我&lt;&#x2F;td&gt;</span><br><span class="line">     	&lt;&#x2F;tr&gt;</span><br><span class="line">     	&lt;tr&gt;</span><br><span class="line">     		&lt;td&gt;我和你&lt;&#x2F;td&gt;</span><br><span class="line">     		&lt;td&gt;你和我&lt;&#x2F;td&gt;</span><br><span class="line">     	&lt;&#x2F;tr&gt;</span><br><span class="line">     &lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure></span>
  如
  <span class="tag">&lt;<span class="name">table</span>&gt;</span>
      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
          <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>你我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
          <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
          <span class="tag">&lt;<span class="name">td</span>&gt;</span>你爱我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
          <span class="tag">&lt;<span class="name">td</span>&gt;</span>我和你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
          <span class="tag">&lt;<span class="name">td</span>&gt;</span>你和我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
  <span class="tag">&lt;/<span class="name">table</span>&gt;</span>

- 跨行 垂直合并

     <span class="comment"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>你我<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>你爱我<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>我和你<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>你和我<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></span>
     如
     <span class="tag">&lt;<span class="name">table</span>&gt;</span>
         <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
             <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>你我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
             <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
             <span class="tag">&lt;<span class="name">td</span>&gt;</span>你爱我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
         <span class="tag">&lt;<span class="name">tr</span>&gt;</span>
             <span class="tag">&lt;<span class="name">td</span>&gt;</span>我和你<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
             <span class="tag">&lt;<span class="name">td</span>&gt;</span>你和我<span class="tag">&lt;/<span class="name">td</span>&gt;</span>
         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>
     <span class="tag">&lt;/<span class="name">table</span>&gt;</span>

- 两跨 自己专研
</code></pre>
</li>
</ol>
<h1 id="十一-框架布局"><a href="#十一-框架布局" class="headerlink" title="十一 框架布局"></a>十一 框架布局</h1><ol>
<li><p>将一个页面分成若干个部分,每个部分嵌套一个页面 一般用来做后台管理页面(回忆某次<code>java</code>实践)</p>
<ul>
<li><p>分页面  <code>frameset</code>不能和<code>body</code>一起用 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,20%,*"</span>&gt;</span><span class="comment">&lt;!-- cols 也可以px --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*"</span>&gt;</span><span class="comment">&lt;!-- cols 也可以px --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,*"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>准备页面</p>
</li>
<li><p>关联页面 <code>src</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*"</span>&gt;</span><span class="comment">&lt;!-- cols 也可以px --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,*"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定目标位置 给<code>frame</code>起一个名字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"20%,*"</span>&gt;</span><span class="comment">&lt;!-- cols 也可以px --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"名字"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,*"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"名字"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"名字"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"名字"</span>&gt;</span>链接焦点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>禁止拖动 <code>noresize=&quot;noresize&quot;</code> 没有滚动条 <code>scrolling=&quot;no&quot;</code> </p>
</li>
<li><p>子框架 <code>&lt;iframe src=&quot;&quot;&gt;&lt;/iframe&gt;</code>可以把页面加进来 页面复用 可以在<code>body</code>里用 </p>
 <iframe src="https://aidn.jp/mikutap/" width=700px></iframe><br/>
 <iframe src="https://www.rainymood.com" width=700px></iframe>

</li>
</ol>
<h1 id="十二-表单-表单元素"><a href="#十二-表单-表单元素" class="headerlink" title="十二 表单 表单元素"></a>十二 表单 表单元素</h1><ol>
<li><ul>
<li>表单: 嵌套表单元素 填写的数据以一个表单整体提交</li>
<li>表单元素: 文本框 密码框 单选框 复选框 下拉列表 </li>
</ul>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post/get"</span> <span class="attr">action</span>=<span class="string">"某html等"</span>&gt;</span> <span class="comment">&lt;!-- 默认get action:指定数据提交到服务器后由谁处理--&gt;</span> 
<span class="tag">&lt;<span class="name">p</span>&gt;</span> 名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以用&lt;br /&gt;--&gt;</span>
<span class="tag">&lt;<span class="name">p</span>&gt;</span> 密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span>
<span class="tag">&lt;<span class="name">p</span>&gt;</span> 
    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Button"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span> <span class="comment">&lt;!-- 不传 一般不加name--&gt;</span>
    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">"Reset"</span> <span class="attr">value</span>=<span class="string">"重填"</span>/&gt;</span>
<span class="tag">&lt;/<span class="name">p</span>&gt;</span>
<span class="tag">&lt;/<span class="name">form</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &lt;form method&#x3D;&quot;get&quot; action&#x3D;&quot;某html&quot;&gt;</span><br><span class="line">   &lt;p&gt; 名字: &lt;input name&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot;&#x2F;&gt; &lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt; 密码: &lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot;&#x2F;&gt; &lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt; </span><br><span class="line">   	&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;Button&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">   	&lt;input type&#x3D;&quot;reset&quot; name&#x3D;&quot;Reset&quot; value&#x3D;&quot;重填&quot;&#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;p&gt;</span><br><span class="line">   &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">3. 有&#96;name&#96;的表单元素才会提交</span><br><span class="line"></span><br><span class="line">4. - &#96;text&#96; : &#96;size&#96; 文本框长度 &#96;maxlength&#96; 可输入最大字符</span><br><span class="line"></span><br><span class="line">   - &#96;password&#96;: </span><br><span class="line"></span><br><span class="line">   - &#39;radio&#39; : 单选 如</span><br><span class="line"></span><br><span class="line">      &#96;&#96;&#96;html</span><br><span class="line">     &lt;input type&#x3D;&quot;radio&quot; name &#x3D;&quot;gender&quot;&#x2F;&gt;男 &lt;!-- 不加name 不能识别为一组 无法控制 --&gt;</span><br><span class="line">     &lt;input type&#x3D;&quot;radio&quot; name &#x3D;&quot;gender&quot;&#x2F;&gt;女 &lt;!-- 加上value可提交 否则为on --&gt;</span><br></pre></td></tr></table></figure></span>

  <span class="tag">&lt;<span class="name">form</span>&gt;</span>
      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span> =<span class="string">"gender"</span>/&gt;</span>男
      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span> =<span class="string">"gender"</span>/&gt;</span>女
  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>

- `checkbox` : 复选 参上
- 按钮 :
  - 提交 : `submit`
  - 重置 : `reset`
  - 普通 : `button` 可自定义任何功能
  - 图片 : `img` `src=""` 默认有提交功能
- 文件域 : `file`  要用`post` 要有`enctype=""`  可以是 `multipart /form-data`多部件</code></pre>
</li>
<li><p>下拉 :   </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 有value 传value的值 无value 传中间的值</span></span><br><span class="line"><span class="comment">	&lt;option&gt;B&lt;/option&gt;</span></span><br><span class="line"><span class="comment">	&lt;option&gt;C&lt;/option&gt; &lt;!-- 默认选中 selected="selected" --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>D<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form>
<select name="选择">
   <option>A</option>
   <option>B</option>
   <option selected="selected" >C</option>
   <option>D</option>
</select>
</form>
</li>
<li><p>多行文本域 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"10"</span>&gt;</span>写字<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><textarea rows="5" cols="10">写字</textarea></p>
</li>
</ol>
<h2 id="十三-表单高级应用"><a href="#十三-表单高级应用" class="headerlink" title="十三 表单高级应用"></a>十三 表单高级应用</h2><ol>
<li><p>隐藏域 不给用户看 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iptut</span> <span class="attr">type</span> =<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>只读和禁用 <code>readnoly=&quot;readonly&quot;</code> 一般用于文本框  <code>disabled=&quot;disabled&quot;</code> 一般用于按钮</p>
</li>
<li><p>语义化 没什么用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	姓名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form>
    <fieldset>
    <legend>用户信息</legend>
    姓名 : <input type="text"/>
    </fieldset>
</form>
</li>
<li><ul>
<li><p>所有标签可以加 <code>id</code> 和 <code>name</code> </p>
<ul>
<li><code>id</code>: 同一个页面不能出现相同的<code>id</code></li>
<li><code>name</code>: 可以重复</li>
</ul>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="comment">&lt;!-- 增强用户体验 符合规范 --&gt;</span><span class="comment">&lt;!-- 点击名字 光标跳到文本框 --&gt;</span>
    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>
    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uname"</span>&gt;</span>姓名 : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span>
    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"uname"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span>
<span class="tag">&lt;/<span class="name">form</span>&gt;</span></code></pre>
<form>
    <fieldset>
    <legend>用户信息</legend>
    <label for="uname">姓名 : </lable>
    <input type="text" id="uname"/>
    </fieldset>
</form>

</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript简单笔记</title>
    <url>/2019/10/24/JavaScript%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="系列链接"><a href="#系列链接" class="headerlink" title="系列链接"></a>系列链接</h1><p><a href="https://pengxiandyou.github.io/2019/08/27/HTML简单笔记/">HTML简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/01/CSS简单笔记/">CSS简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/JavaScript简单笔记/">JavaScript简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/jQuery简单笔记/">jQuery简单笔记</a><br/><br><a href="https://pengxiandyou.github.io/2019/10/24/拓展简单笔记/">拓展简单笔记</a><br/></p>
<h1 id="JavaScript-皮毛学习"><a href="#JavaScript-皮毛学习" class="headerlink" title="JavaScript 皮毛学习"></a>JavaScript 皮毛学习</h1><p><img src="https://i.loli.net/2019/08/07/muwZjGEB3il7MPb.png" alt="什么是JavaScript.PNG"></p>
<p><img src="https://i.loli.net/2019/08/07/vtSUNueEXQxBRAO.png" alt="BOM浏览器对象模型.PNG"></p>
<p><img src="https://i.loli.net/2019/08/07/z5jXuydGYp1Obvm.png" alt="DOM文档对象模型.PNG"></p>
<h2 id="一-基本结构"><a href="#一-基本结构" class="headerlink" title="一 基本结构"></a>一 基本结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascrip&quot;&gt;</span><br><span class="line">语句;如:</span><br><span class="line">alert(&quot;hello&quot;);写完整: window.alert(&quot;hello&quot;); BOM里面的window的方法</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>写到<code>js</code>文件里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt; language&#x3D;&quot;javascript&quot;省略了</span><br></pre></td></tr></table></figure>
<p>另一种写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;弹出消息框&quot; onclick&#x3D;&quot;javascript:alert(&#39;你来啦&#39;);&quot;&#x2F;&gt;</span><br><span class="line">双引号里用单引号</span><br></pre></td></tr></table></figure>
<h2 id="二-例子"><a href="#二-例子" class="headerlink" title="二 例子"></a>二 例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    document.write(&quot;123&quot;);</span><br><span class="line">    for(var i&#x3D;0;i&lt;5;i++)&#123;</span><br><span class="line">    document.write(&quot;233&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三-语法"><a href="#三-语法" class="headerlink" title="三 语法"></a>三 语法</h2><pre><code>1. `js`弱类型语法: 声明都用`var` 类型由赋值决定
- `var i=1;` `i=1.1;` `i=&quot;aaa&quot;;` `i=new Date();` `var j=233;` `var i,j,k=10;` `l=233;`
- `alert(typeof(i));`可看类型 (提示框)
  - `typeof `运算符返回值如下：
    - `undefined`：变量被声明后，但未被赋值
    - `string`：用单引号或双引号来声明的字符串
    - `boolean`: `true`或`false`
    - `number`：整数或浮点数
    - `object`: `javascript`中的对象、数组和`null`
- 输入框: `prompt(&quot;提示信息&quot;,&quot;提示信息&quot;);`</code></pre><h2 id="四-函数"><a href="#四-函数" class="headerlink" title="四 函数"></a>四 函数</h2><ol>
<li><p><code>parseInt()</code> : 字符串转整数  <code>parseDouble()</code> : 转小数 <code>isNaN</code> : is not a number(不是数返回真,数返回假)</p>
</li>
<li><p>自定义函数</p>
<ul>
<li><p>无参</p>
<p>function 方法名(){</p>
<p>}</p>
</li>
<li><p>带参</p>
<p>function 方法名(变量名1,变量名2){</p>
<p>}</p>
</li>
</ul>
</li>
<li><p>匿名写法</p>
<ul>
<li>事件名=function(){代码;}</li>
<li>(function (){代码;}<font color="#ff4040">()</font>)</li>
</ul>
</li>
<li><p>直接运行</p>
<ul>
<li><code>window.onload=function(){代码}</code></li>
<li><code>&lt;body onload=&quot;事件名()&quot;&gt;</code> (事件 我理解 <code>on</code> 开头 <code>onload</code> <code>onmouseover</code> <code>onclick</code> <code>onchange</code>)</li>
</ul>
</li>
</ol>
<h2 id="五-window对象"><a href="#五-window对象" class="headerlink" title="五 window对象"></a>五 window对象</h2><ol>
<li><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>screen</code></td>
<td align="center">有关客户端的屏幕和显示性能的消息</td>
</tr>
<tr>
<td align="center"><code>location</code></td>
<td align="center">有关当前URL的信息</td>
</tr>
</tbody></table>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(screen.width+&quot;,&quot;+screen.height);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.location.href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;pengxiandyou&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a onclick&#x3D;&quot;javascript:window.location.href&#x3D;&#39;https:&#x2F;&#x2F;github.com&#x2F;pengxiandyou&#39;&quot;&gt;我的主页&lt;&#x2F;a&gt; &#x2F;&#x2F;javascript:不写也对</span><br></pre></td></tr></table></figure>
</li>
<li><p>window常用方法 : <code>alert()</code> <code>prompt()</code> <code>confirm()确认框</code> </p>
<p>定时器 <code>setTimeout()</code> <code>setInterval()</code></p>
<p>例子 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;不要运行,运行下面的</span><br><span class="line">function  test()&#123;</span><br><span class="line">	 var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">	 item.value&#x3D;&quot;2&quot;;&#x2F;&#x2F;.value就是取值</span><br><span class="line"> 	document.getElementById(&quot;mydiv&quot;).innerHTML&#x3D;&quot;&lt;h1&gt;我爱你&lt;&#x2F;h1&gt;&quot;;&#x2F;&#x2F; 可以放标签 innerText只能放文本</span><br><span class="line"> 	var num&#x3D;parseInt(item.value)+1;</span><br><span class="line"> 		item.value&#x3D;num;</span><br><span class="line"> setTimeout(&quot;test&quot;,1000);&#x2F;&#x2F;感觉像递归</span><br><span class="line">&#125;</span><br><span class="line">window.onload&#x3D;function()&#123;</span><br><span class="line">	 setTimeout(&quot;test&quot;,1000);&#x2F;&#x2F;指定多久以后制行一次 只执行一次	</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">-----------------------------------------------</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot;&#x2F;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;mydiv&quot;&gt; aaa &lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;0&quot; onclick&#x3D;&quot;test()&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function  test()&#123;</span><br><span class="line">	var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">	var num&#x3D;parseInt(item.value)+1;</span><br><span class="line">	item.value&#x3D;num;</span><br><span class="line">	setTimeout(&quot;test()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">window.onload&#x3D;function()&#123;</span><br><span class="line">	setTimeout(&quot;test()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line"> &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot; value&#x3D;&quot;0&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;0&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tm;</span><br><span class="line">function start()&#123;</span><br><span class="line">var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">var num&#x3D;parseInt(item.value)+1;</span><br><span class="line">item.value&#x3D;num;</span><br><span class="line">tm&#x3D;setTimeout(&quot;start()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">function stop()&#123;</span><br><span class="line">clearTimeout(tm);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot; value&#x3D;&quot;0&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开始&quot; onclick&#x3D;&quot;start()&quot;&#x2F;&gt;&#x2F;&#x2F;开始点得越多动得越快结束也要点多次</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;结束&quot; onclick&#x3D;&quot;stop()&quot;&#x2F;&gt;&#x2F;&#x2F;虽然看起来tm只有一个</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tm;</span><br><span class="line">function start()&#123;</span><br><span class="line">var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">var num&#x3D;parseInt(item.value)+1;</span><br><span class="line">item.value&#x3D;num;</span><br><span class="line">document.getElementById(&quot;begin&quot;).disabled&#x3D;true;</span><br><span class="line">tm&#x3D;setTimeout(&quot;start()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">function stop()&#123;</span><br><span class="line">document.getElementById(&quot;begin&quot;).disabled&#x3D;false;</span><br><span class="line">clearTimeout(tm);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot; value&#x3D;&quot;0&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开始&quot; onclick&#x3D;&quot;start()&quot; id&#x3D;&quot;begin&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;结束&quot; onclick&#x3D;&quot;stop()&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function  test()&#123;</span><br><span class="line">	var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">	var num&#x3D;parseInt(item.value)+1;</span><br><span class="line">	item.value&#x3D;num;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">window.onload&#x3D;function()&#123;</span><br><span class="line">	setInterval(&quot;test()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line"> &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot;value&#x3D;&quot;0&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;0&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tm;</span><br><span class="line">function  test()&#123;</span><br><span class="line">	var item&#x3D;document.getElementById(&quot;mytxt&quot;);</span><br><span class="line">	var num&#x3D;parseInt(item.value)+1;</span><br><span class="line">	item.value&#x3D;num;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">function begin()&#123;</span><br><span class="line">	tm&#x3D;setInterval(&quot;test()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line">function stop()&#123;</span><br><span class="line">	clearInterval(tm);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mytxt&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开始&quot; onclick&#x3D;&quot;begin()&quot; id&#x3D;&quot;begin&quot;&#x2F;&gt;&#x2F;&#x2F;多点几次也动得快,但结束只能结束一个</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;结束&quot; onclick&#x3D;&quot;stop()&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="BOM编程"><a href="#BOM编程" class="headerlink" title="BOM编程"></a><code>BOM</code>编程</h2><p>使用display样式属性控制元素的隐藏和显示 自带属性可以直接点 css样式要点style再点</p>
<ol>
<li><code>Document</code>对象常用方法</li>
</ol>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>getElementByID()</code></td>
<td align="center">返回对拥有指定id的第一个对象的引用</td>
</tr>
<tr>
<td align="center"><code>getElementsByName()</code></td>
<td align="center">返回带有指定名称的对象的集合</td>
</tr>
<tr>
<td align="center"><code>getElementsByTagName()</code></td>
<td align="center">返回带有指定标签名的对象的集合</td>
</tr>
<tr>
<td align="center"><code>write()</code></td>
<td align="center">向文档写文本、HTML表达式或JavaScript代码</td>
</tr>
</tbody></table>
<p><code>visibility</code>属性的值</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>visible</code></td>
<td align="center">表示元素可见</td>
</tr>
<tr>
<td align="center"><code>hidden</code></td>
<td align="center">表示元素不可见</td>
</tr>
</tbody></table>
<p>语法 : <code>object.style.visibility=&quot;值&quot;</code>  一般不用,隐藏会留空,用<code>display</code></p>
<ol start="2">
<li><p>查看/修改属性节点</p>
<ul>
<li><p><code>getAttribute</code>(“属性名”)</p>
</li>
<li><p><code>setAttribute</code>(“属性名”.”属性值”)</p>
</li>
<li><p>例子 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload&#x3D;function()&#123;</span><br><span class="line">	document.getelementById(&quot;bt&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">		var item&#x3D;document.getelementById(&quot;link&quot;);</span><br><span class="line">		alert(item.getAttribute(&quot;href&quot;));	</span><br><span class="line">		alert(item.href);</span><br><span class="line">		item.setAttribute(&quot;href&quot;,&quot;http:&#x2F;&#x2F;pengxiandyou.gitee.io&quot;);</span><br><span class="line">		item.href&#x3D;&quot;htttp:&#x2F;&#x2F;www.baidu.com&quot;;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; id&#x3D;&quot;link&quot;&gt;百度&lt;&#x2F;a&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;bt&quot; value&#x3D;&quot;点击&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建和增加节点</p>
<ul>
<li><p><code>createElement()</code> : 创建节点</p>
</li>
<li><p><code>appendChild()</code> : 末尾追加方式插入节点</p>
</li>
<li><p><code>nsetBefore()</code> : 在指定节点前插入新节点</p>
</li>
<li><p>例子 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> window.onload&#x3D;function()&#123;</span><br><span class="line">        	document.getElementById(&quot;bt&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">       		 var myimg&#x3D;document.createElement(&quot;img&quot;);</span><br><span class="line">   myimg.setAttribute(&quot;src&quot;,&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;YLJRbAhD7tS9Tk3.gif&quot;);</span><br><span class="line">        &#x2F;&#x2F;document.body.appendChild(myimg);</span><br><span class="line">        document.body.insertBefore(myimg,document.getElementById(&quot;mydiv&quot;));</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">-----------------------------------</span><br><span class="line">  &lt;div id&#x3D;&quot;mydiv&quot;&gt;aaaaaa&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;bt&quot; value&#x3D;&quot;点击&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除和替换节点</p>
<ul>
<li><p><code>removeChild()</code> : 删除节点</p>
</li>
<li><p><code>replaceChild()</code> : 删除节点</p>
</li>
<li><p>例子 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> window.onload&#x3D;function()&#123;</span><br><span class="line">        	document.getElementById(&quot;bt&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">       		 var myimg&#x3D;document.createElement(&quot;img&quot;);</span><br><span class="line">   myimg.setAttribute(&quot;src&quot;,&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;YLJRbAhD7tS9Tk3.gif&quot;);</span><br><span class="line">        &#x2F;&#x2F;document.body.appendChild(myimg);</span><br><span class="line">        document.body.insertBefore(myimg,document.getElementById(&quot;mydiv&quot;));</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">-----------------------------------</span><br><span class="line">  &lt;div id&#x3D;&quot;mydiv&quot;&gt;aaaaaa&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;bt&quot; value&#x3D;&quot;点击&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  	document.getElementById(&quot;bt&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">    		var myimg&#x3D;document.createElement(&quot;img&quot;);    		myimg.setAttribute(&quot;src&quot;,&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;YLJRbAhD7tS9Tk3.gif&quot;);</span><br><span class="line">   		 	&#x2F;&#x2F;document.body.appendChild(myimg);</span><br><span class="line">   		 	document.body.insertBefore(myimg,document.getElementById(&quot;mydiv&quot;));</span><br><span class="line">	&#125;;</span><br><span class="line">	document.getElementById(&quot;bt1&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">    		var myimg&#x3D;document.getElementsByTagName(&quot;img&quot;);</span><br><span class="line">    		for(i&#x3D;myimg.length;i&gt;0;)&#123;   &#x2F;&#x2F;注意 其他写法有可能在多张图片下要点多次删除 或者 数组越界</span><br><span class="line">    		i--	;		</span><br><span class="line">    			document.body.removeChild(myimg[i]);</span><br><span class="line">    		&#125;</span><br><span class="line">    		</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">------------------------------------------</span><br><span class="line">  &lt;div id&#x3D;&quot;mydiv&quot;&gt;aaaaaa&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;bt&quot; value&#x3D;&quot;点击&quot;&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;bt1&quot; value&#x3D;&quot;删除&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>样式操作</p>
<p>例子 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">font-size:25px;</span><br><span class="line">background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line">-------------</span><br><span class="line">驼峰命名</span><br><span class="line">.style.fontSize</span><br><span class="line">.style.backgroundColor</span><br></pre></td></tr></table></figure>

<ul>
<li><p>改变样式属性</p>
<ul>
<li><p>style属性 一次改一个</p>
</li>
<li><p><code>className</code>属性 可以指定样式表的名字 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul li&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    list-style: none;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    background: url(&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;3OwH5qKcXdsRzGC.jpg&quot;);</span><br><span class="line">    width: 1100px;</span><br><span class="line">    height: 600px;</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">  	&lt;li onmouseover&#x3D;&quot;this.style.backgroundImage&#x3D;&#39;url(https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;YLJRbAhD7tS9Tk3.gif)&#39;&quot;</span><br><span class="line">  	onmouseout&#x3D;&quot;this.style.backgroundImage&#x3D;&#39;url(https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;08&#x2F;07&#x2F;3OwH5qKcXdsRzGC.jpg)&#39;&quot;</span><br><span class="line">  	&gt;1233222222222222222222222222&lt;&#x2F;li&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两类样式</span><br><span class="line">-------------------------</span><br><span class="line">this.className&#x3D;&quot;类名&quot;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>表单验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     	function validate()&#123;</span><br><span class="line">      		var name&#x3D;document.getElementById(&quot;name&quot;).value;</span><br><span class="line">      		if (name&#x3D;&#x3D;&quot;&quot;) &#123;</span><br><span class="line">      			document.getElementById(&quot;nameerror&quot;).innerHTML&#x3D;&quot;用户名不能为空&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125;</span><br><span class="line">      		if (name.length&lt;3 ||name.length&gt;6) &#123;</span><br><span class="line">      			document.getElementById(&quot;nameerror&quot;).innerHTML&#x3D;&quot;长度3到6之间&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125;</span><br><span class="line">      		</span><br><span class="line">      		var password &#x3D; document.getElementById(&quot;password&quot;).value;</span><br><span class="line">      		if (password&#x3D;&#x3D;&quot;&quot;) &#123;</span><br><span class="line">      			document.getElementById(&quot;passworderror&quot;).innerHTML&#x3D;&quot;密码不能为空&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125;</span><br><span class="line">      		if (password.length&lt;8 ||password.length&gt;16) &#123;</span><br><span class="line">      			document.getElementById(&quot;passworderror&quot;).innerHTML&#x3D;&quot;长度8到16之间&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125; </span><br><span class="line">  </span><br><span class="line">      		 var cfpassword &#x3D; document.getElementById(&quot;cfpassword&quot;).value;  		    </span><br><span class="line">      		 if (cfpassword&#x3D;&#x3D;&quot;&quot;) &#123;</span><br><span class="line">      			document.getElementById(&quot;cfpassworderror&quot;).innerHTML&#x3D;&quot;请确认密码&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125;</span><br><span class="line">      		</span><br><span class="line">     			if (cfpassword!&#x3D;password) &#123;</span><br><span class="line">      			document.getElementById(&quot;cfpassworderror&quot;).innerHTML&#x3D;&quot;密码不相同&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125;     </span><br><span class="line">  </span><br><span class="line">      		var email &#x3D; document.getElementById(&quot;email&quot;).value;  </span><br><span class="line">      		 if (!(&#x2F;^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$&#x2F;.test(email)) )</span><br><span class="line">      		 &#123;</span><br><span class="line">      			document.getElementById(&quot;cfemail&quot;).innerHTML&#x3D;&quot;请输入正确邮箱&quot;;</span><br><span class="line">      			return false;</span><br><span class="line">      		&#125; 		   		</span><br><span class="line">      		return true;</span><br><span class="line">      	&#125;</span><br><span class="line">      	    window.onload&#x3D;function()&#123;</span><br><span class="line">          	document.getElementById(&quot;bt&quot;).onclick&#x3D;function()&#123;</span><br><span class="line">          		if (validate()) &#123;</span><br><span class="line">          			document.getElementById(&quot;myform&quot;).submit();</span><br><span class="line">          		&#125;&#125;&#125;;</span><br><span class="line">   ------------------------------</span><br><span class="line">   &lt;form action&#x3D;&quot;#&quot; method&#x3D;&quot;get&quot; onsubmit&#x3D;&quot;return validate()&quot;&gt;&lt;!--返回真假  必须要return--&gt;</span><br><span class="line">  	用户名 : &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;name&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;nameerror&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">  	密 码 : &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;passworderror&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">确 认 : &lt;input type&#x3D;&quot;cfpassword&quot; name&#x3D;&quot;cfpassword&quot; id&#x3D;&quot;cfpassword&quot;&#x2F;&gt;&lt;span id&#x3D;&quot;cfpassworderror&quot;&gt;&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">  	邮 箱 : &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot;&gt; &lt;span id&#x3D;&quot;cfemail&quot;&gt;&lt;&#x2F;span&gt;	&lt;br&#x2F;&gt;</span><br><span class="line">  	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;注册&quot;&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>


















</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于拼写纠正的一点发现</title>
    <url>/2020/03/30/%E5%85%B3%E4%BA%8E%E6%8B%BC%E5%86%99%E7%BA%A0%E6%AD%A3%E7%9A%84%E4%B8%80%E7%82%B9%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h1><p>​    在对着课件仔细更改一点小错误后，测试了几遍，效果不错。当我进行效果统计时，通过下面代码，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python  </span></span><br><span class="line"><span class="comment">#! -*- coding:utf-8 -*-  </span></span><br><span class="line"><span class="comment">#====#====#====#====  </span></span><br><span class="line"><span class="comment">#!@Author : px</span></span><br><span class="line"><span class="comment">#!@time   : 2020/3/28 22:04</span></span><br><span class="line"><span class="comment">#!@File   : test比较</span></span><br><span class="line"><span class="comment">#====#====#====#====  </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp=open(filename)</span><br><span class="line">        text=fp.read()</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(filename,<span class="string">"文件打开失败"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment">#print(text)</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">A = re.findall(<span class="string">r'\w+'</span>, read_file(<span class="string">'batch0.tab.txt'</span>).lower())</span><br><span class="line"><span class="comment">#print(A)</span></span><br><span class="line">print(len(A))</span><br><span class="line">print(len([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))</span><br><span class="line">print(<span class="number">4206</span>*<span class="number">2</span>)</span><br><span class="line">j=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A:</span><br><span class="line">    print(i,j)</span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line">print(len(A))</span><br></pre></td></tr></table></figure>



<p>​    我用的<a href="https://gitee.com/pengxiandyou/pengxiandyou/raw/master/src/resources/textfile/txt/batch0.tab.txt" target="_blank" rel="noopener">测试文件</a>是两个竖排的单词组，理论上应该是偶数才对，而且通过在线字数统计得出结果也可推断出问题了。</p>
<p><img src="https://i.loli.net/2020/03/30/B4YcnNIFeO1JDlQ.png" alt="情况1明偶却奇.PNG"></p>
<p>​    通过对相似单词检查奇偶性，发现<img src="https://i.loli.net/2020/03/30/ND1WmEITfQxh42H.png" alt="情况1问题位置.PNG">。</p>
<p>​    对比<a href="https://gitee.com/pengxiandyou/pengxiandyou/raw/master/src/resources/textfile/txt/batch0.tab.txt" target="_blank" rel="noopener">原文</a>，发现<img src="https://i.loli.net/2020/03/30/zDiC89jUcmxykAb.png" alt="情况1问题出处.PNG">。</p>
<p>​    </p>
<p>这说明对于含有 <font color=red size=5>‘</font> 的单词，代码并没有识别成一个。通过<code>\w’\w</code>对<a href="https://gitee.com/pengxiandyou/pengxiandyou/raw/master/src/resources/textfile/txt/big.txt" target="_blank" rel="noopener">语料库</a>和<a href="https://gitee.com/pengxiandyou/pengxiandyou/raw/master/src/resources/textfile/txt/batch0.tab.txt" target="_blank" rel="noopener">测试文件</a>的查找，也发现文本里有许多这种单词。对<code>A</code>（代码里的A）使用<code>\w&#39;\w</code>，也可说明代码没有把这种单词识别为一个单词。通过<code>A = re.findall(r&#39;\w+&#39;, read_file(&#39;batch0.tab.txt&#39;).lower())</code>更说明没有把这种单词识别为一个单词。</p>
<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>​    方案一： 使用<code>A = re.findall(r&#39;\w+\&#39;?\w+&#39;, read_file(&#39;batch0.tab.txt&#39;).lower())</code></p>
<p><img src="https://i.loli.net/2020/03/30/6xwmvfqk4UbozTM.png" alt="情况1问题解决.PNG"></p>
<h1 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h1><p>​    由于更改了规则，语言模型里有类似<code>can&#39;t</code>的单词，所以在字母替换时要注意<code>&#39;</code>，所以将<code>alphabeta=&#39;qwertyuiopasdfghjklzxcvbnm&#39;</code>更改为<code>alphabeta=&#39;qwertyuiopasdfghjklzxcvbnm\&#39;</code></p>
<h1 id="统计方式"><a href="#统计方式" class="headerlink" title="统计方式"></a>统计方式</h1><ol>
<li><a href="https://gitee.com/pengxiandyou/pengxiandyou/raw/master/src/resources/textfile/txt/batch0.tab.txt" target="_blank" rel="noopener">文本</a>里有两列，一列错误，一列期望结果。 （我觉得慢）</li>
<li><a href="http://norvig.com/spell-testset1.txt" target="_blank" rel="noopener">文本</a>好几行，一行第一个错误，其余期望结果。（我还可以接受）</li>
<li>使用<a href="http://norvig.com/spell-correct.html" target="_blank" rel="noopener">原作者</a>的方式，把原作者的的部分代码放入我的代码里修修补补。 （我还可以接受）</li>
</ol>
<h1 id="又发现新问题"><a href="#又发现新问题" class="headerlink" title="又发现新问题"></a>又发现新问题</h1><p>有的单词通过<code>-</code>连接成一个单词，可以通过<code>A = re.findall(r&#39;\w+-?\w+&#39;, read_file(&#39;batch0.tab.txt&#39;).lower())</code>。</p>
<p>其实对于<code>-</code>，<code>&#39;</code>应可以不考虑，因为这样的单词比较少。当然也可以改进，用<code>A = re.findall(r&#39;\w+\&#39;?-?\w+&#39;, read_file(&#39;batch0.tab.txt&#39;).lower())</code>.</p>
<p>或许还有其他类型的单词，但道理差不多。</p>
<h1 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h1><ol>
<li>python lambda：<a href="https://www.baidu.com/s?wd=python+lambda" target="_blank" rel="noopener">①</a>  <a href="https://www.runoob.com/python/python-functions.html" target="_blank" rel="noopener">②</a>  <a href="https://blog.csdn.net/Torres_10/article/details/87919964" target="_blank" rel="noopener">③</a></li>
<li>python from import <a href="https://www.baidu.com/s?wd=python+from+import" target="_blank" rel="noopener">①</a>  <a href="https://blog.csdn.net/qq_30815237/article/details/93203934" target="_blank" rel="noopener">②</a> </li>
<li>python if for <a href="https://www.baidu.com/s?&wd=python+if+for" target="_blank" rel="noopener">①</a>  <a href="https://blog.csdn.net/qq_21997625/article/details/85695876" target="_blank" rel="noopener">②</a>  <a href="https://www.cnblogs.com/huchong/p/9328687.html" target="_blank" rel="noopener">③</a></li>
<li>python set <a href="https://www.baidu.com/s?&wd=python+set" target="_blank" rel="noopener">①</a>  <a href="http://c.biancheng.net/view/4402.html" target="_blank" rel="noopener">②</a>  <a href="https://www.cnblogs.com/cyx-12/p/9234285.html" target="_blank" rel="noopener">③</a></li>
</ol>
<h1 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h1><ol>
<li>python 突然感觉挺有趣，挺好玩的。</li>
<li>这一次知识点感觉好多，好累啊。</li>
<li>如果以后做报表这类的或许会打算用python自动化。</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>虽然我的博客没人看，但后期大概率会通过一些手段（由于是静态页面，所以这个手段拦不住一些有心人，当然我也愿意给他看）把一些地方（比如代码）隐藏掉，时间过了再显示。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python  </span></span><br><span class="line"><span class="comment">#! -*- coding:utf-8 -*-  </span></span><br><span class="line"><span class="comment">#====#====#====#====  </span></span><br><span class="line"><span class="comment">#!@Author : px</span></span><br><span class="line"><span class="comment">#!@time   : 2020/3/26 16:08</span></span><br><span class="line"><span class="comment">#!@File   : 3-26-1</span></span><br><span class="line"><span class="comment">#====#====#====#===</span></span><br><span class="line"><span class="comment">#拼写纠正</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp=open(filename)</span><br><span class="line">        text=fp.read()</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(filename,<span class="string">"文件打开失败"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment">#print(text)</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"><span class="comment">#分词</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment">#1</span></span><br><span class="line">    <span class="comment">#A=re.findall('[a-z]+',text.lower())</span></span><br><span class="line">    <span class="comment">#2</span></span><br><span class="line">    A = re.findall(<span class="string">r'\w+\'?\w+'</span>, text.lower())</span><br><span class="line">    <span class="comment">#print(A)</span></span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"><span class="comment">#统计词频 语言模型训练</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(features)</span>:</span></span><br><span class="line">    <span class="comment">#初始化模型 得到默认字典 value=1</span></span><br><span class="line">    model=collections.defaultdict(<span class="keyword">lambda</span> :<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> features:</span><br><span class="line">        model[f]= model[f]+<span class="number">1</span></span><br><span class="line">    <span class="comment">#print("model: ",model)</span></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line">A=words(read_file(<span class="string">"big.txt"</span>))</span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment">#添加的</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">WORDS=Counter(A)</span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line">NWORDS=train(A)</span><br><span class="line"><span class="comment">#print(len(A))</span></span><br><span class="line">P=sum(NWORDS.values())</span><br><span class="line"><span class="comment">#print(NWORDS["the"],NWORDS["they"],NWORDS["that"])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判读单词是否在字典，错误则纠正</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">known</span><span class="params">(words)</span>:</span><span class="comment">#不在则返回空</span></span><br><span class="line">    <span class="keyword">return</span> (set(w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w <span class="keyword">in</span> NWORDS))</span><br><span class="line"></span><br><span class="line">alphabeta=<span class="string">'qwertyuiopasdfghjklzxcvbnm\''</span></span><br><span class="line"><span class="comment">#编辑距离为的可能单词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edist1</span><span class="params">(word)</span>:</span></span><br><span class="line">    n=len(word)</span><br><span class="line">    s1=[word[<span class="number">0</span>:i]+word[i+<span class="number">1</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment">#print(s1)#删除单词中的字母</span></span><br><span class="line">    s2=[word[<span class="number">0</span>:i]+word[i]+word[i+<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>)]</span><br><span class="line">    <span class="comment">#print(s2)# 单词字母错位</span></span><br><span class="line">    s3=[word[<span class="number">0</span>:i]+c+word[i+<span class="number">1</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> range(n) <span class="keyword">for</span> c <span class="keyword">in</span> alphabeta]</span><br><span class="line">    <span class="comment">#print(s3,len(s3))#字母替换</span></span><br><span class="line">    s4=[word[<span class="number">0</span>:i]+c+word[i:] <span class="keyword">for</span> i <span class="keyword">in</span> range(n) <span class="keyword">for</span> c <span class="keyword">in</span> alphabeta]</span><br><span class="line">    <span class="comment">#print(s4,len(s4))#字母插入</span></span><br><span class="line">    <span class="keyword">return</span> (set(s1+s2+s3+s4))</span><br><span class="line"><span class="comment">#编辑距离为2，递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edist2</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (set(e2 <span class="keyword">for</span> e1 <span class="keyword">in</span> edist1(word) <span class="keyword">for</span> e2 <span class="keyword">in</span> edist1(e1)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">known_edist2</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (set(e2 <span class="keyword">for</span> e1 <span class="keyword">in</span> edist1(word) <span class="keyword">for</span> e2 <span class="keyword">in</span> edist1(e1) <span class="keyword">if</span> e2 <span class="keyword">in</span> NWORDS))</span><br><span class="line"><span class="comment">#选择最大可能的单词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">correct</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="comment">#短路运算 candidates 列表</span></span><br><span class="line">    candidates=known([word]) <span class="keyword">or</span> known(edist1(word)) <span class="keyword">or</span> known(edist2(word)) <span class="keyword">or</span> [word]</span><br><span class="line">    <span class="keyword">return</span> max(candidates,key=<span class="keyword">lambda</span> w:NWORDS[w])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    batch0=read_file(<span class="string">'batch0.tab.txt'</span>)</span><br><span class="line">    batch0words=words(batch0)</span><br><span class="line">    print(len(batch0words),batch0words[<span class="number">0</span>],batch0words[<span class="number">1</span>])</span><br><span class="line">    con=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(batch0words)//<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> (correct(batch0words[<span class="number">2</span>*i]) == batch0words[<span class="number">2</span>*i+<span class="number">1</span>]):</span><br><span class="line">            con+=<span class="number">1</span></span><br><span class="line">            <span class="comment">#print("con",con)</span></span><br><span class="line">        <span class="comment">#print("i",i)</span></span><br><span class="line">    print(con/(len(batch0words)*<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file_lines</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fp=open(filename)</span><br><span class="line">        text=fp.readlines()</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(filename,<span class="string">"文件打开失败"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment">#print(text)</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count2</span><span class="params">()</span>:</span></span><br><span class="line">    con=<span class="number">0</span></span><br><span class="line">    words_line=read_file_lines(<span class="string">"3.txt"</span>)<span class="comment">#一排一排的记录</span></span><br><span class="line">    <span class="comment">#print(len(words_line),words_line[0],words_line[1])</span></span><br><span class="line">    <span class="keyword">for</span> linewords <span class="keyword">in</span> words_line:<span class="comment">#取一排</span></span><br><span class="line">        B=words(linewords)<span class="comment">#一排转换为单词列表</span></span><br><span class="line">        <span class="keyword">if</span> correct(B[<span class="number">0</span>]) <span class="keyword">in</span> B:</span><br><span class="line">            con+=<span class="number">1</span></span><br><span class="line">    print(con/len(words_line))</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"><span class="comment">#添加的</span></span><br><span class="line"><span class="comment">#将unit_test删除了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spelltest</span><span class="params">(tests, verbose=False)</span>:</span></span><br><span class="line">    <span class="string">"Run correction(wrong) on all (right, wrong) pairs; report results."</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    good, unknown = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    n = len(tests)</span><br><span class="line">    <span class="keyword">for</span> right, wrong <span class="keyword">in</span> tests:</span><br><span class="line">        w = correct(wrong)</span><br><span class="line">        good += (w == right)</span><br><span class="line">        <span class="keyword">if</span> w != right:</span><br><span class="line">            unknown += (right <span class="keyword">not</span> <span class="keyword">in</span> WORDS)</span><br><span class="line">            <span class="keyword">if</span> verbose:</span><br><span class="line">                print(<span class="string">'correction(&#123;&#125;) =&gt; &#123;&#125; (&#123;&#125;); expected &#123;&#125; (&#123;&#125;)'</span></span><br><span class="line">                      .format(wrong, w, WORDS[w], right, WORDS[right]))</span><br><span class="line">    dt = time.perf_counter() - start</span><br><span class="line">    print(<span class="string">'&#123;:.0%&#125; of &#123;&#125; correct (&#123;:.0%&#125; unknown) at &#123;:.0f&#125; words per second '</span></span><br><span class="line">          .format(good / n, n, unknown / n, n / dt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Testset</span><span class="params">(lines)</span>:</span></span><br><span class="line">    <span class="string">"Parse 'right: wrong1 wrong2' lines into [('right', 'wrong1'), ('right', 'wrong2')] pairs."</span></span><br><span class="line">    <span class="keyword">return</span> [(right, wrong)</span><br><span class="line">            <span class="keyword">for</span> (right, wrongs) <span class="keyword">in</span> (line.split(<span class="string">':'</span>) <span class="keyword">for</span> line <span class="keyword">in</span> lines)</span><br><span class="line">            <span class="keyword">for</span> wrong <span class="keyword">in</span> wrongs.split()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(unit_tests())</span></span><br><span class="line"><span class="comment"># spelltest(Testset(open('spell-testset1.txt')))  # Development set</span></span><br><span class="line"><span class="comment"># spelltest(Testset(open('spell-testset2.txt')))  # Final test set</span></span><br><span class="line"><span class="comment">############################</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        wrd=input(<span class="string">"输入单词"</span>)</span><br><span class="line">        print(<span class="string">"edist1: "</span>,known(edist1(wrd)))</span><br><span class="line">        print(<span class="string">"known_edist2: "</span>,known_edist2(wrd))</span><br><span class="line">        print(correct(wrd))</span><br><span class="line">        <span class="comment">#print()</span></span><br><span class="line">   <span class="comment"># print(unit_tests())#我删除了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># spelltest(Testset(open('spell-testset1.txt')))  # Development set</span></span><br><span class="line">    <span class="comment"># spelltest(Testset(open('spell-testset2.txt')))</span></span><br><span class="line">    <span class="comment"># wrd = input("输入单词")</span></span><br><span class="line">    <span class="comment"># print("edist1: ",known(edist1(wrd)))</span></span><br><span class="line">    <span class="comment"># print("known_edist2: ",known_edist2(wrd))</span></span><br><span class="line">    <span class="comment"># print(correct(wrd))</span></span><br><span class="line">    <span class="comment"># #count()</span></span><br><span class="line">    <span class="comment"># count2()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>算法分析与设计</category>
      </categories>
      <tags>
        <tag>算法分析与设计</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第一次上机代码</title>
    <url>/2019/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/experiment1/" target="_blank" rel="noopener" >报告</a></center>

<h1 id="一般合并"><a href="#一般合并" class="headerlink" title="一般合并"></a>一般合并</h1><p>在顺序表里改写 利用原有功能写出  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表储存空间初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMRNT 10 <span class="comment">//线性表储存空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"></span><br><span class="line">					  <span class="comment">//线性表动态分配顺序储存结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;<span class="comment">//储存空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个空的表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	L-&gt;elem = (ElemType*)__vcrt_malloc_normal(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!(L-&gt;elem))</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配失败</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">	L-&gt;listsize = LIST_INIT_SIZE;<span class="comment">//容量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">	ElemType* q = &amp;(L-&gt;elem[i - <span class="number">1</span>]), *p = <span class="literal">NULL</span>;<span class="comment">// q为插入位置</span></span><br><span class="line">	<span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">		* (p + <span class="number">1</span>) = *p;<span class="comment">// 插入位置及之后的元素后移</span></span><br><span class="line">	*q = e;<span class="comment">// 插入e</span></span><br><span class="line">	++(L-&gt;length);<span class="comment">// 表长增加1</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == L-&gt;listsize) &#123;</span><br><span class="line">		ElemType*  newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		L-&gt;elem = newbase;<span class="comment">// 新基址</span></span><br><span class="line">		L-&gt;listsize += LISTINCREMRNT;<span class="comment">// 增加存储容量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过索引取值</span></span><br><span class="line"><span class="function">ElemType <span class="title">getElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;elem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过值取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndexByElem</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; L-&gt;length; ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((L-&gt;elem[j]) == e)</span><br><span class="line">			<span class="keyword">return</span> j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">myPrintf</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span>&lt;&lt; i + <span class="number">1</span>&lt;&lt;<span class="string">"个值------------"</span> &lt;&lt; (L-&gt;elem[i])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建表</span></span><br><span class="line"><span class="function">Status <span class="title">creatList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;(L-&gt;length));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入为 %d\n"</span>, L-&gt;length);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; L-&gt;elem[i];</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function">Status <span class="title">mergeList</span><span class="params">(SqList* LA,SqList* LB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (LA-&gt;length &lt; LB-&gt;length) &#123;</span><br><span class="line">		SqList* temp;</span><br><span class="line">		temp = LA;</span><br><span class="line">		LA = LB;</span><br><span class="line">		LB = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LB-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ElemType e = getElemByIndex(LB,i+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (getIndexByElem(LA, e)==<span class="number">-1</span>) &#123;</span><br><span class="line">			ListInsert(LA, <span class="number">1</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"合并后\n"</span>);</span><br><span class="line">	myPrintf(LA);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	SqList* LA = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(LA);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入表A的长度\n"</span>);</span><br><span class="line">	creatList(LA);</span><br><span class="line">	myPrintf(LA);</span><br><span class="line">	SqList* LB = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(LB);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入表B的长度\n"</span>);</span><br><span class="line">	creatList(LB);</span><br><span class="line">	myPrintf(LB);</span><br><span class="line"></span><br><span class="line">	mergeList(LA, LB);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="有序集合链式合并"><a href="#有序集合链式合并" class="headerlink" title="有序集合链式合并"></a>有序集合链式合并</h1><p>同样改写单链表 用了原有功能实现  改写了一个查找 可以忽略无序的单链表 相同的元素也会插入  不过可以根据写一个代码改改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line">					   <span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	(*L)-&gt;data = <span class="number">0</span>;</span><br><span class="line">	(*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">isEmpty</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (*L)-&gt;next == <span class="literal">NULL</span> ? <span class="string">"空"</span> : <span class="string">"不空"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = *L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		++i;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认头插法建表</span></span><br><span class="line"><span class="function">Status <span class="title">creatListHead</span><span class="params">(LinkList* L , ElemType str[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p;</span><br><span class="line">	(*L)-&gt;data = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		p-&gt;data = str[i];</span><br><span class="line">		p-&gt;next = (*L)-&gt;next;</span><br><span class="line">		(*L)-&gt;next = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认尾插法建表 </span></span><br><span class="line"><span class="function">Status <span class="title">creatListEnd</span><span class="params">(LinkList* L, ElemType str[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p, r = *L;</span><br><span class="line"></span><br><span class="line">	(*L)-&gt;data = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		p-&gt;data = str[i];</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//必须要否则遍历异常</span></span><br><span class="line">		r-&gt;next = p;</span><br><span class="line">		r = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">traversalList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">insertList</span><span class="params">(LinkList* L, <span class="keyword">int</span> i, ElemType c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || (i &gt; (*L)-&gt;data || i &lt; <span class="number">1</span>))<span class="keyword">return</span> ERROR;</span><br><span class="line">	LinkList p = *L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//定在前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	q-&gt;data = c;</span><br><span class="line">	q-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = q;</span><br><span class="line">	(*L)-&gt;data++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByIndex</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//if (L == NULL || (i &gt; (L)-&gt;data || i &lt; 1))return NULL;</span></span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line"></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//	p = p-&gt;next;</span></span><br><span class="line">	<span class="keyword">return</span> (p);<span class="comment">//前一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByElem</span><span class="params">(LinkList L, ElemType c,<span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;p-&gt;next-&gt;data != c)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	*i = j + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> p-&gt;next; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function">Status <span class="title">mergeList</span><span class="params">(LinkList* LA, LinkList* LB )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getLength(LA)&gt;getLength(LB))</span><br><span class="line">	&#123;</span><br><span class="line">		LinkList* temp=LA;</span><br><span class="line">		LA = LB;</span><br><span class="line">		LB = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	ElemType e;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= getLength(LA); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		 e = getListByIndex(*LA, i)-&gt;next-&gt;data;<span class="comment">//取元素</span></span><br><span class="line">		<span class="comment">//printf("___%d\n", e);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= getLength(LB); i++)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">//	printf("___---%d\n", i);</span></span><br><span class="line">			<span class="keyword">if</span> (getListByIndex(*LB, i)-&gt;next-&gt;data&gt;e)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//printf("_----__%d\n", i);</span></span><br><span class="line">				insertList(LB, i, e);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"合并后: "</span>);</span><br><span class="line">	traversalList(*LB);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ElemType stra[<span class="number">4</span>] = &#123; <span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">11</span> &#125;;</span><br><span class="line">	ElemType strb[<span class="number">7</span>] = &#123; <span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">20</span> &#125;;</span><br><span class="line">	LinkList LA,LB;</span><br><span class="line">	initList(&amp;LA);</span><br><span class="line">	initList(&amp;LB);</span><br><span class="line">	creatListEnd(&amp;LA, stra,<span class="keyword">sizeof</span>(stra)/<span class="keyword">sizeof</span>(stra[<span class="number">0</span>]));</span><br><span class="line">	creatListEnd(&amp;LB, strb, <span class="keyword">sizeof</span>(strb) / <span class="keyword">sizeof</span>(strb[<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"表LA: "</span>);</span><br><span class="line">	traversalList(LA);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"表LB: "</span>);</span><br><span class="line">	traversalList(LB);</span><br><span class="line">	mergeList(&amp;LA, &amp;LB);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="一元稀疏多项式加法"><a href="#一元稀疏多项式加法" class="headerlink" title="一元稀疏多项式加法"></a>一元稀疏多项式加法</h1><p>改写上面的合并 实现两个稀疏多项式相加 同时不会插入相同的元素 同时添加了计算的功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line">					  <span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType conf;<span class="comment">//系数</span></span><br><span class="line">	ElemType expn;<span class="comment">//指数</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	(*L)-&gt;conf = <span class="number">-1</span>;</span><br><span class="line">	(*L)-&gt;expn = <span class="number">-1</span>;</span><br><span class="line">	(*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">isEmpty</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (*L)-&gt;next == <span class="literal">NULL</span> ? <span class="string">"空"</span> : <span class="string">"不空"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = *L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		++i;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认尾插法建表 </span></span><br><span class="line"><span class="function">Status <span class="title">creatListEnd</span><span class="params">(LinkList* L, ElemType c[], ElemType e[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p, r = *L;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		p-&gt;conf = c[i];</span><br><span class="line">		p-&gt;expn = e[i];</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//必须要否则遍历异常</span></span><br><span class="line">		r-&gt;next = p;</span><br><span class="line">		r = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">traversalList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;conf&gt;=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"+%fx%f"</span>, p-&gt;conf,p-&gt;expn);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%fx%f"</span>, p-&gt;conf, p-&gt;expn);</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">insertList</span><span class="params">(LinkList* L, <span class="keyword">int</span> i, ElemType c, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || (i &gt; getLength(L) || i &lt; <span class="number">1</span>))<span class="keyword">return</span> ERROR;</span><br><span class="line">	LinkList p = *L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//定在前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	q-&gt;conf = c;</span><br><span class="line">	q-&gt;expn = e;</span><br><span class="line">	q-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = q;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByIndex</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//if (L == NULL || (i &gt; (L)-&gt;data || i &lt; 1))return NULL;</span></span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;j&lt;i - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line"></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//	p = p-&gt;next;</span></span><br><span class="line">	<span class="keyword">return</span> (p);<span class="comment">//前一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode* <span class="title">getListByElem</span><span class="params">(LinkList L, ElemType e, <span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p&amp;&amp;p-&gt;next-&gt;expn != e)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;<span class="comment">//前一个</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	*i = j + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> p-&gt;next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">calculateMultinomial</span><span class="params">(LinkList L, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList p = L-&gt;next;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = p-&gt;conf*<span class="built_in">pow</span>(x, p-&gt;expn)+sum;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function">Status <span class="title">mergeList</span><span class="params">(LinkList* LA, LinkList* LB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getLength(LA)&gt;getLength(LB))</span><br><span class="line">	&#123;</span><br><span class="line">		LinkList* temp = LA;</span><br><span class="line">		LA = LB;</span><br><span class="line">		LB = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	ElemType e,c;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= getLength(LA); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		e = getListByIndex(*LA, i)-&gt;next-&gt;expn;<span class="comment">//取指数</span></span><br><span class="line">		c = getListByIndex(*LA, i)-&gt;next-&gt;conf;<span class="comment">//取系数</span></span><br><span class="line">		<span class="comment">//先指数相同</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= getLength(LB); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (getListByIndex(*LB, i)-&gt;next-&gt;expn==e)</span><br><span class="line">			&#123;</span><br><span class="line">				getListByIndex(*LB, i)-&gt;next-&gt;conf =getListByIndex(*LB, i)-&gt;next-&gt;conf + c;<span class="comment">//系数相加</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//指数不同</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= getLength(LB); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (getListByIndex(*LB, i)-&gt;expn&lt;e&amp;&amp;getListByIndex(*LB, i)-&gt;next-&gt;expn&gt;e)</span><br><span class="line">			&#123;</span><br><span class="line">				insertList(LB, i, c, e);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"多项式相加后: "</span>);</span><br><span class="line">	traversalList(*LB);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入x的值 "</span>);</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"答案为 %f\n\n"</span>, calculateMultinomial(*LB, x));</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ElemType ac[<span class="number">4</span>] = &#123; <span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span> &#125;;<span class="comment">//系数</span></span><br><span class="line">	ElemType ae[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">17</span> &#125;;<span class="comment">//指数</span></span><br><span class="line">	</span><br><span class="line">	ElemType bc[<span class="number">3</span>] = &#123; <span class="number">8</span>,<span class="number">22</span>,<span class="number">-9</span>&#125;;</span><br><span class="line">	ElemType be[<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">	LinkList LA, LB;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	initList(&amp;LA);</span><br><span class="line">	initList(&amp;LB);</span><br><span class="line">	creatListEnd(&amp;LA, ac,ae,<span class="number">4</span> );</span><br><span class="line">	creatListEnd(&amp;LB, bc, be, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"多项式LA: "</span>);</span><br><span class="line">	traversalList(LA);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入x的值 "</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"答案为 %f\n\n"</span>, calculateMultinomial(LA, x));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"多项式LB: "</span>);</span><br><span class="line">	traversalList(LB);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入x的值 "</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"答案为 %f\n\n"</span>, calculateMultinomial(LB, x));</span><br><span class="line"></span><br><span class="line">	mergeList(&amp;LA, &amp;LB);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="附加-有序集合的顺序合并"><a href="#附加-有序集合的顺序合并" class="headerlink" title="附加 有序集合的顺序合并"></a>附加 有序集合的顺序合并</h1><p>可以忽略短的无序集合 不会插入相同的元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表储存空间初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMRNT 10 <span class="comment">//线性表储存空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"></span><br><span class="line">					  <span class="comment">//线性表动态分配顺序储存结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;<span class="comment">//储存空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个空的表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	L-&gt;elem = (ElemType*)__vcrt_malloc_normal(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!(L-&gt;elem))</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配失败</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">	L-&gt;listsize = LIST_INIT_SIZE;<span class="comment">//容量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">	ElemType* q = &amp;(L-&gt;elem[i - <span class="number">1</span>]), *p = <span class="literal">NULL</span>;<span class="comment">// q为插入位置</span></span><br><span class="line">	<span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">		* (p + <span class="number">1</span>) = *p;<span class="comment">// 插入位置及之后的元素后移</span></span><br><span class="line">	*q = e;<span class="comment">// 插入e</span></span><br><span class="line">	++(L-&gt;length);<span class="comment">// 表长增加1</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == L-&gt;listsize) &#123;</span><br><span class="line">		ElemType*  newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		L-&gt;elem = newbase;<span class="comment">// 新基址</span></span><br><span class="line">		L-&gt;listsize += LISTINCREMRNT;<span class="comment">// 增加存储容量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过索引取值</span></span><br><span class="line"><span class="function">ElemType <span class="title">getElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;elem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过值取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndexByElem</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; L-&gt;length; ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((L-&gt;elem[j]) == e)</span><br><span class="line">			<span class="keyword">return</span> j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">myPrintf</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span>&lt;&lt; i + <span class="number">1</span>&lt;&lt;<span class="string">"个值------------"</span> &lt;&lt; (L-&gt;elem[i])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建表</span></span><br><span class="line"><span class="function">Status <span class="title">creatList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;(L-&gt;length));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入为 %d\n"</span>, L-&gt;length);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; L-&gt;elem[i];</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function">Status <span class="title">mergeList</span><span class="params">(SqList* LA,SqList* LB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (LA-&gt;length &lt; LB-&gt;length) &#123;</span><br><span class="line">		SqList* temp;</span><br><span class="line">		temp = LA;</span><br><span class="line">		LA = LB;</span><br><span class="line">		LB = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LB-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ElemType e = getElemByIndex(LB,i+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (getIndexByElem(LA, e)==<span class="number">-1</span>) &#123;</span><br><span class="line">			ListInsert(LA, <span class="number">1</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"合并后\n"</span>);</span><br><span class="line">	myPrintf(LA);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	SqList* LA = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(LA);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入表A的长度\n"</span>);</span><br><span class="line">	creatList(LA);</span><br><span class="line">	myPrintf(LA);</span><br><span class="line">	SqList* LB = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(LB);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入表B的长度\n"</span>);</span><br><span class="line">	creatList(LB);</span><br><span class="line">	myPrintf(LB);</span><br><span class="line"></span><br><span class="line">	mergeList(LA, LB);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第二次上机代码</title>
    <url>/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/src/work/DataStructure/experiment2/" target="_blank" rel="noopener">报告</a></center>
# 进制转换

<p>简易版本：不考虑了负数 输入要大于0 进制数不要大于10</p>
<p><a href="https://pengxiandyou.gitee.io/src/code/BaseConversion/" target="_blank" rel="noopener">高级版本（点击）</a>：报告上交后发出 可以负数 任意进制</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50 <span class="comment">//容量 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line">					   <span class="comment">//顺序结构储存</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base;</span><br><span class="line">	ElemType* top;</span><br><span class="line">	<span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">	f, t</span><br><span class="line">&#125;Bool;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;base = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">	S-&gt;stacksize = MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function">Bool <span class="title">isEmpty</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;base == S-&gt;top ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top - S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">Status <span class="title">pushElem</span><span class="params">(SqStack* S, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getLength(S) == S-&gt;stacksize)<span class="keyword">return</span> ERROR;</span><br><span class="line">	*(S-&gt;top) = e;</span><br><span class="line">	S-&gt;top++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">ElemType <span class="title">popElem</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S))<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	S-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> *(S-&gt;top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取栈顶</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!isEmpty(S))<span class="keyword">return</span> *(S-&gt;top - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进制转换</span></span><br><span class="line"><span class="function">Status <span class="title">conversion</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack* S = <span class="keyword">new</span> SqStack;</span><br><span class="line">	initStack(S);</span><br><span class="line">	<span class="keyword">while</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		pushElem(S, n%k);</span><br><span class="line">		n = n / k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!isEmpty(S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, popElem(S));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!(n &gt; <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入需要转换的数(大于0)： "</span>);</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!(k&gt;=<span class="number">2</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入进制数（例如 2且大于2）"</span>);</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">	&#125;</span><br><span class="line">	conversion(n, k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h1><p>简易版本：输出移动步骤</p>
<p><a href="https://pengxiandyou.gitee.io/src/code/HanoiTowerAnimation/" target="_blank" rel="noopener">高级版本(点击)</a>：报告上交后发出 输出移动画面（如果能力足够）</p>
<p>层数不要太高 电脑不行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c -&gt; %c\n"</span>, A, C);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		hanoi(n - <span class="number">1</span>, A, C, B);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c -&gt; %c\n"</span>, A, C);</span><br><span class="line">		hanoi(n - <span class="number">1</span>, B, A, C);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!(n &gt; <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入汉罗塔层数的数(大于0)： "</span>);</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	hanoi(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h1><p>逻辑和书差不多 不过改了一些 暂时不能细说  <a href="https://pengxiandyou.gitee.io/src/code/BaseConversion/" target="_blank" rel="noopener">改进版本(点击)</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50 <span class="comment">//容量 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"><span class="comment">//顺序结构储存</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base;</span><br><span class="line">	ElemType* top;</span><br><span class="line">	<span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">	f, t</span><br><span class="line">&#125;Bool;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;base = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!S-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">	S-&gt;stacksize = MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function">Bool <span class="title">isEmpty</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;base == S-&gt;top ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;top - S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">Status <span class="title">pushElem</span><span class="params">(SqStack* S, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getLength(S) == S-&gt;stacksize)<span class="keyword">return</span> ERROR;</span><br><span class="line">	*(S-&gt;top) = e;</span><br><span class="line">	S-&gt;top++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">ElemType <span class="title">popElem</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S))<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	S-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> *(S-&gt;top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取栈顶</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!isEmpty(S))<span class="keyword">return</span> *(S-&gt;top - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空栈</span></span><br><span class="line"><span class="function">Status <span class="title">cleanStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匹配括号</span></span><br><span class="line"><span class="function">Status <span class="title">matchBrackets</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入英文状态下的括号，可复制 ()&#123;&#125;[]，以#结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	<span class="keyword">while</span> (ch!=<span class="string">'#'</span>&amp;&amp;flag)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">			pushElem(S, ch);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">			<span class="keyword">if</span> (!isEmpty(S)&amp;&amp;getTop(S)==<span class="string">'('</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				popElem(S);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; ch&lt;&lt;<span class="string">"输入错误，匹配"</span>&lt;&lt;i &lt;&lt;<span class="string">" ( 失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">			<span class="keyword">if</span> (!isEmpty(S) &amp;&amp; getTop(S) == <span class="string">'&#123;'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				popElem(S);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="string">"输入错误，匹配"</span> &lt;&lt; i &lt;&lt; <span class="string">" &#123; 失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">			<span class="keyword">if</span> (!isEmpty(S) &amp;&amp; getTop(S) == <span class="string">'['</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				popElem(S);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="string">"输入错误，匹配"</span> &lt;&lt; i &lt;&lt; <span class="string">" ] 失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">			 <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入非法内容\n"</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++i;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S) &amp;&amp; flag)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"匹配成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"匹配失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		cleanStack(S); <span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack* S = <span class="keyword">new</span> SqStack;</span><br><span class="line">    initStack(S);</span><br><span class="line">	matchBrackets(S);<span class="comment">//演示一排输入</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"第二次匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	matchBrackets(S);<span class="comment">//演示一次输一个</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"第三次匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	matchBrackets(S);<span class="comment">//演示括号匹配错误</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"第四次匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	matchBrackets(S);<span class="comment">//演示输入错误内容</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="舞伴"><a href="#舞伴" class="headerlink" title="舞伴"></a>舞伴</h1><p>不细说 <a href="https://pengxiandyou.gitee.io/src/download/open/DancePartner/" target="_blank" rel="noopener">文件下载（点击）</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; //定义读写已命名文件的类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt; //多定义的类型则用于读写存储在内存中的string对象</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50 <span class="comment">//容量 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"> <span class="comment">//循环队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base;</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">	f, t</span><br><span class="line">&#125;Bool;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">initQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q-&gt;base = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!Q-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> OVERFLOW;</span><br><span class="line">	&#125;</span><br><span class="line">	Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function">Bool <span class="title">isEmpty</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q-&gt;front == Q-&gt;rear ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否满</span></span><br><span class="line"><span class="function">Bool <span class="title">isFull</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front ? t : f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队 </span></span><br><span class="line"><span class="function">Status <span class="title">enQueue</span><span class="params">(SqQueue* Q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isFull(Q))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	Q-&gt;base[Q-&gt;rear] = e;</span><br><span class="line">	Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">ElemType <span class="title">deQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(Q))<span class="keyword">return</span> ERROR;</span><br><span class="line">	ElemType e = Q-&gt;base[Q-&gt;front];</span><br><span class="line">	Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取队头</span></span><br><span class="line"><span class="function">ElemType <span class="title">getHead</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!isEmpty(Q))<span class="keyword">return</span> Q-&gt;base[Q-&gt;front];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读文件  </span></span><br><span class="line">	<span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">"D:\\桌面\\舞伴.csv"</span>, ios::in)</span></span>;<span class="comment">//inFile来自fstream,ifstream为输入文件流(从文件读入)</span></span><br><span class="line">	<span class="built_in">string</span> lineStr;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; strArray;</span><br><span class="line">	<span class="keyword">while</span> (getline(inFile, lineStr)) <span class="comment">//getline来自sstream</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//存成二维表结构</span></span><br><span class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;<span class="comment">//来自sstream</span></span><br><span class="line">		<span class="built_in">string</span> str;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; lineArray;</span><br><span class="line">		<span class="comment">//按照逗号分隔</span></span><br><span class="line">		<span class="keyword">while</span> (getline(ss, str, <span class="string">','</span>))</span><br><span class="line">			lineArray.push_back(str);<span class="comment">//一行数据以vector</span></span><br><span class="line">		strArray.push_back(lineArray);<span class="comment">//每一行vector数据都放到strArray中去</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出结果</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strArray.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;strArray[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; strArray[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	SqQueue* QM = <span class="keyword">new</span> SqQueue; initQueue(QM);</span><br><span class="line">	SqQueue* QW = <span class="keyword">new</span> SqQueue; initQueue(QW);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strArray.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;strArray[i].<span class="built_in">size</span>()<span class="number">-1</span> ; j++)</span><br><span class="line">		&#123; </span><br><span class="line">			<span class="keyword">if</span> (<span class="string">"男"</span>== strArray[i][j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				enQueue(QM, strArray[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"女"</span> == strArray[i][j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				enQueue(QW, strArray[i][j]);</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> ((!isEmpty(QM))&amp;&amp;(!isEmpty(QW)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; k &lt;&lt; deQueue(QM) &lt;&lt; <span class="string">"    和\t"</span> &lt;&lt; deQueue(QW) &lt;&lt; <span class="string">" 跳舞"</span> &lt;&lt; <span class="built_in">endl</span>; k++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(QM))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; getHead(QW) &lt;&lt; <span class="string">" 等待下一次匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(QW))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; getHead(QM) &lt;&lt; <span class="string">" 等待下一次匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第五次上机代码</title>
    <url>/2019/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/src/work/DataStructure/experiment5/" target="_blank" rel="noopener">报告</a></center>

<h1 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMRNT 10 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;<span class="comment">//储存空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//初始化一个空的表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L-&gt;elem = (ElemType*)__vcrt_malloc_normal(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!(L-&gt;elem))</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配失败</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">	L-&gt;listsize = LIST_INIT_SIZE;<span class="comment">//容量</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	ElemType* q = &amp;(L-&gt;elem[i - <span class="number">1</span>]), *p = <span class="literal">NULL</span>;<span class="comment">// q为插入位置</span></span><br><span class="line">	<span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">		* (p + <span class="number">1</span>) = *p;<span class="comment">// 插入位置及之后的元素后移</span></span><br><span class="line">	*q = e;<span class="comment">// 插入e</span></span><br><span class="line">	++(L-&gt;length);<span class="comment">// 表长增加1</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == L-&gt;listsize) &#123;</span><br><span class="line">		ElemType*  newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		L-&gt;elem = newbase;<span class="comment">// 新基址</span></span><br><span class="line">		L-&gt;listsize += LISTINCREMRNT;<span class="comment">// 增加存储容量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">myPrintf</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"个值------------"</span> &lt;&lt; (L-&gt;elem[i]) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_SS</span><span class="params">(SqList* L,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;L-&gt;length ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[i]==e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序查找所有</span></span><br><span class="line"><span class="function">Status <span class="title">Search_SS_ALL</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;L-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[i] == e)</span><br><span class="line">		&#123;</span><br><span class="line">			k++;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//折半查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low = <span class="number">0</span>, high = L-&gt;length - <span class="number">1</span>,mid=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (<span class="keyword">int</span>)<span class="built_in">floor</span>(low*<span class="number">0.5</span> + high*<span class="number">0.5</span>);</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[mid]==e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;elem[mid]&gt;e)</span><br><span class="line">		&#123;</span><br><span class="line">			high = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			low = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分块查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_BS</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> high = L-&gt;length<span class="number">-1</span>, low = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n = L-&gt;length;</span><br><span class="line">	<span class="keyword">int</span> k = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(L-&gt;length);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (e==L-&gt;elem[<span class="number">0</span>+i*k])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span> + i*k + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (e&gt;L-&gt;elem[<span class="number">0</span>+i*k])</span><br><span class="line">		&#123;</span><br><span class="line">			low = <span class="number">0</span> + i*k;</span><br><span class="line">			high = <span class="number">0</span> + (i + <span class="number">1</span>)*k - <span class="number">1</span> &gt; L-&gt;length - <span class="number">1</span> ? L-&gt;length - <span class="number">1</span> : <span class="number">0</span> + (i + <span class="number">1</span>)*k - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (<span class="keyword">int</span>)<span class="built_in">floor</span>(low*<span class="number">0.5</span> + high*<span class="number">0.5</span>);</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[mid] == e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;elem[mid]&gt;e)</span><br><span class="line">		&#123;</span><br><span class="line">			high = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			low = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空缓冲区的一行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myclear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">cin</span>.ignore(numeric_limits&lt;<span class="built_in">std</span>::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function">Status <span class="title">mysort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; L-&gt;length-i<span class="number">-1</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (L-&gt;elem[k] &gt; L-&gt;elem[k + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				L-&gt;elem[k] = L-&gt;elem[k]^L-&gt;elem[k+<span class="number">1</span>];</span><br><span class="line">				L-&gt;elem[k + <span class="number">1</span>] = L-&gt;elem[k] ^ L-&gt;elem[k + <span class="number">1</span>];</span><br><span class="line">				L-&gt;elem[k] = L-&gt;elem[k] ^ L-&gt;elem[k + <span class="number">1</span>];;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* L = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入插入个数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ElemType e = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">		ListInsert(L, i+<span class="number">1</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入结果为:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入查找元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"顺序查找到元素位置 "</span> &lt;&lt; Search_SS(L, e)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"顺序查找到元素位置有 "</span>; Search_SS_ALL(L, e);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入查找元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"顺序查找到元素位置 "</span> &lt;&lt; Search_SS(L, e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"顺序查找到元素位置有 "</span>; Search_SS_ALL(L, e);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"折半查找需有序,排序后:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	mysort(L);</span><br><span class="line">	myPrintf(L); </span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入查找元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"折半查找到元素位置 "</span> &lt;&lt; Search_Bin(L, e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"分块查找到元素位置 "</span> &lt;&lt; Search_BS(L, e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入查找元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; e;</span><br><span class="line">	myclear();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"折半查找到元素位置 "</span> &lt;&lt; Search_Bin(L, e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"分块查找到元素位置 "</span> &lt;&lt; Search_BS(L, e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BST_Node</span> &#123;</span></span><br><span class="line">	DataType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BST_Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BST_T, *BST_P;</span><br><span class="line"><span class="comment">/*//插入</span></span><br><span class="line"><span class="comment">void InsertBST(BST_T *T, DataType data)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	if (!T)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		BST_P S = new BST_Node;</span></span><br><span class="line"><span class="comment">		S-&gt;data = data;</span></span><br><span class="line"><span class="comment">		S-&gt;lchild = S-&gt;rchild = NULL;</span></span><br><span class="line"><span class="comment">		T = S;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else if (data&lt;T-&gt;data)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		InsertBST(T-&gt;lchild, data);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else if (data&gt;T-&gt;data)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		InsertBST(T-&gt;rchild, data);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">BST_P <span class="title">Search_BST</span><span class="params">(BST_P root, DataType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (key &gt; root-&gt;data) <span class="comment">//查找右子树  </span></span><br><span class="line">		<span class="keyword">return</span> Search_BST(root-&gt;rchild, key);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; root-&gt;data) <span class="comment">//查找左子树  </span></span><br><span class="line">		<span class="keyword">return</span> Search_BST(root-&gt;lchild, key);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_BST</span><span class="params">(BST_P *root, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化插入节点</span></span><br><span class="line">	BST_P p = (BST_P)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct BST_Node));</span><br><span class="line">	<span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">	p-&gt;data = data;</span><br><span class="line">	p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//空树时，直接作为根节点</span></span><br><span class="line">	<span class="keyword">if</span> (*root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*root = p;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//是否存在，已存在则返回，不插入</span></span><br><span class="line">	<span class="keyword">if</span> (Search_BST(*root, data) != <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//进行插入，首先找到要插入的位置的父节点</span></span><br><span class="line">	BST_P tnode = <span class="literal">NULL</span>, troot = *root;</span><br><span class="line">	<span class="keyword">while</span> (troot)</span><br><span class="line">	&#123;</span><br><span class="line">		tnode = troot;</span><br><span class="line">		troot = (data &lt; troot-&gt;data) ? troot-&gt;lchild : troot-&gt;rchild;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (data &lt; tnode-&gt;data)</span><br><span class="line">		tnode-&gt;lchild = p;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tnode-&gt;rchild = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BST_P *T, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Insert_BST(T, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MidOrderTraverse</span><span class="params">(BST_P T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T)</span><br><span class="line">	&#123;</span><br><span class="line">		MidOrderTraverse(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		MidOrderTraverse(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">17</span>,<span class="number">12</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">25</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">22</span> &#125;;</span><br><span class="line">	BST_P root = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"数据为: "</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CreateBST(&amp;root, arr, <span class="number">12</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"创建后中序遍历: "</span>;</span><br><span class="line">	MidOrderTraverse(root);</span><br><span class="line">	<span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n输入查找元素: "</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">	BST_P result = Search_BST(root, data);</span><br><span class="line">	<span class="keyword">if</span> (result)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"数据为: "</span> &lt;&lt; result-&gt;data &lt;&lt; <span class="string">"地址为: "</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"未查询到,插入后遍历:"</span> ;</span><br><span class="line">		Insert_BST(&amp;root, data);</span><br><span class="line">		MidOrderTraverse(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n输入查找元素: "</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">	 result = Search_BST(root, data);</span><br><span class="line">	<span class="keyword">if</span> (result)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"数据为: "</span> &lt;&lt; result-&gt;data &lt;&lt; <span class="string">"地址为: "</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"未查询到,插入后遍历:"</span> ;</span><br><span class="line">		Insert_BST(&amp;root, data);</span><br><span class="line">		MidOrderTraverse(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNSUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASHSIZE 12  <span class="comment">//定义哈希表长为数组的长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULLKEY -32768</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> *elem;  <span class="comment">//数据元素存储的基址，动态分配数组</span></span><br><span class="line">	<span class="keyword">int</span> count;</span><br><span class="line">&#125;HashTable;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitHashTable</span><span class="params">(HashTable *H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	m = HASHSIZE;</span><br><span class="line">	H-&gt;count = m;</span><br><span class="line">	H-&gt;elem = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(m * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		H-&gt;elem[i] = NULLKEY;</span><br><span class="line">	<span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hash函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> key % m; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertHash_1</span><span class="params">(HashTable *H, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> addr = Hash(key); </span><br><span class="line">	<span class="keyword">while</span> (H-&gt;elem[addr] != NULLKEY) </span><br><span class="line">		addr = (addr + <span class="number">1</span>) % m;</span><br><span class="line">	H-&gt;elem[addr] = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertHash_2</span><span class="params">(HashTable *H, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> addr = Hash(key);</span><br><span class="line">	<span class="keyword">while</span> (H-&gt;elem[addr] != NULLKEY)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			addr = (addr + (<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">int</span>)(k/<span class="number">2</span>),<span class="number">2</span>)) % m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			addr = (addr - (<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">int</span>)(k / <span class="number">2</span>), <span class="number">2</span>)) % m;</span><br><span class="line">		&#125;</span><br><span class="line">		++i;</span><br><span class="line">		++k;</span><br><span class="line">	&#125;</span><br><span class="line">	H-&gt;elem[addr] = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">Status <span class="title">SearchHash_1</span><span class="params">(HashTable H, <span class="keyword">int</span> key, <span class="keyword">int</span> *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*addr = Hash(key);  </span><br><span class="line">	<span class="keyword">while</span> (H.elem[*addr] != key) </span><br><span class="line">	&#123;</span><br><span class="line">		*addr = (*addr + <span class="number">1</span>) % m;  </span><br><span class="line">		<span class="keyword">if</span> (H.elem[*addr] == NULLKEY || *addr == Hash(key))</span><br><span class="line">			<span class="keyword">return</span> UNSUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">Status <span class="title">SearchHash_2</span><span class="params">(HashTable H, <span class="keyword">int</span> key, <span class="keyword">int</span> *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	*addr = Hash(key);</span><br><span class="line">	<span class="keyword">while</span> (H.elem[*addr] != key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			*addr = (*addr + (<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">int</span>)(k / <span class="number">2</span>), <span class="number">2</span>)) % m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			*addr = (*addr - (<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">int</span>)(k / <span class="number">2</span>), <span class="number">2</span>)) % m;</span><br><span class="line">			<span class="keyword">if</span> (*addr&lt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				*addr = <span class="built_in">abs</span>(*addr);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++i;</span><br><span class="line">		++k;</span><br><span class="line">		<span class="keyword">if</span> (H.elem[*addr] == NULLKEY || *addr == Hash(key))</span><br><span class="line">			<span class="keyword">return</span> UNSUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">	HashTable H;</span></span><br><span class="line"><span class="comment">	HashTable HH;</span></span><br><span class="line"><span class="comment">	int key=0;</span></span><br><span class="line"><span class="comment">	int addr = 0;</span></span><br><span class="line"><span class="comment">	InitHashTable(&amp;H);</span></span><br><span class="line"><span class="comment">	InitHashTable(&amp;HH);</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "线性探测处理冲突"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入12个数:" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 12; i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">		InsertHash_1(&amp;H, key);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "插入结果:" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 12; i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; H.elem[i] &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">	&#125;cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入查找元素:";</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">	printf("%s", SearchHash_1(H, key, &amp;addr) == SUCCESS ? "查找成功\n" : "查找不成功\n");</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入查找元素:";</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">	printf("%s", SearchHash_1(H, key, &amp;addr) == SUCCESS ? "查找成功\n" : "查找不成功\n");</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "------------------------------------------" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "二次探测处理冲突" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入12个数:" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 12; i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">		InsertHash_2(&amp;HH, key);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "插入结果:" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 12; i++)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; HH.elem[i] &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">	&#125;cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入查找元素:";</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">	printf("%s", SearchHash_2(HH, key, &amp;addr) == SUCCESS ? "查找成功\n" : "查找不成功\n");</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "输入查找元素:";</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; key;</span></span><br><span class="line"><span class="comment">	printf("%s", SearchHash_2(HH, key, &amp;addr) == SUCCESS ? "查找成功\n" : "查找不成功\n");*/</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *(a<span class="number">-1</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第六次上机代码</title>
    <url>/2019/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<hr/>
<center><a href="https://pengxiandyou.gitee.io/src/work/DataStructure/experiment6/" target="_blank" rel="noopener">报告</a></center>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1 <span class="comment">//通过</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0 <span class="comment">//错误 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2 <span class="comment">//堆栈溢出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表储存空间初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMRNT 10 <span class="comment">//线性表储存空间的分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status; <span class="comment">//函数类型,其值为状态码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//抽象数据类型</span></span><br><span class="line"> <span class="comment">//线性表动态分配顺序储存结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;<span class="comment">//储存空间基址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">	<span class="keyword">int</span> listsize;<span class="comment">//当前分配的存储容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1初始化一个空的表</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	L-&gt;elem = (ElemType*)__vcrt_malloc_normal(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!(L-&gt;elem))</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配失败</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;<span class="comment">//长度</span></span><br><span class="line">	L-&gt;listsize = LIST_INIT_SIZE;<span class="comment">//容量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">	ElemType* q = &amp;(L-&gt;elem[i - <span class="number">1</span>]), *p = <span class="literal">NULL</span>;<span class="comment">// q为插入位置</span></span><br><span class="line">	<span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">		* (p + <span class="number">1</span>) = *p;<span class="comment">// 插入位置及之后的元素后移</span></span><br><span class="line">	*q = e;<span class="comment">// 插入e</span></span><br><span class="line">	++(L-&gt;length);<span class="comment">// 表长增加1</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == L-&gt;listsize) &#123;</span><br><span class="line">		ElemType*  newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMRNT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		L-&gt;elem = newbase;<span class="comment">// 新基址</span></span><br><span class="line">		L-&gt;listsize += LISTINCREMRNT;<span class="comment">// 增加存储容量</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">isEmtey</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;length == <span class="number">0</span> ? <span class="string">"空"</span> : <span class="string">"不空"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5清空</span></span><br><span class="line"><span class="function">Status <span class="title">clearList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__vcrt_free_normal(L-&gt;elem);</span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6摧毁</span></span><br><span class="line"><span class="function">Status <span class="title">destryList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	__vcrt_free_normal(L);</span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7通过索引取值</span></span><br><span class="line"><span class="function">ElemType <span class="title">getElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;elem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8通过值取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndexByElem</span><span class="params">(SqList* L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; L-&gt;length; ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((L-&gt;elem[j]) == e)</span><br><span class="line">			<span class="keyword">return</span> j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//9通过索引改值</span></span><br><span class="line"><span class="function">ElemType <span class="title">changeElemByIndex</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  L-&gt;elem[i - <span class="number">1</span>] = e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//11遍历表</span></span><br><span class="line"><span class="function">Status <span class="title">myPrintf</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,(L-&gt;elem[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证增序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[i]&gt;L-&gt;elem[i+<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建表</span></span><br><span class="line"><span class="function">SqList* <span class="title">createSqByCin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* L = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入数据："</span>;</span><br><span class="line">	ElemType elem = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; elem;</span><br><span class="line">		ListInsert(L, i + <span class="number">1</span>, elem);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"建表成功: "</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SqList* <span class="title">createSqByRandom</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* L = (SqList*)__vcrt_malloc_normal(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	ElemType elem = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		ListInsert(L, i + <span class="number">1</span>, rand()%<span class="number">100</span>+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"建表成功: "</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L);</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ElemType temp = L-&gt;elem[i];</span><br><span class="line">		<span class="keyword">for</span> (j= i<span class="number">-1</span>; j &gt;=<span class="number">0</span>&amp;&amp;L-&gt;elem[j]&gt;temp; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">		&#125;</span><br><span class="line">		L-&gt;elem[j + <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span>*(finish.QuadPart - start.QuadPart)/Freq &lt;&lt;<span class="string">" 微秒"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsert</span><span class="params">(SqList* L,<span class="keyword">int</span> dk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = dk; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		j = i - dk;</span><br><span class="line">		ElemType temp = L-&gt;elem[i];</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span> ( j &gt;= <span class="number">0</span> &amp;&amp; L-&gt;elem[j]&gt;temp)</span><br><span class="line">			&#123;</span><br><span class="line">				L-&gt;elem[j + dk] = L-&gt;elem[j];</span><br><span class="line">				j -= dk;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (j!=i-dk)</span><br><span class="line">			&#123;</span><br><span class="line">				L-&gt;elem[j + dk] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dk = getLength(L)/<span class="number">2</span>;</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	<span class="keyword">while</span> ( dk&gt;=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ShellInsert(L, dk);</span><br><span class="line">		dk = dk / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L);</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length&amp;&amp;flag==<span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length-i<span class="number">-1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (L-&gt;elem[j]&gt;L-&gt;elem[j+<span class="number">1</span>])<span class="comment">//不会异或相同数</span></span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j] ^ L-&gt;elem[j + <span class="number">1</span>];</span><br><span class="line">				L-&gt;elem[j] = L-&gt;elem[j] ^ L-&gt;elem[j + <span class="number">1</span>];</span><br><span class="line">				L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j] ^ L-&gt;elem[j + <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList* L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ElemType pivotkey = L-&gt;elem[low];</span><br><span class="line">	<span class="keyword">while</span> (low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (low&lt;high&amp;&amp;L-&gt;elem[high]&gt;=pivotkey)</span><br><span class="line">		&#123;</span><br><span class="line">			high--;</span><br><span class="line">		&#125;</span><br><span class="line">		L-&gt;elem[low] = L-&gt;elem[high];</span><br><span class="line">		<span class="keyword">while</span> (low&lt;high&amp;&amp;L-&gt;elem[low]&lt;=pivotkey)</span><br><span class="line">		&#123;</span><br><span class="line">			low++;</span><br><span class="line">		&#125;</span><br><span class="line">		L-&gt;elem[high] = L-&gt;elem[low];</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;elem[low] = pivotkey;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(SqList* L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> pivotloc = Partition(L, low, high);</span><br><span class="line">		QSort(L, low, pivotloc - <span class="number">1</span>);</span><br><span class="line">		QSort(L, pivotloc + <span class="number">1</span>, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L);</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	QSort(L, <span class="number">0</span>, length<span class="number">-1</span>);</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(L)<span class="number">-1</span>;</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> index = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span>  j = i+<span class="number">1</span>; j &lt;= length; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (L-&gt;elem[j] &lt; L-&gt;elem[index])</span><br><span class="line">			&#123;</span><br><span class="line">				index = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[index]!= L-&gt;elem[i])<span class="comment">//不会异或相同数 index !=i应该不需要了</span></span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;elem[index] = L-&gt;elem[index] ^ L-&gt;elem[i];</span><br><span class="line">			L-&gt;elem[i] = L-&gt;elem[index] ^ L-&gt;elem[i];</span><br><span class="line">			L-&gt;elem[index] = L-&gt;elem[index] ^ L-&gt;elem[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(ElemType elem[], <span class="keyword">int</span> i<span class="comment">/*第i个*/</span>, <span class="keyword">int</span> n<span class="comment">/*共n个*/</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">//提示：假设第i+1后面已经是堆，调整第i个</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="comment">//递归出口隐含在if里所以可以不写</span></span><br><span class="line">	<span class="comment">/*if (n&lt;=i)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		return;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">int</span> c1 = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> c2 = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">max</span> = i;</span><br><span class="line">	<span class="keyword">if</span> (c1&lt;n&amp;&amp;elem[c1]&gt;elem[<span class="built_in">max</span>])</span><br><span class="line">		<span class="built_in">max</span> = c1;</span><br><span class="line">	<span class="keyword">if</span> (c2&lt;n&amp;&amp;elem[c2]&gt;elem[<span class="built_in">max</span>])</span><br><span class="line">		<span class="built_in">max</span> = c2;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">max</span> != i)</span><br><span class="line">	&#123;<span class="comment">//三个if保证elem[i]!=elem[max]</span></span><br><span class="line">		elem[i] = elem[i] ^ elem[<span class="built_in">max</span>];</span><br><span class="line">		elem[<span class="built_in">max</span>] = elem[i] ^ elem[<span class="built_in">max</span>];</span><br><span class="line">		elem[i] = elem[i] ^ elem[<span class="built_in">max</span>];</span><br><span class="line">		heapify(elem, <span class="built_in">max</span>, n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatHeap</span><span class="params">(SqList* L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="comment">//提示：从最后非叶结点开始heapify建初堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lost_node = (n - <span class="number">1</span>) ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (lost_node<span class="number">-1</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		heapify(L-&gt;elem, i, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"创建的初堆："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = getLength(L);</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	CreatHeap(L,n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (L-&gt;elem[<span class="number">0</span>]!=L-&gt;elem[i])</span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;elem[i] = L-&gt;elem[i] ^ L-&gt;elem[<span class="number">0</span>];</span><br><span class="line">			L-&gt;elem[<span class="number">0</span>] = L-&gt;elem[i] ^ L-&gt;elem[<span class="number">0</span>];</span><br><span class="line">			L-&gt;elem[i] = L-&gt;elem[i] ^ L-&gt;elem[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		heapify(L-&gt;elem, <span class="number">0</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序(从上往下)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(ElemType elem[], <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ElemType *tmp = (ElemType *)<span class="built_in">malloc</span>((<span class="built_in">end</span> - start + <span class="number">1</span>) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">int</span> i = start;<span class="comment">// 第1个有序区的索引</span></span><br><span class="line">	<span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 第2个有序区的索引</span></span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">// 临时区域的索引</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= <span class="built_in">end</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( elem[i] &lt;= elem[j])</span><br><span class="line">			tmp[k++] = elem[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tmp[k++] = elem[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">		tmp[k++] = elem[i++];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (j &lt;= <span class="built_in">end</span>)</span><br><span class="line">		tmp[k++] = elem[j++];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">		 elem[start + i] = tmp[i];</span><br><span class="line">	<span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_up2down</span><span class="params">(ElemType elem[], <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (elem == <span class="literal">NULL</span> || start &gt;= <span class="built_in">end</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> mid = (<span class="built_in">end</span> + start) / <span class="number">2</span>;</span><br><span class="line">	merge_sort_up2down(elem, start, mid); <span class="comment">// 递归排序 elem[start...mid]</span></span><br><span class="line">	merge_sort_up2down(elem, mid + <span class="number">1</span>, <span class="built_in">end</span>); <span class="comment">// 递归排序 elem[mid+1...end]</span></span><br><span class="line">	Merge(elem, start, mid, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">end</span> = getLength(L) - <span class="number">1</span>;</span><br><span class="line">	_LARGE_INTEGER start, finish;</span><br><span class="line">	<span class="keyword">double</span> Freq;</span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	Freq = (<span class="keyword">double</span>)f.QuadPart;</span><br><span class="line">	QueryPerformanceCounter(&amp;start);</span><br><span class="line">	merge_sort_up2down(L-&gt;elem, <span class="number">0</span>, <span class="built_in">end</span>);</span><br><span class="line">	QueryPerformanceCounter(&amp;finish);</span><br><span class="line">	<span class="keyword">if</span> (verify(L))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"不通过"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">	myPrintf(L);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" 共用时： "</span> &lt;&lt; <span class="number">1000000</span> * (finish.QuadPart - start.QuadPart) / Freq &lt;&lt; <span class="string">" 微秒"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	destryList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模式一</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mode1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* Sq = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"进入模式一\n"</span></span><br><span class="line">		<span class="string">"1.插入排序\n"</span></span><br><span class="line">		<span class="string">"2.希尔排序\n"</span></span><br><span class="line">		<span class="string">"3.冒泡排序\n"</span></span><br><span class="line">		<span class="string">"4.快速排序\n"</span></span><br><span class="line">		<span class="string">"5.选择排序\n"</span></span><br><span class="line">		<span class="string">"6.堆排序\n"</span></span><br><span class="line">		<span class="string">"7.归并排序\n"</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'1'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"1、输入个数："</span>; Sq = createSqByCin(); InsertSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'2'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"2、输入个数："</span>; Sq = createSqByCin(); ShellSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'3'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"3、输入个数："</span>; Sq = createSqByCin(); BubbleSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'4'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"4、输入个数："</span>; Sq = createSqByCin(); QuickSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'5'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"5、输入个数："</span>; Sq = createSqByCin(); SelectSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'6'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"6、输入个数："</span>; Sq = createSqByCin(); HeapSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'7'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"7、输入个数："</span>; Sq = createSqByCin(); MergeSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模式二</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mode2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* Sq = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"进入模式二\n"</span></span><br><span class="line">	<span class="string">"1.插入排序\n"</span></span><br><span class="line">	<span class="string">"2.希尔排序\n"</span></span><br><span class="line">	<span class="string">"3.冒泡排序\n"</span></span><br><span class="line">	<span class="string">"4.快速排序\n"</span></span><br><span class="line">	<span class="string">"5.选择排序\n"</span></span><br><span class="line">	<span class="string">"6.堆排序\n"</span></span><br><span class="line">	<span class="string">"7.归并排序\n"</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'1'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"1、输入个数："</span>; Sq = createSqByRandom(); InsertSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'2'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"2、输入个数："</span>; Sq = createSqByRandom(); ShellSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'3'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"3、输入个数："</span>; Sq = createSqByRandom(); BubbleSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'4'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"4、输入个数："</span>; Sq = createSqByRandom(); QuickSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'5'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"5、输入个数："</span>; Sq = createSqByRandom(); SelectSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'6'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"6、输入个数："</span>; Sq = createSqByRandom(); HeapSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">'7'</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"7、输入个数："</span>; Sq = createSqByRandom(); MergeSort(Sq); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	SqList* Sq = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"选择模式：\n1.：输入模式\n2.：随机模式\n"</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'1'</span>:Mode1(); <span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'2'</span>:Mode2(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:system(<span class="string">"pause"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>作业</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>用阿里云服务器实现贴吧自动签到</title>
    <url>/2020/07/27/%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%B4%B4%E5%90%A7%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>​    平时几乎逛贴吧，又不水贴，所以等级基本不高。发帖问问题有要一点等级撑腰。当然可以拿来装B。</p>
<p>​    以前用过两个别人提供的签到服务，都需要提供Cookie，感觉不太可靠。当然，他们提供的服务我也没用多久。</p>
<h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><p>​    从<a href="https://blog.csdn.net/echizao1839/article/details/105490215" target="_blank" rel="noopener">利用阿里云的函数计算实现百度贴吧免费定时签到</a>复制python代码可以运行，但需要改成3一下的版本。</p>
<p>​    首先从<a href="https://www.python.org/" target="_blank" rel="noopener">官网</a>下载包安装。由于我不想卸载3的版本，所以通过添加PYTHON_HOME，然后在Path里引用。这样就可以通过修改PYTHON_HOME的值就可修改成想要用的版本。但最终我没改值，而是在命令行里使用2的版本运行程序。</p>
<p>​    此时又遇到库的问题。解决方式可以下载库，理论也可把3里下的库复制过来。我想节约空间就用命令<code>mklink /j &quot;D:\Python275\Lib\site-packages&quot; &quot;D:\Python\Lib\site-packages&quot;</code>进行联接（应该是软联接，不是快捷方式，需要前面的文件夹不存在）。这样就可以用3里面的库了。</p>
<p>​    总是在f处报<code>SyntaxError: invalid syntax</code>，但3正常，于是换成用format的。改了之后又报编码相关的错<code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 1-2: ordinal not in range(128)</code>。这回添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>

<p>就好，而且在服务器上也可以运行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="comment"># 数据</span></span><br><span class="line">    like_url = <span class="string">'https://tieba.baidu.com/mo/q/newmoindex?'</span></span><br><span class="line">    sign_url = <span class="string">'http://tieba.baidu.com/sign/add'</span></span><br><span class="line">    tbs = <span class="string">'自行寻找'</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html, */*; q=0.01'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'自行寻找'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'tieba.baidu.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://tieba.baidu.com/i/i/forum'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;</span><br><span class="line">    s = Session()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取关注的贴吧</span></span><br><span class="line">    bars = []</span><br><span class="line">    dic = s.get(like_url, headers=head).json()[<span class="string">'data'</span>][<span class="string">'like_forum'</span>]</span><br><span class="line">    <span class="keyword">for</span> bar_info <span class="keyword">in</span> dic:</span><br><span class="line">        bars.append(bar_info[<span class="string">'forum_name'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 签到</span></span><br><span class="line">    already_signed_code = <span class="number">1101</span></span><br><span class="line">    success_code = <span class="number">0</span></span><br><span class="line">    need_verify_code = <span class="number">2150040</span></span><br><span class="line">    already_signed = <span class="number">0</span></span><br><span class="line">    succees = <span class="number">0</span></span><br><span class="line">    failed_bar = []</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> n &lt; len(bars):</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        bar = bars[n]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">            <span class="string">'kw'</span>: bar,</span><br><span class="line">            <span class="string">'tbs'</span>: tbs</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = s.post(sign_url, data=data, headers=head)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"未能签到&#123;&#125;, 由于&#123;&#125;。"</span>.format(bar,e))</span><br><span class="line">            failed_bar.append(bar)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dic = r.json()</span><br><span class="line">        msg = dic[<span class="string">'no'</span>]</span><br><span class="line">        <span class="keyword">if</span> msg == already_signed_code:</span><br><span class="line">            already_signed += <span class="number">1</span>;</span><br><span class="line">            r = <span class="string">'已经签到过了!'</span></span><br><span class="line">        <span class="keyword">elif</span> msg == need_verify_code:</span><br><span class="line">            n -= <span class="number">1</span>;</span><br><span class="line">            r = <span class="string">'需要验证码，即将重试!'</span></span><br><span class="line">        <span class="keyword">elif</span> msg == success_code:</span><br><span class="line">            <span class="comment">#r = f"签到成功!你是第&#123;dic['data']['uinfo']['user_sign_rank']&#125;个签到的吧友,共签到&#123;dic['data']['uinfo']['total_sign_num']&#125;天。"</span></span><br><span class="line">            r = <span class="string">"签到成功!你是第&#123;&#125;个签到的吧友,共签到&#123;&#125;天。"</span>.format(dic[<span class="string">'data'</span>][<span class="string">'uinfo'</span>][<span class="string">'user_sign_rank'</span>],dic[<span class="string">'data'</span>][<span class="string">'uinfo'</span>][<span class="string">'total_sign_num'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = <span class="string">'未知错误!'</span> + dic[<span class="string">'error'</span>]</span><br><span class="line">        <span class="comment">#print("&#123;&#125;：&#123;&#125;".format(bar,r))</span></span><br><span class="line">        print(bar+<span class="string">":"</span>+r)</span><br><span class="line">        succees += <span class="number">1</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    l = len(bars)</span><br><span class="line">    failed = <span class="string">"\n失败列表："</span> + <span class="string">'\n'</span>.join(failed_bar) <span class="keyword">if</span> len(failed_bar) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    print(<span class="string">"共&#123;&#125;个吧，其中: &#123;&#125;个吧签到成功，&#123;&#125;个吧签到失败，&#123;&#125;个吧已经签到。&#123;&#125;"</span>.format(l,succees,len(failed_bar),already_signed,failed))</span><br><span class="line">handler()</span><br></pre></td></tr></table></figure>



<h1 id="服务器（LAMP环境）运行"><a href="#服务器（LAMP环境）运行" class="headerlink" title="服务器（LAMP环境）运行"></a>服务器（LAMP环境）运行</h1><ol>
<li><p>编写shell。因为要添加至定时任务，所以路径要写全。shell的文件在<code>/opt/corn/</code>下面，生成的文件也在这里。</p>
<div><div class="fold_hider"><div class="close hider_title">有bug的代码</div></div><div class="fold">
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">f_dir=$(date +%Y)</span><br><span class="line">s_dir=$(date +%m)</span><br><span class="line">t_dir=$(date +%d)</span><br><span class="line">num=1</span><br><span class="line">r_dir=/opt/cron</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹</span></span><br><span class="line">if [ ! -d $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125; ];then</span><br><span class="line">	mkdir -p $&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line">	var1='log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'执行创建'+$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="built_in">echo</span> 1</span></span><br><span class="line">else</span><br><span class="line">	var1='log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'已存在'+$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="built_in">echo</span> 2</span></span><br><span class="line">fi</span><br><span class="line">echo $&#123;var1&#125; &gt;&gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行python代码</span></span><br><span class="line">python /opt/cron/tieba2.py &gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;+$&#123;1:-$&#123;num&#125;&#125;.txt || echo 'log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'python运行失败' &gt;&gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;.log</span><br><span class="line"></span><br><span class="line">echo $&#123;f_dir&#125;+$&#123;s_dir&#125;+$&#123;t_dir&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为生成&lt;li&gt;&lt;/li&gt; 此处可把<span class="keyword">if</span>删掉，把下面的&gt;&gt;换成&gt;</span></span><br><span class="line">tmp=$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;'tmp'.txt</span><br><span class="line">if [ -f $&#123;tmp&#125; ];then</span><br><span class="line">	rm -rf $&#123;tmp&#125; &amp;&amp; echo 'log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'中间文件已存在-删除'+$&#123;tmp&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;+$&#123;1:-$&#123;num&#125;&#125;.txt | while read line;do</span><br><span class="line">	echo '&lt;li&gt;'$&#123;line&#125;'&lt;/li&gt;' &gt;&gt; $&#123;tmp&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拼接html</span></span><br><span class="line">cat /opt/cron/head.txt &gt; /var/www/html/index.html</span><br><span class="line">cat $&#123;tmp&#125; &gt;&gt; /var/www/html/index.html</span><br><span class="line">cat /opt/cron/tail.txt &gt;&gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">echo 'done'</span><br></pre></td></tr></table></figure>

</div></div>

<p>代码在跨月时，可能会出问题，可设计多运行几次。下面的代码稍微改了点，还是有问题，不改了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">f_dir=$(date +%Y)</span><br><span class="line">s_dir=$(date +%m)</span><br><span class="line">t_dir=$(date +%d)</span><br><span class="line">num=1</span><br><span class="line">r_dir=/opt/cron</span><br><span class="line">echo $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125; &gt; $&#123;r_dir&#125;/daily.log</span><br><span class="line">if [ ! -d $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125; ];then</span><br><span class="line">	mkdir -p $&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line">	var1='log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'执行创建'+$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="built_in">echo</span> 1</span></span><br><span class="line">else</span><br><span class="line">	var1='log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'已存在'+$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"><span class="built_in">echo</span> 2</span></span><br><span class="line">fi</span><br><span class="line">echo $&#123;var1&#125; &gt;&gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;.log</span><br><span class="line">python /opt/cron/tieba2.py &gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;+$&#123;1:-$&#123;num&#125;&#125;.txt || echo 'log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'python运行失败' &gt;&gt; $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;.log</span><br><span class="line"></span><br><span class="line">echo $&#123;f_dir&#125;+$&#123;s_dir&#125;+$&#123;t_dir&#125;</span><br><span class="line"></span><br><span class="line">tmp=$&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;'tmp'.txt</span><br><span class="line">if [ -f $&#123;tmp&#125; ];then</span><br><span class="line">	rm -rf $&#123;tmp&#125; &amp;&amp; echo 'log'$&#123;1:-$&#123;num&#125;&#125;+$(date +%H-%M-%S)+'中间文件已存在-删除'+$&#123;tmp&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat $&#123;r_dir&#125;/$&#123;f_dir&#125;/$&#123;s_dir&#125;/$&#123;t_dir&#125;+$&#123;1:-$&#123;num&#125;&#125;.txt | while read line;do</span><br><span class="line">	echo '&lt;li&gt;'$&#123;line&#125;'&lt;/li&gt;' &gt;&gt; $&#123;tmp&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cat /opt/cron/head.txt &gt; /var/www/html/index.html</span><br><span class="line">echo '&lt;li&gt;'$&#123;f_dir&#125;+$&#123;s_dir&#125;+$&#123;t_dir&#125;'&lt;li&gt;' &gt;&gt; /var/www/html/index.html</span><br><span class="line">cat $&#123;tmp&#125; &gt;&gt; /var/www/html/index.html</span><br><span class="line">cat /opt/cron/tail.txt &gt;&gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">echo 'done'</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>如果需要多次执行生成不同的文件，要传入数字，表示第几次执行。</p>
</li>
<li><p>有设计日志，出问题可看。</p>
</li>
<li><p>拼接的html很简单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>贴吧每日签到<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">       body &#123;</span><br><span class="line">           text-align: center</span><br><span class="line">       &#125;</span><br><span class="line">       div &#123;</span><br><span class="line">        width: auto;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-id">#fdiv</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">           margin: 0 auto;</span><br><span class="line">           height: 1700px;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascrip"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fdiv"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"tb"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--此处分割为两个文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要网页有较多功能，比如再执行一边。可自行设计。由于我前段时间看过<a href="https://www.bilibili.com/video/BV15b411e71u" target="_blank" rel="noopener">尚学堂杨淑娟老师-手写服务器</a>，代码也有，所以修改修改再添加点，最后打包，就应该可以放到服务器里运行了。</p>
</li>
<li><p>服务器到期后可放到阿里、腾讯、百度的函数计算上。个人推荐百度的，因为有免费1G的外网流量。leancloud也可应该。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>记录</category>
        <category>懒惰记录</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>贴吧</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>自己实现一个native方法</title>
    <url>/2021/01/25/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAnative%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol>
<li><p>Windows专业版</p>
</li>
<li><p>java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面</span><br><span class="line">λ java -version</span><br><span class="line">java version &quot;1.8.0_191&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_191-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br></pre></td></tr></table></figure>
</li>
<li><p>gcc——mingw-w64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面</span><br><span class="line">λ gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC&#x3D;gcc</span><br><span class="line">COLLECT_LTO_WRAPPER&#x3D;D:&#x2F;mingw-w64&#x2F;mingw64&#x2F;bin&#x2F;..&#x2F;libexec&#x2F;gcc&#x2F;x86_64-w64-mingw32&#x2F;8.1.0&#x2F;lto-wrapper.exe</span><br><span class="line">Target: x86_64-w64-mingw32</span><br><span class="line">Configured with: ..&#x2F;..&#x2F;..&#x2F;src&#x2F;gcc-8.1.0&#x2F;configure --host&#x3D;x86_64-w64-mingw32 --build&#x3D;x86_64-w64-mingw32 --target&#x3D;x86_64-w64-mingw32 --prefix&#x3D;&#x2F;mingw64 --with-sysroot&#x3D;&#x2F;c&#x2F;mingw810&#x2F;x86_64-810-posix-seh-rt_v6-rev0&#x2F;mingw64 --enable-shared --enable-static --disable-multilib --enable-languages&#x3D;c,c++,fortran,lto --enable-libstdcxx-time&#x3D;yes --enable-threads&#x3D;posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking&#x3D;release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch&#x3D;nocona --with-tune&#x3D;core2 --with-libiconv --with-system-zlib --with-gmp&#x3D;&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static --with-mpfr&#x3D;&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static --with-mpc&#x3D;&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static --with-isl&#x3D;&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static --with-pkgversion&#x3D;&#39;x86_64-posix-seh-rev0, Built by MinGW-W64 project&#39; --with-bugurl&#x3D;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;mingw-w64 CFLAGS&#x3D;&#39;-O2 -pipe -fno-ident -I&#x2F;c&#x2F;mingw810&#x2F;x86_64-810-posix-seh-rt_v6-rev0&#x2F;mingw64&#x2F;opt&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-zlib-static&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static&#x2F;include&#39; CXXFLAGS&#x3D;&#39;-O2 -pipe -fno-ident -I&#x2F;c&#x2F;mingw810&#x2F;x86_64-810-posix-seh-rt_v6-rev0&#x2F;mingw64&#x2F;opt&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-zlib-static&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static&#x2F;include&#39; CPPFLAGS&#x3D;&#39; -I&#x2F;c&#x2F;mingw810&#x2F;x86_64-810-posix-seh-rt_v6-rev0&#x2F;mingw64&#x2F;opt&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-zlib-static&#x2F;include -I&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static&#x2F;include&#39; LDFLAGS&#x3D;&#39;-pipe -fno-ident -L&#x2F;c&#x2F;mingw810&#x2F;x86_64-810-posix-seh-rt_v6-rev0&#x2F;mingw64&#x2F;opt&#x2F;lib -L&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-zlib-static&#x2F;lib -L&#x2F;c&#x2F;mingw810&#x2F;prerequisites&#x2F;x86_64-w64-mingw32-static&#x2F;lib &#39;</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmder 191012 </p>
<p>默认是<code>GBK</code>编译，切换<code>utf-8</code>，可用<code>chcp 65001</code>，切换回来用<code>chcp 936</code>。</p>
<p>在编译运行java，可以尝试<code>-encoding</code>，不会写的话，就百度或者去翻自己的ide。</p>
<p>在编译dll是，可用<code>-fexec-charset=gbk -finput-charset=utf-8</code>。</p>
<p>我不在dll里打印中文信息，就统一<code>GBK</code>了，如果要换成<code>uft8</code>，我会崩溃的。</p>
</li>
</ol>
<h1 id="一、编写TestNative-java并编译"><a href="#一、编写TestNative-java并编译" class="headerlink" title="一、编写TestNative.java并编译"></a>一、编写<code>TestNative.java</code>并编译</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNative</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="comment">//要写绝对路径</span></span><br><span class="line">		<span class="comment">//System.load("TestNative.dll");</span></span><br><span class="line">		System.loadLibrary(<span class="string">"TestNative"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">getYouHeart</span><span class="params">(String msg)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.println(getYouHeart(args[<span class="number">0</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面                                                 </span><br><span class="line">λ javac TestNative.java                               </span><br><span class="line">                                                      </span><br><span class="line">D:\桌面                                                 </span><br><span class="line">λ dir | find &quot;TestNative&quot;                             </span><br><span class="line">2021&#x2F;01&#x2F;25  20:05               451 TestNative.class  </span><br><span class="line">2021&#x2F;01&#x2F;25  20:03               201 TestNative.java</span><br></pre></td></tr></table></figure>



<h1 id="二、使用javah生成-h文件"><a href="#二、使用javah生成-h文件" class="headerlink" title="二、使用javah生成.h文件"></a>二、使用<code>javah</code>生成<code>.h</code>文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面                                                 </span><br><span class="line">λ javah -jni TestNative                               </span><br><span class="line">                                                      </span><br><span class="line">D:\桌面                                                 </span><br><span class="line">λ dir | find &quot;TestNative&quot;                             </span><br><span class="line">2021&#x2F;01&#x2F;25  20:05               451 TestNative.class  </span><br><span class="line">2021&#x2F;01&#x2F;25  20:11               436 TestNative.h      </span><br><span class="line">2021&#x2F;01&#x2F;25  20:03               201 TestNative.java</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;下面是生成的<code>TestNative.h</code>,不要随意修改。如果java里的方法没变，基本上生成一次就够了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class TestNative */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_TestNative</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_TestNative</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     TestNative</span></span><br><span class="line"><span class="comment"> * Method:    getYouHeart</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_TestNative_getYouHeart</span><br><span class="line">  (JNIEnv *, jclass, jstring);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<h1 id="三、编写-c文件"><a href="#三、编写-c文件" class="headerlink" title="三、编写.c文件"></a>三、编写<code>.c</code>文件</h1><p>&emsp;&emsp;由于我使用指定的路径总是出问题，于是就在编译时指定了。</p>
<p>&emsp;&emsp;实现相应的方法就可。</p>
<p>&emsp;&emsp;我的文件名<code>TestNative.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//总是出奇怪的问题</span></span><br><span class="line"><span class="comment">//#include &lt;D:/JAVA/8u191/JDK/include/jni.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;D:/JAVA/8u191/JDK/include/win32/jni_md.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jni.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jni_md.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TestNative.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_TestNative_getYouHeart</span><br><span class="line">  (JNIEnv* env, jclass obj, jstring msg)&#123;</span><br><span class="line">  	<span class="keyword">const</span> <span class="keyword">char</span>* msg_char = (*env)-&gt;GetStringUTFChars(env, msg, <span class="number">0</span>);</span><br><span class="line">  	<span class="comment">/*在gbk下乱码，在utf8其他地方乱码*/</span></span><br><span class="line">  	<span class="comment">//printf("你说：%s\n", msg_char);</span></span><br><span class="line">  	<span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(msg_char , <span class="string">"我爱你"</span>))&#123;</span><br><span class="line">  		<span class="comment">//printf("%s\n", msg_char);</span></span><br><span class="line">  		<span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"我知道你的心意，我也爱你"</span>);</span><br><span class="line"></span><br><span class="line">  	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"你可知道我的心意？"</span>);</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="comment">//老有问题</span></span><br><span class="line">  	<span class="comment">//(*env)-&gt;ReleaseStringUTFChars(msg,msg_char);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h1 id="四、编译TestNative-c生成TestNative-dll"><a href="#四、编译TestNative-c生成TestNative-dll" class="headerlink" title="四、编译TestNative.c生成TestNative.dll"></a>四、编译<code>TestNative.c</code>生成<code>TestNative.dll</code></h1><p>&emsp;&emsp;<code>-I</code>后面是头文件是搜索路径，为<code>${JAVA_HOME}</code>下的<code>include</code>和<code>include/win32</code>。</p>
<p>&emsp;&emsp;<code>-o</code>是指定输出文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面</span><br><span class="line">λ gcc -o TestNative.dll -shared TestNative.c -I &quot;D:&#x2F;JAVA&#x2F;8u191&#x2F;JDK&#x2F;include&#x2F;&quot; -I &quot;D:&#x2F;JAVA&#x2F;8u191&#x2F;JDK&#x2F;include&#x2F;win32&#x2F;&quot;</span><br></pre></td></tr></table></figure>



<h1 id="五、运行-class文件"><a href="#五、运行-class文件" class="headerlink" title="五、运行.class文件"></a>五、运行<code>.class</code>文件</h1><p>&emsp;&emsp;先前最简单的方式，在<code>.c</code>里打印一下。 此时乱码的原因是因为<code>cmder</code>的编码是<code>GBK</code>。用<code>chcp 65001</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面</span><br><span class="line">λ javac TestNative.java</span><br><span class="line"></span><br><span class="line">D:\桌面</span><br><span class="line">λ java TestNative 我爱你</span><br><span class="line">p↑Fk</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;最后运行效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\桌面</span><br><span class="line">λ javac TestNative.java</span><br><span class="line"></span><br><span class="line">D:\桌面</span><br><span class="line">λ javah -jni TestNative</span><br><span class="line">&#x2F;&#x2F;记得编写.c文件</span><br><span class="line">D:\桌面</span><br><span class="line">λ  gcc -o TestNative.dll -shared TestNative.c -I &quot;D:&#x2F; JAVA&#x2F;8u191&#x2F;JDK&#x2F;include&#x2F;&quot; -I &quot;D:&#x2F;JAVA&#x2F;8u191&#x2F;JDK&#x2F;include&#x2F;win32&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">D:\桌面</span><br><span class="line">λ dir | find &quot;TestNative&quot;</span><br><span class="line">2021&#x2F;01&#x2F;26  11:31               813 TestNative.c</span><br><span class="line">2021&#x2F;01&#x2F;26  11:32               571 TestNative.class</span><br><span class="line">2021&#x2F;01&#x2F;26  11:32            48,029 TestNative.dll</span><br><span class="line">2021&#x2F;01&#x2F;25  21:54               456 TestNative.h</span><br><span class="line">2021&#x2F;01&#x2F;26  10:16               284 TestNative.java</span><br><span class="line"></span><br><span class="line">D:\桌面</span><br><span class="line">λ java TestNative 你爱我吗？</span><br><span class="line">你可知道我的心意？</span><br><span class="line"></span><br><span class="line">D:\桌面</span><br><span class="line">λ java TestNative 我爱你</span><br><span class="line">我知道你的心意，我也爱你</span><br></pre></td></tr></table></figure>





<h1 id="我想说"><a href="#我想说" class="headerlink" title="我想说"></a>我想说</h1><p>&emsp;&emsp;很就以前就知道有jni这个东西，当时好像是为了完成一个什么东西。这个东西用java写的话，我不会。如果用c写的话，我还可以挣扎一下。至于为什么放弃了，是因为当时看到jni的写法，感觉不会写。毕竟当时c学得不多和java理解得不多，虽然现在c也忘得差不多了。</p>
<p>&emsp;&emsp;对于dll——动态链接库，我是在一个pvz的外挂视频里了解到的。我当时应该是很想用c来写外挂。比较没读大学前就通过套路来破解安卓游戏。我现在还记得一些关键的东西，比如<code>onCreate</code>、<code>6000</code>。现在想要破解这些东西，要按照套路来已经很困难了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://blog.csdn.net/nimeghbia/article/details/70174269" target="_blank" rel="noopener">jstring</a></li>
<li><a href="https://blog.csdn.net/qq_37635373/article/details/101352301" target="_blank" rel="noopener">怎样自己实现一个native本地方法呢？</a></li>
<li><a href="https://www.cnblogs.com/szlbm/p/5504603.html" target="_blank" rel="noopener">自己实现一个Native方法的调用</a></li>
<li><a href="https://blog.csdn.net/torane/article/details/102981221" target="_blank" rel="noopener">[Java] 用C编写你自己的native方法</a></li>
<li><a href="https://www.cnblogs.com/alan666/p/8311984.html" target="_blank" rel="noopener">gcc -I -L -l区别</a></li>
<li><a href="https://www.cnblogs.com/siqi/p/4798444.html" target="_blank" rel="noopener">linux gcc头文件搜索路径</a></li>
<li><a href="https://blog.csdn.net/u011598031/article/details/85051242" target="_blank" rel="noopener">JNI基础之JNIEnv，jclass和jobject</a></li>
<li><a href="https://blog.csdn.net/a_thousand_miles/article/details/81125017" target="_blank" rel="noopener">02.JNIEnv和jclass,数据类型,访问java属性方法</a></li>
<li><a href="https://blog.csdn.net/xlxxcc/article/details/51106721" target="_blank" rel="noopener">JNI中string 、 char* 和 jstring 两种转换</a></li>
<li><a href="https://blog.csdn.net/jacke121/article/details/61419590" target="_blank" rel="noopener">char* 和jstring转换</a></li>
<li><a href="https://cloud.tencent.com/developer/ask/49921" target="_blank" rel="noopener">如何将jstring转换为char *？</a></li>
<li><a href="https://bbs.csdn.net/topics/320220343" target="_blank" rel="noopener">char类型与jstring类型的转换</a></li>
<li><a href="https://blog.csdn.net/xiuye2015/article/details/90112905" target="_blank" rel="noopener">Java JNI 创建字符串对象</a></li>
<li><a href="https://bbs.csdn.net/topics/390165867" target="_blank" rel="noopener">JNI中如何把char * 转化为jstring</a></li>
<li><a href="https://bbs.csdn.net/topics/390351378" target="_blank" rel="noopener">JNI char*转jstring乱码问题</a></li>
<li><a href="https://blog.csdn.net/yishifu/article/details/52180448" target="_blank" rel="noopener">JNI官方中文资料</a></li>
<li><a href="https://blog.csdn.net/yaosongyuan/article/details/9120013" target="_blank" rel="noopener">java编译UTF-8文件乱码的问题</a></li>
<li><a href="https://www.cnblogs.com/CodeWorkerLiMing/p/12503166.html" target="_blank" rel="noopener">GCC编译环境中文乱码解决方案</a></li>
</ol>
]]></content>
      <categories>
        <category>这算教程吧</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>c</tag>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次阿里云ECS的使用过程</title>
    <url>/2020/04/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91ECS%E7%9A%84%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="获取服务器"><a href="#获取服务器" class="headerlink" title="获取服务器"></a>获取服务器</h1><p>点击<a href="https://developer.aliyun.com/adc/student/" target="_blank" rel="noopener">链接</a>登录或注册，我是用的是支付宝登录，自行判断适合自己的方式。登录后需要实名认证和（大）学生认证，然后答题，然后每日8：00抢资格。选择自己合适的选项。速度要快、网络要好。</p>
<p>领取后放了很久没管，因为当时主要是为了搭建永恒的MC服务器，但流量主要是用来上网课，要节约。</p>
<h1 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h1><p>我主要修改了一下描述，重置了远程密码，创建了安全组。</p>
<p>添加了80、3389、3306、443、22，授权对象为0.0.0.0/0。</p>
<h1 id="XShell连接服务器"><a href="#XShell连接服务器" class="headerlink" title="XShell连接服务器"></a>XShell连接服务器</h1><p>我用的是通过ip和用户名、密码来连接的。网上也有密钥对的教程，<a href="https://help.aliyun.com/product/25365.html" target="_blank" rel="noopener">帮助文档</a>也有指导。</p>
<p>注意如果连不上要看一下端口哦。后期我也要换成密钥对的方式。</p>
<h1 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h1><ol>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install httpd</span><br><span class="line">&#x2F;&#x2F;注：我用的是centos7.0，所以是yum</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>相关命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start httpd &#x2F;&#x2F;启动Apache</span><br><span class="line">systemctl stop httpd &#x2F;&#x2F;停止apache</span><br><span class="line">systemctl restart httpd &#x2F;&#x2F;重启apache</span><br><span class="line">systemctl enable httpd &#x2F;&#x2F;设置apache开机启动</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>防火墙</li>
</ol>
<p>我因为顺利没有用到，自行查阅。</p>
<ol start="4">
<li>是否成功</li>
</ol>
<p>通过访问ip，可以反应。</p>
<h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><ol>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>是否成功</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart httpd.service &#x2F;&#x2F;重启Apache服务</span><br></pre></td></tr></table></figure>

<p>用vi、vim等等自己喜欢的方式在<code>/var/www/html</code>建一个文件，<code>index.html</code>、<code>index.php</code>、<code>info.php</code>等应该都是可以的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;如果页面空白或者是源代码 不要太担心。</span><br><span class="line">&#x2F;&#x2F;试试&lt;body&gt;随便&lt;&#x2F;body&gt;</span><br><span class="line">&#x2F;&#x2F;我当时因为一直这样，就各种改文件，重置了两次磁盘，当时真是气死了。</span><br><span class="line">&#x2F;&#x2F;后来换[教程](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;jxc321&#x2F;p&#x2F;8159631.html)就成功了。</span><br><span class="line">&#x2F;&#x2F;后面MySQL可以用下面的试试</span><br><span class="line">&lt;?php</span><br><span class="line">$link &#x3D; mysqli_connect(&#39;localhost&#39;, &#39;username&#39;, &#39;password&#39;);</span><br><span class="line">if (!$link) &#123;</span><br><span class="line">die(&#39;Could not connect: &#39; . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;Connected successfully&#39;;</span><br><span class="line">mysqli_close($link);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>访问ip/文件名看看</p>
<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><ol>
<li>下载安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">sudo yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装MySQL服务器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld &#x2F;&#x2F;运行MySQL</span><br><span class="line">sudo systemctl status mysqld &#x2F;&#x2F;查看运行状态</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log &#x2F;&#x2F;找出密码 低版本可以不需要密码</span><br><span class="line">mysql -u root-p 进入数据库</span><br><span class="line">&#x2F;&#x2F;修改密码 部分内容自行修改</span><br><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;New_Password&#39;; </span><br><span class="line">&#x2F;&#x2F;如果要修改简单密码，可以用下面的 低版本应该可以不用 再高版本命令部分可能不同 查看版本 select version();</span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;LOW;</span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;检查至少密码位数;</span><br><span class="line">&#x2F;&#x2F;至于编码，看需要</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>收尾</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除前面安装的yum respository</span><br><span class="line">sudo yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>远程连接</li>
</ol>
<p>我使用的是navicat，主机名是ip。远程连接最好新建一个用户，设置一些权限，设定一下范围。</p>
<p>如果一直连接不成功，可以看看端口。</p>
<p>我当时就是连不上，重置了磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">来自 https:&#x2F;&#x2F;www.cnblogs.com&#x2F;zhangjianqiang&#x2F;p&#x2F;10019809.html 感谢。</span><br><span class="line">1、本地环境</span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.22, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line">2、以root用户登录Mysql</span><br><span class="line"></span><br><span class="line">mysql -uroot -proot</span><br><span class="line">3、切换到mysql数据库</span><br><span class="line"></span><br><span class="line">use mysql</span><br><span class="line">4、添加用户</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;只允许指定ip连接</span><br><span class="line">create user &#39;新用户名&#39;@&#39;localhost&#39; identified by &#39;密码&#39;;</span><br><span class="line">&#x2F;&#x2F;允许所有ip连接（用通配符%表示）</span><br><span class="line">create user &#39;新用户名&#39;@&#39;%&#39; identified by &#39;密码&#39;;</span><br><span class="line">5、为新用户授权</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本格式如下</span><br><span class="line">grant all privileges on 数据库名.表名 to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; ;</span><br><span class="line">&#x2F;&#x2F;示例</span><br><span class="line">&#x2F;&#x2F;允许访问所有数据库下的所有表</span><br><span class="line">grant all privileges on *.* to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; ;</span><br><span class="line">&#x2F;&#x2F;指定数据库下的指定表</span><br><span class="line">grant all privileges on test.test to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; ;</span><br><span class="line">6、设置用户操作权限</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置用户拥有所有权限也就是管理员</span><br><span class="line">grant all privileges on *.* to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; WITH GRANT OPTION;</span><br><span class="line">&#x2F;&#x2F;拥有查询权限</span><br><span class="line">grant select on *.* to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; WITH GRANT OPTION;</span><br><span class="line">&#x2F;&#x2F;其它操作权限说明,select查询 insert插入 delete删除 update修改</span><br><span class="line">&#x2F;&#x2F;设置用户拥有查询插入的权限</span><br><span class="line">grant select,insert on *.* to &#39;新用户名&#39;@&#39;指定ip&#39; identified by &#39;新用户密码&#39; WITH GRANT OPTION;</span><br><span class="line">&#x2F;&#x2F;取消用户查询的查询权限</span><br><span class="line">REVOKE select ON what FROM &#39;新用户名&#39;;</span><br><span class="line">7、删除用户</span><br><span class="line"></span><br><span class="line">DROP USER username@localhost;</span><br><span class="line">8、修改后刷新权限</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>后期问题</li>
</ol>
<p>过来一两天，mysql连不上，报 ……（2）的错误，一通改报……（40）的错误、重置，也是换了<a href="https://www.cnblogs.com/jxc321/p/8159631.html" target="_blank" rel="noopener">教程</a>才好，目前问题还为重复出现，等待。</p>
<h1 id="Java安装"><a href="#Java安装" class="headerlink" title="Java安装"></a>Java安装</h1><p>看<a href="https://blog.csdn.net/renfufei/article/details/52621034#commentBox" target="_blank" rel="noopener">这个</a>，我觉得不错，也是跟这个安装的。</p>
<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>不要使用这个<a href="https://www.cnblogs.com/skkip/p/9998112.html" target="_blank" rel="noopener">教程</a></p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ol>
<li>感谢阿里云</li>
<li>感谢各个博主</li>
</ol>
<h1 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h1><ol>
<li><a href="https://blog.csdn.net/renfufei/article/details/52621034#commentBox" target="_blank" rel="noopener">如何查找YUM 安装的 JAVA_HOME</a></li>
<li><a href="https://blog.csdn.net/weixin_43708900/article/details/89179653" target="_blank" rel="noopener">关于MYSQL重装后/var/lib/mysql无文件的解决方法</a></li>
<li><a href="https://www.cnblogs.com/summer-cool/p/3959699.html" target="_blank" rel="noopener">启动mysql时显示：/tmp/mysql.sock 不存在的解决方法</a></li>
<li><a href="https://blog.liangjinjin.cn/?p=823" target="_blank" rel="noopener">/var/lib/mysql/mysql.sock错误的解决办法</a></li>
<li><a href="https://blog.csdn.net/hexinghua0126/article/details/79641341" target="_blank" rel="noopener">CentOS下MySQL安装失败,报socket ‘/tmp/mysql.sock错误解决方法</a></li>
<li>不推荐<a href="https://www.cnblogs.com/skkip/p/9998112.html" target="_blank" rel="noopener">Linux服务器上搭建Centos7.0+Apache+php+Mysql网站</a></li>
<li>推荐<a href="https://www.cnblogs.com/jxc321/p/8159631.html" target="_blank" rel="noopener">CentOS7安装配置Apache、PHP和MySQL INSTALL CENTOS7 to configure Apache, PHP, and Mysql</a></li>
<li><a href="https://www.cnblogs.com/yvanBk/p/9711500.html" target="_blank" rel="noopener">远程登录Linux（Ubuntu）环境下的mysql 时，如果直接在工具中创建数据库，会出现1044-Access denied for user ‘root’@’%’ to database ‘lc_db’ 错误</a></li>
<li><a href="https://www.cnblogs.com/zhangjianqiang/p/10019809.html" target="_blank" rel="noopener">Mysql添加用户与授权</a></li>
<li><a href="https://blog.csdn.net/hello_world_qwp/article/details/79551789" target="_blank" rel="noopener">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</a></li>
</ol>
<h1 id="部分次要参考"><a href="#部分次要参考" class="headerlink" title="部分次要参考"></a>部分次要参考</h1><ol>
<li><p><a href="https://jingyan.baidu.com/article/7082dc1c67c369e40a89bde5.html" target="_blank" rel="noopener">怎么在centos下使用yum安装java</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/6e7d6bc90833" target="_blank" rel="noopener">centos服务器上部署java</a></p>
</li>
<li><p><a href="https://blog.51cto.com/13043516/2108728" target="_blank" rel="noopener">Centos7部署JAVA环境</a></p>
</li>
<li><p><a href="https://blog.csdn.net/yao22yao/article/details/54646004" target="_blank" rel="noopener">centos服务器上部署javaweb项目</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/vinic-xxm/p/11825691.html" target="_blank" rel="noopener">centos安装java</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/lxblog0615/p/6274230.html" target="_blank" rel="noopener">访问mysql出现“Access denied for user root@localhost”（using password：NO）解决方案</a></p>
</li>
<li><p><a href="http://blog.sina.com.cn/s/blog_1539133510102xmlb.html" target="_blank" rel="noopener">ERROR2002(HY000):CantconnecttolocalMySQLserverthroughsocket/var/lib/mysql/mysq</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/heyongboke/p/9876345.html" target="_blank" rel="noopener">查看mysql的版本号</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>记录</category>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>阿里云</tag>
        <tag>服务器</tag>
        <tag>ECS</tag>
        <tag>Apache</tag>
        <tag>php</tag>
        <tag>Java</tag>
        <tag>Linux</tag>
        <tag>Centos7.0</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技能竞赛搭建流程大致计划v2.1</title>
    <url>/2020/07/23/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%A4%A7%E8%87%B4%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol>
<li><p>根据选拔赛说明，极大概率没有连接验证的题。</p>
</li>
<li><p>关于yum源题：更新本地源，这一题有可能卡住。</p>
</li>
<li><p>当某一题卡住或有点慢，后面的题也可以做，验证是多点几次。</p>
</li>
<li><p>一些命令里的文件或目录，我写全了，可视情况修改。</p>
</li>
<li><p>可提前建好上传。xftp里在/usr/下建的文件夹为java hive hadoop zookeeper。</p>
</li>
<li><p>hadoop等复制配置文件时，<font color=red>注意不要少复制或者多复杂或者粘帖时覆盖了部分单词</font></p>
</li>
<li><p>环境变量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;; export TZ</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$HIVE_HOME&#x2F;bin:$ZOOKEEPER_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>提前mysql安装（slave23），文档里有一句安装epel源：<code>yum -y install epel-release</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可用weget。文档里是8.noarch.rpm</span><br><span class="line">yum -y install http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"># 文档里用rpm -ivh mysql57-community-release-el7-10.noarch.rpm。我们用了yum，应该不用了。</span><br><span class="line"># 安装</span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="一-、更新本地源"><a href="#一-、更新本地源" class="headerlink" title="一 、更新本地源"></a>一 、更新本地源</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于这一块不熟，命令视情况运行。</span><br><span class="line">发信号给 yum 进程：pkill -9 yum</span><br><span class="line">进入 yum 源配置文件：cd &#x2F;etc&#x2F;yum.repos.d</span><br><span class="line">如果需要，把CentOS-Base.repo备份一下，把下载的或已有的repo重名为CentOS-Base.repo。</span><br><span class="line">可能会用到的命令</span><br><span class="line">	curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 地址（http:&#x2F;&#x2F;等）</span><br><span class="line">	或</span><br><span class="line">	wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 地址（http:&#x2F;&#x2F;等）</span><br><span class="line">（不一定执行）删除所有文件：rm -rf	*</span><br><span class="line">下载 yum 源：wget http:&#x2F;&#x2F;10.10.31.2:8000&#x2F;bigdata&#x2F;repofile&#x2F;bigdata.repo</span><br><span class="line">清除YUM 缓存：yum clean all</span><br><span class="line">更新元数据 ：yum makecache</span><br></pre></td></tr></table></figure>



<h1 id="二、防火墙"><a href="#二、防火墙" class="headerlink" title="二、防火墙"></a>二、防火墙</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>



<h1 id="三、映射"><a href="#三、映射" class="headerlink" title="三、映射"></a>三、映射</h1><ol>
<li><p>修改主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">hostnamectl set-hostname slave1</span><br><span class="line">hostnamectl set-hostname slave2</span><br><span class="line">hostnamectl set-hostname slave3</span><br><span class="line">bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">172. master</span><br><span class="line">172. slave1</span><br><span class="line">172. slave2</span><br><span class="line">172. slave3</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="四、时区更改"><a href="#四、时区更改" class="headerlink" title="四、时区更改"></a>四、时区更改</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>预设的<code>TZ=&#39;Asia/Shanghai&#39;; export TZ</code>会视情况加入到环境变量配置文件（/etc/profile）中。</p>
<p>时区可能不一定更改。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date 查看时间</span><br><span class="line">tzselect </span><br><span class="line">5911</span><br><span class="line">在命令行里执行TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;; export TZ也可以</span><br><span class="line">此时就可以把环境变量配好发送生效</span><br></pre></td></tr></table></figure>



<h1 id="五、ntp"><a href="#五、ntp" class="headerlink" title="五、ntp"></a>五、ntp</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">三台或四台下载安装ntp</span><br><span class="line">yum install -y ntp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master修改&#x2F;etc&#x2F;ntp.conf</span><br><span class="line">vim &#x2F;etc&#x2F;ntp.conf</span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line">（最好做如此操作）如果要屏蔽默认服务器，在server 0~n前加上#</span><br><span class="line">层级为10指stratum 10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在master执行下面之一应该即可</span><br><span class="line">重启服务</span><br><span class="line">systemctl restart ntpd.service</span><br><span class="line">启动</span><br><span class="line">systemctl start ntpd</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步</span><br><span class="line">ntpdate master</span><br></pre></td></tr></table></figure>



<h1 id="六、定时任务"><a href="#六、定时任务" class="headerlink" title="六、定时任务"></a>六、定时任务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e #写一个定时任务</span><br><span class="line">键入i，进入编辑模式</span><br><span class="line">输入内容：</span><br><span class="line"># https:&#x2F;&#x2F;tool.lu&#x2F;crontab&#x2F;</span><br><span class="line"># 每十分钟执行一次</span><br><span class="line">*&#x2F;10 * * * * usr&#x2F;sbin&#x2F;ntpdate master</span><br><span class="line"># 早8到晚5，每半小时执行一次</span><br><span class="line">*&#x2F;30 8-17 * * * usr&#x2F;sbin&#x2F;ntpdate master</span><br><span class="line">查看定时任务</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>



<h1 id="七、ssh"><a href="#七、ssh" class="headerlink" title="七、ssh"></a>七、ssh</h1><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>有可能题目要求我们不使用简单的，故把两种方式都写出。当然也可以先试一试简单的，尽量根据题目来，尽管官方教学视频是rsa。不过，官方的复制方法不一样。</p>
<p>对于authorized_keys的权限，要修改的话，用 <code>chmod 600 authorized_keys</code>。</p>
<p>其中命令里的<code>~</code>和<code>/root</code>，如果出问题，可尝试互换，并步意味着两者等价。具体等更新。</p>
<h2 id="dsa"><a href="#dsa" class="headerlink" title="dsa"></a>dsa</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成公钥文件</span><br><span class="line">ssh-keygen -t dsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_dsa</span><br><span class="line">质疑上述命令</span><br><span class="line">可尝试ssh-keygen -t dsa</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内容添加至授权文件</span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;id_dsa.pub &gt;&gt; &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">或</span><br><span class="line">cp &#x2F;root&#x2F;.ssh&#x2F;id_dsa.pub  &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">这时可尝试连接 ssh master</span><br><span class="line">退出用exit</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其他结点</span><br><span class="line">在具体结点（slave123）下执行相应的命令</span><br><span class="line">scp master:~&#x2F;.ssh&#x2F;id_dsa.pub ~&#x2F;.ssh&#x2F;master_dsa.pub</span><br><span class="line">或下面这个也行，应该。如要用，还是用上面的。-r表示递归复制</span><br><span class="line">scp master:&#x2F;root&#x2F;.ssh&#x2F;id_dsa.pub &#x2F;root&#x2F;.ssh&#x2F;master_dsa.pub</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;master_dsa.pub &gt;&gt; &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">或</span><br><span class="line">cp &#x2F;root&#x2F;.ssh&#x2F;master_dsa.pub  &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">这时可尝试连接ssh slave123</span><br><span class="line">退出用exit</span><br><span class="line"># 配置好后可以不进行连接，先验证。不通过再进行下面的连接测试等。</span><br><span class="line"># 注：此时在slave1连接slave1并退出后，要在master连接slave1，其他结点同理。这是根据文档意思得出的。可能和jobtracker有关。</span><br></pre></td></tr></table></figure>

<h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id master</span><br><span class="line">ssh-copy-id slave1</span><br><span class="line">ssh-copy-id slave2</span><br><span class="line">ssh-copy-id slave3</span><br><span class="line">此方式要输密码</span><br></pre></td></tr></table></figure>

<p>虽然上述命令已经搞定了，但还是可以在复制的时候使用类似dsa的方式。猜测dsa也可以用<code>ssh-copy-id</code>的方式（未验证）。</p>
<h1 id="八、jdk"><a href="#八、jdk" class="headerlink" title="八、jdk"></a>八、jdk</h1><h2 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h2><p>此时可以创建文件夹了，hive、hadoop、java、zookeeper。</p>
<p>可以提前在windows上先建好usr文件夹，再在usr文件夹下建4个文件夹，最后在xftp里右键上传覆盖至usr所在的根目录。我已经在本地建好了。</p>
<p>可以分别配或者解压配好后分发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf &#x2F;opt&#x2F;soft&#x2F;jdk-8u171-linux-x64.tar.gz -C &#x2F;usr&#x2F;java&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;usr&#x2F;java&#x2F; slave1:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;java&#x2F; slave2:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;java&#x2F; slave3:&#x2F;usr&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;; export TZ</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$HIVE_HOME&#x2F;bin:$ZOOKEEPER_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<h1 id="九、zookeeper"><a href="#九、zookeeper" class="headerlink" title="九、zookeeper"></a>九、zookeeper</h1><p>这个到时候题目可能会要求先搭<a href="#hadoop">hadoop</a>，或者并行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf &#x2F;opt&#x2F;soft&#x2F;zookeeper-3.4.10.tar.gz -C &#x2F;usr&#x2F;zookeeper&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拷贝zookeeper-3.4.10&#x2F;conf&#x2F;zoo_sample.cfg</span><br><span class="line">cp &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;conf&#x2F;zoo_sample.cfg &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;conf&#x2F;zoo.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置zoo.cfg</span><br><span class="line">vim &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">修改dataDir&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdata</span><br><span class="line">他未添加dataLogDir&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdatalog</span><br><span class="line"># 如果动态添加，到时视情况添上slave3或者修改slave2为slave3</span><br><span class="line">    server.1&#x3D;master:2888:3888</span><br><span class="line">    server.2&#x3D;slave1:2888:3888</span><br><span class="line">    server.3&#x3D;slave2:2888:3888</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建文件夹</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdata</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdatalog</span><br><span class="line">创建myid</span><br><span class="line">vim &#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdata&#x2F;myid</span><br><span class="line">写1 修改23</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;usr&#x2F;zookeeper slave1:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;zookeeper slave2:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;zookeeper slave3:&#x2F;usr&#x2F;</span><br><span class="line">分发后修改myid</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动zkServer.sh start</span><br><span class="line">状态zkServer.sh status</span><br><span class="line">注意要都启动再看状态，否则会看到Connection refused (Connection refused) 误以为配错了</span><br><span class="line">启动顺序 master slave1 slave2 ，slave1会是leader</span><br></pre></td></tr></table></figure>

<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdata</span><br><span class="line">dataLogDir&#x3D;&#x2F;usr&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zkdatalog</span><br></pre></td></tr></table></figure>



<h1 id="十、hadoop"><a href="#十、hadoop" class="headerlink" title="十、hadoop"></a>十、<a name="hadoop">hadoop</a></h1><p>如果官方给出的配置较少，跟随官方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf &#x2F;opt&#x2F;soft&#x2F;hadoop-2.7.3.tar.gz -C &#x2F;usr&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;hadoop&#x2F;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop</span><br></pre></td></tr></table></figure>

<h2 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh</span><br><span class="line">修改export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171</span><br></pre></td></tr></table></figure>

<h2 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.default.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;master:9000&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;hdfs&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;!--他们直接在tmp下，没有hdfs--&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;io.file.buffer.size&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;131072&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.checkpoint.period&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;60&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.checkpoint.size&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;67108864&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  hdfs-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;!--研究院写的3--&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;file:&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;hdfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;final&gt;true&lt;&#x2F;final&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">          &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;file:&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;hdfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;final&gt;true&lt;&#x2F;final&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">          &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;master:9001&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">          &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.webhdfs.enabled&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">         &lt;&#x2F;property&gt;</span><br><span class="line">          &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.permissions&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">         &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h2><p>由于动态添加，这里到时候会可能会删除slave2，添加上slave3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim slaves</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure>

<h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><p>这个应该没有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim master</span><br><span class="line">master</span><br></pre></td></tr></table></figure>

<h2 id="yarn-env-sh-文档无"><a href="#yarn-env-sh-文档无" class="headerlink" title="yarn-env.sh 文档无"></a>yarn-env.sh 文档无</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim yarn-env.sh</span><br><span class="line">改export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt; </span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.address&lt;&#x2F;name&gt; </span><br><span class="line">	&lt;value&gt;master:18040&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;&#x2F;name&gt; </span><br><span class="line">	&lt;value&gt;master:18030&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.webapp.address&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;master:18088&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;&#x2F;name&gt;</span><br><span class="line">	&lt;value&gt;master:18025&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.admin.address&lt;&#x2F;name&gt; </span><br><span class="line">	&lt;value&gt;master:18141&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.auxservices.mapreduce.shuffle.class&lt;&#x2F;name&gt; </span><br><span class="line">	&lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;&#x2F;value&gt; </span><br><span class="line">	&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template  mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line">&lt;property&gt; </span><br><span class="line">	&lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt; </span><br><span class="line">	&lt;value&gt;yarn&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;usr&#x2F;hadoop slave1:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;hadoop slave2:&#x2F;usr&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;hadoop slave3:&#x2F;usr&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="启动和查看"><a href="#启动和查看" class="headerlink" title="启动和查看"></a>启动和查看</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">	master格式化 hadoop namenode -format</span><br><span class="line">	start-all.sh</span><br><span class="line">查看</span><br><span class="line">	master:50070</span><br><span class="line">	master:18088</span><br></pre></td></tr></table></figure>

<h2 id="日志-1"><a href="#日志-1" class="headerlink" title="日志"></a>日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $&#123;HADOOP_HOME&#125;&#x2F;logs</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><p>wordcount</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果&#x2F;input不存在，最后用-mkdir -p 创建一下。单引号应该可以去掉。</span><br><span class="line">hadoop fs -put &#39;wordcount.txt&#39; &#x2F;input</span><br><span class="line">hadoop jar $HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.3.jar wordcount &#x2F;input&#x2F;wordcount.txt &#x2F;output</span><br><span class="line">hadoop fs -cat &#x2F;output&#x2F;part-r-00000</span><br></pre></td></tr></table></figure>
</li>
<li><p>pi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar $HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.3.jar pi 5 5</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="十一、动态添加和删除"><a href="#十一、动态添加和删除" class="headerlink" title="十一、动态添加和删除"></a>十一、动态添加和删除</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地源、防火墙、时区（date可看）、hosts、ssh、同步时间</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环境变量、jdk、hadoop</span><br></pre></td></tr></table></figure>

<h2 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h2><p>命令里<code>sbin/</code>可视情况删除或添加（我都删了）。</p>
<p>dfs.replication如果配得大话，应该适当减小。</p>
<p>虽然可以通过停止集群来添加结点，但尽量不要，毕竟题目要动态。</p>
<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每台slaves添加slave3（有教程只修改了master的slaves，我测试时发现可行）</span><br><span class="line">vim &#x2F;usr&#x2F;hadoop&#x2F;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;slaves</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave3下</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master下（namenode）</span><br><span class="line">刷新（看web会有三台）：hdfs dfsadmin -refreshNodes</span><br><span class="line">均衡block:start-balancer.sh</span><br><span class="line">查看存活的节点：hdfs dfsadmin -report</span><br><span class="line">也可在web页面查看</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="临时删除-可不看"><a href="#临时删除-可不看" class="headerlink" title="临时删除-可不看"></a>临时删除-可不看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh stop datanode </span><br><span class="line">hadoop-daemon.sh stop tasktracker</span><br></pre></td></tr></table></figure>

<h3 id="hdfs-site-xml-1"><a href="#hdfs-site-xml-1" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><p>如果删除验证不通过，可以配全，当就要编写datanode-allow.list了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.hosts.exclude&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;excludes&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!--还可以添加下面，大部分教程没有。不加的话，slaves里默认都是允许的。加了的话，要仿excludes--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.hosts&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;datanode-allow.list&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="excludes"><a href="#excludes" class="headerlink" title="excludes"></a>excludes</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;excludes</span><br><span class="line">写要删除的结点 slave2 有可能要求加回slave2删除slave3</span><br></pre></td></tr></table></figure>

<h3 id="执行一些命令"><a href="#执行一些命令" class="headerlink" title="执行一些命令"></a>执行一些命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master下</span><br><span class="line">刷新所有datanode：hdfs dfsadmin -refreshNodes</span><br><span class="line"># 有的教程此处跳至均衡了</span><br><span class="line">查看存活结点：hdfs dfsadmin -report</span><br><span class="line">状态：Decommission In Progress（退役）</span><br><span class="line">	执行完毕后：Decommission Status：Decommissioned</span><br><span class="line">	可在web（masterIP:50070）看</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可能需要等待一会，直到web页面显示dead</span><br><span class="line">在删除的结点上</span><br><span class="line">hadoop-daemon.sh stop datanode</span><br><span class="line">yarn-daemon.sh stop nodemanager</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master下</span><br><span class="line">start-balancer.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">去掉slaves里的slave，excludes里也可以去掉slave3</span><br><span class="line">#下面是官方ppt有但没有口头说</span><br><span class="line">从namenode的excludes、slaves、hosts（我觉得不需要）去掉删除的主机名</span><br><span class="line">所有datanode上执行hadoop-pull.sh（没有这个）</span><br></pre></td></tr></table></figure>



<h1 id="十二、hive"><a href="#十二、hive" class="headerlink" title="十二、hive"></a>十二、hive</h1><h2 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h2><ol>
<li>为了节约时间，可提前在slaves2和slave3（看情况）安装mysql。</li>
<li>如果题目要求，可把10改成8，文档是8。</li>
<li>master作为client，slave1作为 hive server，slave2或3安装mysql server。</li>
<li>hive-env.sh里如果要配三个，是HADOOP_HOME、hive的conf目录、hive的lib目录。</li>
</ol>
<h2 id="slave2或slave3"><a href="#slave2或slave3" class="headerlink" title="slave2或slave3"></a>slave2或slave3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">(&#x2F;etc&#x2F;yum.repos.d会有相应文件)</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log # 有不需要密码的进入方式，暂不使用</span><br><span class="line">复制密码进入mysql，mysql -uroot -p</span><br><span class="line">set global validate_password_policy&#x3D;0;</span><br><span class="line">set global validate_password_length&#x3D;6;</span><br><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">可以重进一下</span><br><span class="line"># 下面两个用其中一个，我第二个一直让我输入</span><br><span class="line">    # update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">    # grant all privileges on *. * to &#39;root&#39;@&#39;%  with grant option;</span><br><span class="line"># 刷新权限，这个似乎有争议</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上传connectior-java-5.1.5包到slave1:&#x2F;usr&#x2F;local&#x2F;apache-hive-2.3.7-bin&#x2F;lib，比赛时应该会在某个地方，文档说slave2：&#x2F;lib下</span><br><span class="line">scp &#x2F;lib&#x2F;mysql-connectior-java-5.1.5-bin.jar slave1:&#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;lib</span><br></pre></td></tr></table></figure>

<h2 id="slave1"><a href="#slave1" class="headerlink" title="slave1"></a>slave1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传-解压或解压-传，自行决定</span><br><span class="line">master下：</span><br><span class="line">tar -zxvf &#x2F;opt&#x2F;soft&#x2F;apache-hive-2.1.1-bin.tar.gz -C &#x2F;usr&#x2F;hive&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;hive slave1:&#x2F;usr&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave1的hive的conf下</span><br><span class="line">cp &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf&#x2F;hive-env.sh.template &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf&#x2F;hive-env.sh</span><br><span class="line">或</span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">vim hive-env.sh</span><br><span class="line">或</span><br><span class="line">vim &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf&#x2F;hive-env.sh</span><br><span class="line">修改HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave1的hive的conf下</span><br><span class="line">vim hive-site.xml</span><br><span class="line">或</span><br><span class="line">vim &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf&#x2F;hive-site.xml</span><br><span class="line">添加</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.warehouse.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;user&#x2F;hive_remote&#x2F;warehouse&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql:&#x2F;&#x2F;slave2:3306&#x2F;hive?createDatabaseIfNotExist&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF-8&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;!--文档里没使用，但官方视频使用了&amp;useSSL&#x3D;false又加上&amp;characterEncoding&#x3D;UTF-8--&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.jdbc.Driver&lt;&#x2F;value&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;&#x2F;value&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;123456&lt;&#x2F;value&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.schema.verification&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;datanucleus.schema.autoCreateAll&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<h2 id="master-1"><a href="#master-1" class="headerlink" title="master"></a>master</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;lib&#x2F;jline-2.12.jar &#x2F;usr&#x2F;hadoop&#x2F;hadoop-2.7.3&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;hive&#x2F;apache-hive-2.1.1-bin&#x2F;conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim hive-env.sh</span><br><span class="line">修改HADOOP_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop-2.7.3</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim hive-site.xml</span><br><span class="line">添加</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.warehouse.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;user&#x2F;hive_remote&#x2F;warehouse&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.local&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.uris&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;thrift:&#x2F;&#x2F;slave1:9083&lt;&#x2F;value&gt;</span><br><span class="line">     &lt;&#x2F;property&gt;</span><br><span class="line">     &lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave1下</span><br><span class="line">		hive --service metastore</span><br><span class="line">master下</span><br><span class="line">		hive</span><br><span class="line">		测试show databases;</span><br><span class="line"># 报Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class="line">有可能&lt;name&gt;hive.metastore.uris&lt;&#x2F;name&gt;值写错了</span><br><span class="line"># 报 Could not create ServerSocket on address 0.0.0.0&#x2F;0.0.0.0:9083.</span><br><span class="line">可尝试把runjar杀掉</span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt; set hive.exec.mode.local.auto&#x3D;true;</span><br></pre></td></tr></table></figure>

<h2 id="日志-2"><a href="#日志-2" class="headerlink" title="日志"></a>日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp&#x2F;root&#x2F;hive.log</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>研究院指导笔记整理</title>
    <url>/2020/07/29/%E7%A0%94%E7%A9%B6%E9%99%A2%E6%8C%87%E5%AF%BC%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="前期"><a href="#前期" class="headerlink" title="前期"></a>前期</h1><p>​        主要是虚拟机的下载、安装、创建、配置。没记什么，因为早就弄好了。</p>
<p>​        一些基础的命令。</p>
<div><div class="fold_hider"><div class="close hider_title">是否使用照妖镜使妖怪现形</div></div><div class="fold">
<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>

<p>更改网络配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dhcp改static</span><br><span class="line">IPADDR&#x3D;192.168.222.100</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.222.2</span><br><span class="line">DNS1&#x3D;223.5.5.5</span><br><span class="line">DNS2&#x3D;223.6.6.6</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>配环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动： systemctl start firewalld</span><br><span class="line">关闭： systemctl stop firewalld</span><br><span class="line">查看状态： systemctl status firewalld</span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure>

<p>主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname px02 &amp;&amp; bash</span><br></pre></td></tr></table></figure>

<p>分发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r hadoop&#x2F; px03:&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure>

<p>ssh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa &amp;&amp; ssh-copy-id 地址</span><br></pre></td></tr></table></figure>

</div></div>



<h1 id="day03-应该是-一台"><a href="#day03-应该是-一台" class="headerlink" title="day03 应该是 一台"></a>day03 应该是 一台</h1><ol>
<li><p>hadoop-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_251</span><br></pre></td></tr></table></figure>
</li>
<li><p>core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-2.9.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式化NameNode（第一次启动时格式化，以后就不要总格式化）</span><br><span class="line">hadoop namenode -format</span><br><span class="line">启动NameNode</span><br><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">启动DataNode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">（当时应该没有执行）hadoop-daemon.sh start secondarynamenode</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意配置环境变量，否则要写全路径。启动后用jps（要先配置java）查看</span></span><br><span class="line">web页面：机子ip:50070</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="day04-第一台伪分布-多一个配置"><a href="#day04-第一台伪分布-多一个配置" class="headerlink" title="day04 第一台伪分布+多一个配置"></a>day04 第一台伪分布+多一个配置</h1><ol>
<li><p>hadoop-env.sh  JAVA_HOME</p>
</li>
<li><p>vi core-site.xml 不变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;&lt;value&gt;hdfs:&#x2F;&#x2F;ip:9000</span><br><span class="line">				 hadoop.tmp.dir            &#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;tmp</span><br></pre></td></tr></table></figure>
</li>
<li><p>vi hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 Hadoop 辅助名称节点主机配置 ，可以不设置，默认在和namenode在同一台机器上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>vim slaves</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.100.102 去掉localhost 这是本机 下面是其他机</span><br><span class="line">192.168.100.103</span><br><span class="line">192.168.100.104</span><br></pre></td></tr></table></figure>
</li>
<li><p>杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拷贝到其他机器 profile jdk hadoop</span><br><span class="line">scp -r &#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F; 192.168.100.103:&#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">为了方便生成密钥 单向的</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id 地址</span><br><span class="line"></span><br><span class="line">如果通过其他方式比如xftp传输， Permission denied 命令行输入  sudo chmod -R 777 &#x2F;(java_home的完整路径)  同理</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式化 他说你地址写那个就在那里格式化 但我不清楚那个地址 我在第2台机子上格的</span><br><span class="line">hadoop namenode -format</span><br><span class="line">如果没改主机名，会出现localhost&#x2F;127.0.0.1 而不是分配好的ip地址</span><br><span class="line">hostnamectl set-hostname px02</span><br><span class="line">bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">映射 他说用映射比较好，主机名ip都行</span><br><span class="line">vim core-site.xml 把ip改为主机名</span><br><span class="line">改了要分发一下</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">ip 名</span><br><span class="line">都改或分发</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>web</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.100.102:50070&#x2F; 应该是namenode的机子ip</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><h2 id="搭建-yarn-昨天hdfs"><a href="#搭建-yarn-昨天hdfs" class="headerlink" title="搭建 yarn 昨天hdfs"></a>搭建 yarn 昨天hdfs</h2><ol>
<li><p>vim yarn-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_251&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>vim yarn-site.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- reducer获取数据的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定yarn的resourcemanager的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>px03<span class="tag">&lt;/<span class="name">vslue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>vim mapred-env.sh </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">拷贝一份，以防写错</span><br><span class="line">vim mapred-site.xml</span><br><span class="line"><span class="comment">&lt;!--指定mr在yarn上运行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分发 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4个文件 可偷懒分发hadoop文件夹 可用主机名或ip</span><br><span class="line">scp -r hadoop&#x2F; px03:&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resourcemanage在那台机子就在那台启动，比如我的px03</span><br><span class="line">要先启动hdfs </span><br><span class="line">start-dfs.sh（我是在px02上启动的 我的机子 02 03 04）</span><br><span class="line">再启动yarn 若未配置免密则须输密码</span><br><span class="line">start-yarn.sh（我03上启动的）</span><br></pre></td></tr></table></figure>
</li>
<li><p>web页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.100.103:8088&#x2F; ip为resourcemanage的机子的ip</span><br><span class="line">注：后面的再次配置会把端口改为18088</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果觉得不方便，把所有主机写在同一台，secondnamenode去掉</p>
</li>
</ol>
<h2 id="hdfs基本命令"><a href="#hdfs基本命令" class="headerlink" title="hdfs基本命令"></a>hdfs基本命令</h2><ol>
<li><p>fs和dfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;hadoop fs具体命令OR bin&#x2F;hdfs dfs具体命令。</span><br><span class="line">dfs是fs的实现类。</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">帮助</span><br><span class="line">hadoop fs -help 命令</span><br><span class="line">-ls</span><br><span class="line">hadoop fs -ls /  /根目录</span><br><span class="line">-mkdir 创建目录</span><br><span class="line">hadoop fs -mkdir / 可在hdfs web界面看 ip/explorer.html#/</span><br><span class="line">从本地（不是windows）剪切粘贴到HDFS</span><br><span class="line">hadoop fs -moveFromLocal 文件 目录</span><br><span class="line">查看文件</span><br><span class="line">hadoop fs -cat 文件</span><br><span class="line">追加</span><br><span class="line">hadoop fs -appendToFile 源文件 目标文件</span><br><span class="line">从本机拷贝 等同于 -put</span><br><span class="line">          -copyFromLocal 文件 目录</span><br><span class="line">拷贝回本地 等同于 -get </span><br><span class="line">		  -copyToLocal 文件 目录</span><br><span class="line">HDFS中拷贝到另一个路径</span><br><span class="line">		  -cp 文件 目录</span><br><span class="line">移动 -mv</span><br><span class="line"></span><br><span class="line">感觉就是linux命令的结合</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="wordcount案例"><a href="#wordcount案例" class="headerlink" title="wordcount案例"></a>wordcount案例</h2><ol>
<li><p>准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目录</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;share&#x2F;hadoop&#x2F;mapreduce</span><br><span class="line">文件</span><br><span class="line"> hadoop-mapreduce-examples-2.9.2.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.9.2.jar wordcount（主类） &#x2F;wordcount.txt（输入） &#x2F;output（输出）</span><br><span class="line">http:&#x2F;&#x2F;192.168.100.103:8088&#x2F;cluster&#x2F; 可看</span><br><span class="line">他的在204 我的未在04而在02 猜测随机</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可用以下命令查看</span><br><span class="line">hadoop fs -cat &#x2F;output&#x2F;part-r-00000</span><br><span class="line">他会出现统计的频率</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="写程序前"><a href="#写程序前" class="headerlink" title="写程序前"></a>写程序前</h2><ol>
<li>windows的jdk配置</li>
<li>windows配置hadoop<ul>
<li>更改env的JAVA_HOME</li>
<li>添加HADOOP_HOME</li>
<li>添加Path，%HADOOP_HOME%\bin 绝对路径相对路径随意</li>
<li>验证 cmd hadoop</li>
</ul>
</li>
</ol>
<h2 id="新命令"><a href="#新命令" class="headerlink" title="新命令"></a>新命令</h2><p>杀死进程 kill -9 进程号</p>
<h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><h2 id="zookeeper-注：他此时hdfs和yarn是启动好的"><a href="#zookeeper-注：他此时hdfs和yarn是启动好的" class="headerlink" title="zookeeper 注：他此时hdfs和yarn是启动好的"></a>zookeeper 注：他此时hdfs和yarn是启动好的</h2><ol>
<li><p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf 文件 -C 目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>改配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建data目录</span><br><span class="line">在data下创建文件myid，里面写1（id为1）</span><br><span class="line">在conf下</span><br><span class="line">拷贝文件  cp zoo_sample.cfg zoo.cfg</span><br><span class="line">修改dataDir为 &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;data&#x2F;</span><br><span class="line">添加      （id） （主机或ip）</span><br><span class="line">    server.1&#x3D;px02:2888:3888</span><br><span class="line">    server.2&#x3D;px03:2888:3888</span><br><span class="line">    server.3&#x3D;px04:2888:3888</span><br></pre></td></tr></table></figure>
</li>
<li><p>分发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F; px03:&#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F; px04:&#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">修改data下的myid</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在bin目录下</span><br><span class="line">.&#x2F;zkServer.sh start</span><br><span class="line">三台都要敲命令</span><br><span class="line"># 注：配置环境变量会简单点</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkServer.sh status</span><br><span class="line">出现Mode: follower、Mode: leader成功了</span><br><span class="line">进程为QuorumPeerMain</span><br><span class="line">注：他说（意为）：zkp一般搭建奇数台，三台中正常第二台为leader</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="编程（windows）"><a href="#编程（windows）" class="headerlink" title="编程（windows）"></a>编程（windows）</h2><ol>
<li><p>idea导包 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">share\hadoop下的</span><br><span class="line">common和lib、hdfs和lib、mapreduce和lib、yarn和lib</span><br><span class="line">有多余的，但老师他说不管</span><br><span class="line">会出现jdiff，他说选不选无所谓，他没选</span><br></pre></td></tr></table></figure>
</li>
<li><p>小技巧：idea里 .var可以方便声明变量</p>
</li>
<li><p>代码</p>
<ul>
<li><p>mapper</p>
<div><div class="fold_hider"><div class="close hider_title">代码隐藏</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2020, px有限公司</span></span><br><span class="line"><span class="comment"> * FileName: WordCounttMapper</span></span><br><span class="line"><span class="comment"> * Author:   15081</span></span><br><span class="line"><span class="comment"> * Date:     2020/7/6 15:51</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * px                修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> cn.org.sibd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 15081</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/7/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//其中Text涉及序列化和反序列化 相当于String</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCounttMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>,<span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    Text kkey = <span class="keyword">new</span> Text();</span><br><span class="line">    IntWritable vvalue = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//获取第一行</span></span><br><span class="line">        String line = value.toString();</span><br><span class="line">        <span class="comment">//划分</span></span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            kkey.set(word);</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            context.write(kkey,vvalue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>
</li>
<li><p>reducer</p>
<div><div class="fold_hider"><div class="close hider_title">代码隐藏</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2020, px有限公司</span></span><br><span class="line"><span class="comment"> * FileName: WordCountReducer</span></span><br><span class="line"><span class="comment"> * Author:   15081</span></span><br><span class="line"><span class="comment"> * Date:     2020/7/6 15:53</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * px                修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> cn.org.sibd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 15081</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/7/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hadoop 1</span></span><br><span class="line"><span class="comment">hadoop 1</span></span><br><span class="line"><span class="comment">java 1</span></span><br><span class="line"><span class="comment">会默认排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable v = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum+=value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        v.set(sum);</span><br><span class="line">        context.write(key,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>
</li>
<li><p>driver</p>
<div><div class="fold_hider"><div class="close hider_title">代码隐藏</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2020, px有限公司</span></span><br><span class="line"><span class="comment"> * FileName: WordCountDriver</span></span><br><span class="line"><span class="comment"> * Author:   15081</span></span><br><span class="line"><span class="comment"> * Date:     2020/7/6 15:53</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * px                修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> cn.org.sibd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 15081</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/7/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//job实例对象</span></span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">//把类联系起来</span></span><br><span class="line">        job.setJarByClass(WordCountDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(WordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapperClass(WordCounttMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//map的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//最终的输出类型 不要加reduce</span></span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//输入路径</span></span><br><span class="line">        <span class="comment">//FileInputFormat.setInputPaths(job,new Path("D:\\IntelliJ IDEA 2020.1.1\\WorkSpace\\mapreduce-project\\input\\wordcount.txt"));</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> Path(<span class="string">"./input/wordcount.txt"</span>));</span><br><span class="line">        <span class="comment">//输出路径 不用我们去创建，会报错</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(<span class="string">"./output"</span>));</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="keyword">boolean</span> resout = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(resout?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>
</li>
</ul>
</li>
<li><p>输入文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop java</span><br><span class="line">java zookeeper</span><br><span class="line">hive hadoop</span><br><span class="line">hive java</span><br></pre></td></tr></table></figure>
</li>
<li><p>每次运行要删除output文件夹 当然可用代码删除</p>
<div><div class="fold_hider"><div class="close hider_title">代码隐藏</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"./output"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">new</span> FileDelete(<span class="string">"./output"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//自行拆分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2020, px有限公司</span></span><br><span class="line"><span class="comment"> * FileName: FileDelete</span></span><br><span class="line"><span class="comment"> * Author:   15081</span></span><br><span class="line"><span class="comment"> * Date:     2020/7/6 19:08</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * px                修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> cn.org.sibd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 15081</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/7/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileDelete</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deleteFileAndFolder(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFileAndFolder</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">return</span> file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">                <span class="keyword">if</span>(!f.delete())&#123;</span><br><span class="line">                    System.out.println(f.getAbsolutePath()+<span class="string">" delete error!"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.deleteFileAndFolder(f.getAbsolutePath()))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

</li>
</ol>
<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><p>移动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv [-fiv] source destination</span><br></pre></td></tr></table></figure>



<h1 id="day07-day08-day09-day10"><a href="#day07-day08-day09-day10" class="headerlink" title="day07+day08+day09+day10"></a>day07+day08+day09+day10</h1><h2 id="day07-java基础"><a href="#day07-java基础" class="headerlink" title="day07 java基础"></a>day07 java基础</h2><p>真的基础，所以没记，看看。</p>
<h2 id="day08-假hive"><a href="#day08-假hive" class="headerlink" title="day08 假hive"></a>day08 假hive</h2><ol>
<li><p>数据仓库 比mysql东西多</p>
</li>
<li><p>mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载yum库</span><br><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install 包</span><br><span class="line">我使用的方式是：</span><br><span class="line">yum -y install http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">安装数据库</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">重启mysql</span><br><span class="line">systemctl restart mysqld</span><br><span class="line">查找密码</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">登录</span><br><span class="line">mysql -uroot -p密码</span><br><span class="line">修改密码强度</span><br><span class="line">set global validate_password_policy&#x3D;0;</span><br><span class="line">set global validate_password_policy&#x3D;low;</span><br><span class="line">set global validate_password_length&#x3D;6;</span><br><span class="line">修改密码</span><br><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">重启mysql</span><br><span class="line">mysql简单练习</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="day09-要假不假hive"><a href="#day09-要假不假hive" class="headerlink" title="day09 要假不假hive"></a>day09 要假不假hive</h2><ol>
<li><p>使得不只本地可以连接数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">至于刷新flush privileges;他没执行。</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-hive-2.3.7-bin.tar.gz -C  /usr/<span class="built_in">local</span>/</span><br><span class="line">他说配不配都可以 配置环境变量 到bin目录 /etc/profile 记得生效一下</span><br></pre></td></tr></table></figure>
</li>
<li><p>到conf目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp hive-env.sh.template  hive-env.sh</span><br><span class="line">vim hive-env.sh</span><br><span class="line">HADOOP_HOME=/usr/local/hadoop-2.9.2</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/apache-hive-2.3.7-bin/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/apache-hive-2.3.7-bin/lib</span><br></pre></td></tr></table></figure>

<div><div class="fold_hider"><div class="close hider_title">hive-site.xml隐藏</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">创建hive-site.xml</span><br><span class="line">vim hive-site.xml </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>我度出来修改的</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      JDBC connect string for a JDBC metastore.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>
</li>
<li><p>杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 上传mysql-connector-java-5.1.48.jar到..&#x2F;lib目录下</span><br><span class="line">他说 2点多和1点多不一样 1点多可以直接起动了 2点多要初始化</span><br><span class="line">schematool -dbType mysql -initSchema 如果没配环境变量，用.&#x2F;也可以</span><br><span class="line">注：他机子变了，但我机子没变，我在px02（020304）上改动.而且我的hdfs、yarn、zookeeper没关，他报错了，而我没报错，但这不能算好消息。他把HIVE_AUX_JARS_PATH注了，而我没注。</span><br><span class="line">他说他删了一个库，创建不上了。他在ConnectionURL里加了 &amp;useSSL&#x3D;false（我没加），为了不看警告。</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive</span><br><span class="line">测试show databases;</span><br><span class="line">我打错了，打成 show databses;报了atatat的错。打对就好了</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="day10-hive-注：他不用101了而用102，但还是连的101，应该是克隆后没改192-168-1-1"><a href="#day10-hive-注：他不用101了而用102，但还是连的101，应该是克隆后没改192-168-1-1" class="headerlink" title="day10 hive 注：他不用101了而用102，但还是连的101，应该是克隆后没改192.168.1.1"></a>day10 hive <del>注：他不用101了而用102，但还是连的101，应该是克隆后没改</del>192.168.1.1</h2><h3 id="杂一"><a href="#杂一" class="headerlink" title="杂一"></a>杂一</h3><p>他重新搭建了hive。没配<code>HIVE_AUX_JARS_PATH</code>。<font color=red><del><code>&amp;amp;useSSL=false</code>改为了<code>; useSSL=false</code>。</del>(字体颜色有问题，有些字符看不清。)</font><font color=green><code>&amp;amp;</code>是字符<code>&amp;</code></font>报错了。他说没先start-dfs.sh。 <code>show databases;</code>没出来，他说其他地方没有权限，其实开了（%）。他说防火墙没关。还是。他一直有RunJar的进程，而我没有。他hadoop的``hadoop.tmp.dir<code>值是</code>/usr/local/hadoop/hadoop-2.9.2/tmp`,不是他原先教我门设置的，虽感觉在那都可。重搭了。</p>
<h3 id="杂二"><a href="#杂二" class="headerlink" title="杂二"></a>杂二</h3><p>我还是在hive-site.xml 添加上了<code>&amp;amp;useSSL=false</code>，不想看SSl的警告。</p>
<h3 id="Hive-SQL语法总结-可在web页面看一些东西"><a href="#Hive-SQL语法总结-可在web页面看一些东西" class="headerlink" title="Hive SQL语法总结 可在web页面看一些东西"></a>Hive <a href="https://www.cnblogs.com/starzy/p/11441131.html" target="_blank" rel="noopener">SQL语法总结</a> 可在web页面看一些东西</h3><div><div class="fold_hider"><div class="close hider_title">多命令隐藏</div></div><div class="fold">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库 可加上 if not exists # 在HDFS上&#x2F;user&#x2F;hive&#x2F;warehouse</span><br><span class="line">create database test;</span><br><span class="line"># 创建管理表or内部表</span><br><span class="line">create table st(id int,name string)</span><br><span class="line">row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line"># 创建外部表</span><br><span class="line"> create external table dept(deptno int,dname string,loc int)</span><br><span class="line"> row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line"># 导入数据 也可以自己建</span><br><span class="line">load data local inpath &#39;文件&#39; into table 表名;</span><br><span class="line"># 查询 应该可以举一反三</span><br><span class="line">select * from 表;</span><br><span class="line"># 查看表格式化数据 可看类型</span><br><span class="line">desc formatted dept;</span><br><span class="line"># 创建分区表 单的</span><br><span class="line">create table dept_partition(dno int,dname string,loc string)</span><br><span class="line">partitioned by(month string)</span><br><span class="line">row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line">	# 加载数据</span><br><span class="line">	load data local inpath &#39;&#x2F;opt&#x2F;dept.txt&#39; into table dept_partition partition(month&#x3D;&#39;202006&#39;);</span><br><span class="line">	# 查询</span><br><span class="line">	select * from dept_partition;</span><br><span class="line">	select * from dept_partition where month&#x3D;202006;</span><br><span class="line">	# 增加分区表 可以跟多个partition，空格隔开 感觉本质是文件夹 </span><br><span class="line">	alter table dept_partition add partition(month&#x3D;&#39;202004&#39;);</span><br><span class="line">	# 注：通过hadoop fs -mkdir创建、-put上传，查不到；通过alter增加分区表、-put上传可以查到</span><br><span class="line">	# 删除</span><br><span class="line">	add换drop，多个partition用逗号隔开</span><br><span class="line"># 创建多分区</span><br><span class="line">by(month string,day string) 举一反三</span><br></pre></td></tr></table></figure>

</div></div>

<h1 id="day11-day12-day13"><a href="#day11-day12-day13" class="headerlink" title="day11+day12+day13"></a>day11+day12+day13</h1><h2 id="day11-续hive"><a href="#day11-续hive" class="headerlink" title="day11 续hive"></a>day11 续hive</h2><div><div class="fold_hider"><div class="close hider_title">多命令隐藏</div></div><div class="fold">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重命名表</span><br><span class="line">alter table st rename to st01;</span><br><span class="line"># 增加、修改、替换列信息</span><br><span class="line">	# 增加、替换</span><br><span class="line">	 alter table st01 add|replace columns(age int);</span><br><span class="line">	# 更新</span><br><span class="line">	alter table st01 change age sex string;</span><br><span class="line"># 删除表</span><br><span class="line">drop table 表名;</span><br><span class="line"># 通过查询语句插入数据</span><br><span class="line">	# 创建表</span><br><span class="line">	create table st(</span><br><span class="line">    &gt; id int,name string)</span><br><span class="line">    &gt; partitioned by(month string)</span><br><span class="line">    &gt; row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line">    # 插入基本的数据</span><br><span class="line">	insert into table st partition(month&#x3D;&#39;202006&#39;)values(3,&#39;zs&#39;),(2,&#39;ww&#39;);</span><br><span class="line">	# 查询单张表插入</span><br><span class="line">	insert overwrite table st partition(month&#x3D;&#39;202007&#39;)</span><br><span class="line">    &gt; select id,name from st;</span><br><span class="line"># 查询语句中创建表并加入数据</span><br><span class="line">create table st03</span><br><span class="line">&gt; as select id,name from st;</span><br><span class="line"># 创建表时指定加载数据的路径</span><br><span class="line">	# 创建表，指定在HDFS的位置</span><br><span class="line">	 create table st04(</span><br><span class="line">    &gt; id int,name string)</span><br><span class="line">    &gt; row format delimited fields terminated by &#39;\t&#39;</span><br><span class="line">    &gt; location &#39;&#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;test.db&#x2F;st04&#39;;</span><br><span class="line">    # 加载数据</span><br><span class="line">    load data local inpath &#39;&#x2F;opt&#x2F;st.txt&#39; into table st04;</span><br><span class="line">	# 注他未使用dfs -put &#x2F;opt&#x2F;st.txt &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;test.db&#x2F;st05;</span><br><span class="line"># insert导出 导出目录，目录里有文件 去掉local可导到HDFS</span><br><span class="line">	# 未格式化</span><br><span class="line">	insert overwrite local directory &#39;&#x2F;opt&#x2F;st&#39; select * from st05;</span><br><span class="line">	# 格式化</span><br><span class="line">	insert overwrite local directory &#39;&#x2F;opt&#x2F;st&#39; row format delimited fields terminated by &#39;\t&#39; select * from st05;</span><br><span class="line">	# 还有hadoop命令、Hive Shell命令等 感觉写脚本有用</span><br><span class="line">	hive -e &#39;select * from default.student;&#39; &gt; student4.txt;</span><br><span class="line"># 查询类同mysql</span><br><span class="line">group by	</span><br><span class="line">join 等值：join|inner join交集，left join左连接同右，右没左没，full join全连接，左右没，他说mysql不支持全连接，但我听说有方式</span><br></pre></td></tr></table></figure>

</div></div>

<p>他使用的文档可在网络上找到 关键词：尚硅谷 [文档关键词，例如：hive]</p>
<h2 id="day12-续hive"><a href="#day12-续hive" class="headerlink" title="day12 续hive"></a>day12 续hive</h2><h3 id="另一种启动hive"><a href="#另一种启动hive" class="headerlink" title="另一种启动hive"></a>另一种启动hive</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">不管那种方式都要start-dfs.sh</span><br><span class="line">修改core-site.xml</span><br><span class="line">   <span class="comment">&lt;!-- 如果不配置下列信息 hive的jdbc连接会报：User: root is not allowed to impersonate root --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hadoop.proxyuser.root.hosts   root  可以换成别的用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">第一个窗口 hiveserver2</span><br><span class="line">第二个窗口 beeline -u jdbc:hive2://localhost:10000 -n root</span><br><span class="line">他说容易掉。</span><br><span class="line">显示结果像mysql。第一个窗口会显示命令结果</span><br></pre></td></tr></table></figure>

<h3 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">集合数据类型 struct、map、array </span><br><span class="line">array在创建表时要加上collection items terminated by &#39;:&#39;; 索引获取，包含：array_contains(列名，变量)，大小用size(列名)</span><br><span class="line">map在建表时要map&lt;类型,类型&gt;和map keys terminated by &#39;#&#39;;获取：列名[key],取key：map_keys(列名)，取value：map_values(列名)</span><br><span class="line">struct建表要写struct&lt;列名:类型,……&gt;他加上了collection items terminated by &#39;:&#39;;像map，用点获取</span><br></pre></td></tr></table></figure>

<h2 id="day13-python-豆瓣有反扒，注意"><a href="#day13-python-豆瓣有反扒，注意" class="headerlink" title="day13 python 豆瓣有反扒，注意"></a>day13 python 豆瓣有反扒，注意</h2><div><div class="fold_hider"><div class="close hider_title">代码隐藏</div></div><div class="fold">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python  </span></span><br><span class="line"><span class="comment">#! -*- coding:utf-8 -*-  </span></span><br><span class="line"><span class="comment">#====#====#====#====  </span></span><br><span class="line"><span class="comment">#!@Author : px</span></span><br><span class="line"><span class="comment">#!@time   : 2020/7/12 10:37</span></span><br><span class="line"><span class="comment">#!@File   : 爬虫.py</span></span><br><span class="line"><span class="comment">#!License : (C)Copyright 2017-2018, Liugroup-NLPR-CASIA</span></span><br><span class="line"><span class="comment">#====#====#====#====</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             ┏┓      ┏┓</span></span><br><span class="line"><span class="string">            ┏┛┻━━━━━━┛┻┓</span></span><br><span class="line"><span class="string">            ┃          ┃</span></span><br><span class="line"><span class="string">            ┃  ┳┛  ┗┳  ┃</span></span><br><span class="line"><span class="string">            ┃     ┻    ┃</span></span><br><span class="line"><span class="string">            ┗━┓      ┏━┛</span></span><br><span class="line"><span class="string">              ┃      ┗━━━┓</span></span><br><span class="line"><span class="string">              ┃  神兽保佑 ┣┓</span></span><br><span class="line"><span class="string">              ┃  永无BUG！┏┛</span></span><br><span class="line"><span class="string">              ┗┓┓┏━━━━┳┓┏┛</span></span><br><span class="line"><span class="string">               ┃┫┫    ┃┫┫</span></span><br><span class="line"><span class="string">               ┗┻┛    ┗┻┛</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">PRE_BOOK_PAGE_COUNT=<span class="number">20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(page)</span>:</span></span><br><span class="line">    url= <span class="string">'https://book.douban.com/tag/%E5%90%8D%E8%91%97?start=&#123;&#125;&amp;type=T'</span>.format((page<span class="number">-1</span>)*PRE_BOOK_PAGE_COUNT)</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>:<span class="string">'max-age=0'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">'自行查找'</span>,</span><br><span class="line">        <span class="string">'Host'</span>:<span class="string">'book.douban.com'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>:<span class="string">'https'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Dest'</span>:<span class="string">'document'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Mode'</span>:<span class="string">'navigate'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Site'</span>:<span class="string">'same-origin'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-User'</span>:<span class="string">'?1'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/83.0.4103.116Safari/537.36'</span></span><br><span class="line">            &#125;</span><br><span class="line">    context=requests.get(url=url,headers=headers).text</span><br><span class="line">    <span class="comment">#print(context)</span></span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_date</span><span class="params">(context)</span>:</span></span><br><span class="line">    html=etree.HTML(context)</span><br><span class="line">    li_list=html.xpath(<span class="string">'//*[@id="subject_list"]/ul/li'</span>)</span><br><span class="line">    <span class="comment">#print(li_list)</span></span><br><span class="line">    book_list=[]</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        title=li.xpath(<span class="string">'div[2]/h2/a/@title'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(title)</span></span><br><span class="line">        <span class="comment">#message="".join((li.xpath('div[2]/div[1]/text()')[0]).split())</span></span><br><span class="line">        message = (li.xpath(<span class="string">'div[2]/div[1]/text()'</span>)[<span class="number">0</span>]).replace(<span class="string">'\n        \n  \n  '</span>,<span class="string">''</span>).replace(<span class="string">'\n\n      '</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="comment">#print(message)</span></span><br><span class="line">        summary=li.xpath(<span class="string">'div[2]/p/text()'</span>)</span><br><span class="line">        summary=summary[<span class="number">0</span>] <span class="keyword">if</span> summary!=[] <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#print(summary)</span></span><br><span class="line">        score=li.xpath(<span class="string">'div[2]/div[2]/span[2]/text()'</span>)</span><br><span class="line">        score=score[<span class="number">0</span>] <span class="keyword">if</span> score!=[] <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#print(score)</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8-sig'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.writer(f)</span><br><span class="line">            writer.writerow([title, message, summary, score])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'douban.csv'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8-sig'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer=csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">'书名'</span>,<span class="string">'信息'</span>,<span class="string">'简介'</span>,<span class="string">'评分'</span>])</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">63</span>):</span><br><span class="line">    context=get_content(page)</span><br><span class="line">    get_date(context)</span><br><span class="line">    print(page)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

</div></div>



<h1 id="day14-按照手册搭建-day15-又简单爬一边"><a href="#day14-按照手册搭建-day15-又简单爬一边" class="headerlink" title="day14 按照手册搭建+day15 又简单爬一边"></a>day14 按照手册搭建+day15 又简单爬一边</h1><h2 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h2><ol>
<li><p>由于我们是本地克隆，需要修改ip。</p>
<p><code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dhcp改static</span><br><span class="line">IPADDR&#x3D;192.168.100.200</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.222.2</span><br><span class="line">DNS1&#x3D;223.5.5.5</span><br><span class="line">DNS2&#x3D;223.6.6.6</span><br></pre></td></tr></table></figure>

<p>最后要重启网络<code>service network restart</code></p>
<p><font color=red>注:</font>xshell的隧道钩去掉。VT模式里初始化数字键盘选设置为普通，可使用小键盘。</p>
</li>
<li><p>每台修改主机名。记忆<code>hostname clt</code></p>
<p><code>hostnamectl set-hostname master</code></p>
<p><code>bash</code> 生效一下</p>
<p>未使用文档里的改文件的的方法</p>
</li>
<li><p>关闭防火墙。同理记忆。从windows的mysqld推测，服务的结尾都加了<code>d</code></p>
<p><code>systemctl stop firewalld</code></p>
<p>对于开机重启，比赛 不需要 <code>systemctl disable firewalld</code></p>
</li>
<li><p>映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.100.200 master</span><br><span class="line">192.168.100.201 slave1</span><br><span class="line">192.168.100.202 slave2</span><br></pre></td></tr></table></figure>

<p>他是每台写，我使用的分发。此时没<a href="#ssh">配ssh</a> ，要输密码等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;etc&#x2F;hosts slave1:&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure>

<p>最后<code>ping</code>一下</p>
</li>
<li><p>时间同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date 查看时间</span><br><span class="line">tzselect 选择时间，记忆梯子选择</span><br><span class="line">由于时间一样，暂时不管</span><br></pre></td></tr></table></figure>

<p><font color=red>注:</font><code>tzselect</code>并不会改成功，需要执行它显示的<code>TZ=&#39;Asia/Shanghai&#39;; export TZ</code>命令。使用后成功把<code>EDT</code>改成了<code>CST</code>，但还是感觉有问题，因为我用了<code>timedatectl status</code>。<a href="https://blog.csdn.net/weixin_42167759/article/details/90648225" target="_blank" rel="noopener">Linux —— 时间（tzselect、timedatactl命令，查看和修改时区，修改时区为东八区）</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每台下载ntp</span><br><span class="line">yum install -y ntp</span><br><span class="line">再master修改&#x2F;etc&#x2F;ntp.conf</span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line">重启服务</span><br><span class="line">systemctl restart ntpd.service</span><br><span class="line">测试 我是在修改文件少的机子上用date -s 00:00，然后过了几分钟用（对当然也可以等）ntpdate master同步</span><br><span class="line">当然最好同步一下</span><br></pre></td></tr></table></figure>
</li>
<li><p><span id="ssh">配ssh</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"> ssh-copy-id 地址</span><br><span class="line"> 他没有用手册里的dsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于要好几次修改/etc/profile，所以预先修改了。java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_251</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-hive-2.3.7-bin</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$HIVE_HOME&#x2F;bin:$ZOOKEEPER_HOME&#x2F;bin</span><br><span class="line">所以上传相应文件并解压</span><br><span class="line">记得source生效</span><br><span class="line">我还分发里一下&#x2F;etc&#x2F;profile和java，和生效。</span><br><span class="line">记不住分发的命令可以用xftp</span><br></pre></td></tr></table></figure>
</li>
<li><p>zookeeper</p>
<div><div class="fold_hider"><div class="close hider_title">太多隐藏</div></div><div class="fold">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拷贝zookeeper-3.4.13&#x2F;conf&#x2F;zoo_sample.cfg</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建文件夹</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;data</span><br><span class="line">创建myid</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;data&#x2F;myid</span><br><span class="line">写1 修改23</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置zoo.cfg </span><br><span class="line">修改dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;data</span><br><span class="line">他未添加dataLogDir</span><br><span class="line">添加，不知能否从0开始</span><br><span class="line">    server.1&#x3D;master:2888:3888</span><br><span class="line">    server.2&#x3D;slave1:2888:3888</span><br><span class="line">    server.3&#x3D;slave2:2888:3888</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分发&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;</span><br><span class="line">scp -r &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F; 主机名:&#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">修改每台myid</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置环境变量，此处可以在上面提前写</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13</span><br><span class="line">path后面加上:$ZOOKEEPER_HOME&#x2F;bin</span><br><span class="line">分发记得生效</span><br><span class="line">他说每分发一个都要生效一下</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动zkServer.sh start</span><br><span class="line">状态zkServer.sh status</span><br><span class="line">注意要都启动再看状态，否则会看到Connection refused (Connection refused) 误以为配错了</span><br><span class="line">启动顺序 master slave1 slave2 ，slave1会是leader</span><br></pre></td></tr></table></figure>

</div></div>
</li>
<li><p>hadoop</p>
<div><div class="fold_hider"><div class="close hider_title">太多隐藏</div></div><div class="fold">
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解压配环境变量已经在上面做了</span><br><span class="line">他说lib没有必要，从来也没用</span><br></pre></td></tr></table></figure>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置&#x2F;usr&#x2F;local&#x2F;hadoop-2.9.2&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh</span><br><span class="line">修改export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_251</span><br></pre></td></tr></table></figure>

   <div><div class="fold_hider"><div class="close hider_title">core-site.xml隐藏</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置core-site.xml</span><br><span class="line">添加</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop-2.9.2/hdfs/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">--!他们直接在tmp下，没有hdfs--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.checkpoint.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>67108864<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<div><div class="fold_hider"><div class="close hider_title">hdfs-site.xml隐藏</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置hdfs-site.xml</span><br><span class="line">添加</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-2.9.2/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-2.9.2/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编写slaves</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">编写master，他不建议这样写</span><br><span class="line">master</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">他配了yarn-env.sh</span><br><span class="line">改了export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_251&#x2F;</span><br><span class="line">都可以</span><br></pre></td></tr></table></figure>

<div><div class="fold_hider"><div class="close hider_title">yarn-site.xml隐藏</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置yarn-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.auxservices.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">配置mapred-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分发，我觉得可以都解压了，然后就只须分发hadoop目录了</span><br><span class="line">scp -r </span><br><span class="line">与此同时可以去搭hive</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">	master格式化 hadoop namenode -format</span><br><span class="line">	start-all.sh</span><br><span class="line">查看</span><br><span class="line">	master:50070</span><br><span class="line">	master:18088</span><br></pre></td></tr></table></figure>

</div></div>
</li>
<li><p>hive</p>
<div>
    <div class="fold_hider">
        <div class="close hider_title">太多隐藏</div>
    </div>
    <div class="fold">
        <div>
    <div class="fold_hider">
        <div class="close hider_title">隐藏slave2</div>
    </div>
    <div class="fold">
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave2安装mysql server</span><br><span class="line">他先下了wget，用wget下载源安装包</span><br><span class="line">我觉得这样也可以yum -y install http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log </span><br><span class="line">进入maysql</span><br><span class="line">set global validate_password_policy&#x3D;0;</span><br><span class="line">set global validate_password_length&#x3D;6;</span><br><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">可以退出重进一下</span><br><span class="line"># 下面两个用其中一个，我第二个一直让我输入</span><br><span class="line"># update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line"># grant all privileges on *. * to &#39;root&#39;@&#39;%  with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">上传connection包到slave1:&#x2F;usr&#x2F;local&#x2F;apache-hive-2.3.7-bin&#x2F;lib，比赛时应该会在某个地方，文档说&#x2F;lib下</span><br></pre></td></tr></table></figure>
    </div>
</div>
      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">master作为client，slave1作为 hive server</span><br></pre></td></tr></table></figure>
        <div>
    <div class="fold_hider">
        <div class="close hider_title">隐藏slave1</div>
    </div>
    <div class="fold">
       <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在slave1下conf</span><br><span class="line">	cp hive-env.sh.template hive-env.sh</span><br><span class="line">	vim hive-env.sh</span><br><span class="line">	修改HADOOP_HOME=/usr/local/hadoop-2.9.2</span><br><span class="line">	创建vim hive-site.xml</span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive_remote/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://slave2:3306/hive?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文档里没使用，但官方视频使用了&amp;amp;useSSL=false又加上&amp;amp;characterEncoding=UTF-8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.schema.autoCreateAll<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
    </div>
</div>
        <div>
    <div class="fold_hider">
        <div class="close hider_title">隐藏master</div>
    </div>
    <div class="fold">
     <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在master下</span><br><span class="line">cp /usr/local/apache-hive-2.3.7-bin/lib/jline-2.12.jar /usr/local/hadoop-2.9.2/share/hadoop/yarn/lib/</span><br><span class="line">修改hive-env.sh，我情愿slave发过来</span><br><span class="line">HADOOP_HOME=/usr/local/hadoop-2.9.2</span><br><span class="line">修改hive-site.xml</span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive_remote/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://slave1:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
    </div>
</div>
       <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">	slave1下</span><br><span class="line">		hive --service metastore</span><br><span class="line">	master下</span><br><span class="line">		hive</span><br><span class="line">		测试show databases;</span><br><span class="line"># 报Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class="line">有可能&lt;name&gt;hive.metastore.uris&lt;&#x2F;name&gt;值写错了</span><br><span class="line"># 报 Could not create ServerSocket on address 0.0.0.0&#x2F;0.0.0.0:9083.</span><br><span class="line">可尝试把runjar杀掉</span><br></pre></td></tr></table></figure>
    </div>
</div>

</li>
</ol>
<h2 id="day-15-爬"><a href="#day-15-爬" class="headerlink" title="day 15 爬"></a>day 15 爬</h2><ol>
<li><code>string(div/div[3]/a/em)</code>可以获取下面的所以文字。</li>
<li><code>time.time()</code>时间戳</li>
<li>字典形的str，可用<code>json.loads(str)</code>转成字典</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>大数据</tag>
        <tag>mysql</tag>
        <tag>hadoop</tag>
        <tag>hive</tag>
        <tag>zookeeper</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>我认为比较详细的java笔记</title>
    <url>/2021/03/15/%E6%88%91%E8%AE%A4%E4%B8%BA%E6%AF%94%E8%BE%83%E8%AF%A6%E7%BB%86%E7%9A%84java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基本的东西"><a href="#基本的东西" class="headerlink" title="基本的东西"></a>基本的东西</h1><p>&emsp;&emsp;<abbr title="Java Stndard Edition"><mark>Java SE</mark></abbr>：支持面向桌面级应用的Java平台，提供了完整的Java核心API。</p>
<p>&emsp;&emsp;<abbr title="Java Enterprise Edition"><mark>Java EE</mark></abbr>：是为开发企业环境下的应用程序提供的一套解决方案。</p>
<p>&emsp;&emsp;<abbr title="Java Micro Edition"><mark>Java ME</mark></abbr>：支持Java程序运行在移动终端上的平台，对JavaAPI有所简化。</p>
<p>&emsp;&emsp;<abbr title=""><mark>Java Card</mark></abbr>：支持一些Java小程序（Applets）运行在小内存设备（智能卡）上的平台。</p>
<p>&emsp;&emsp;类C语言、纯粹的面向对象、舍弃C中的指针、垃圾回收功能</p>
<p>&emsp;&emsp;<mark>特征</mark>：易学的、强制面相对象的、分布式的、健壮的、安全的、体系结构中的（？）、解释型的、性能略高、原生支持多线程的。</p>
<p>&emsp;&emsp;<mark>特点</mark>：面向对象（概念：类、对象，特性：封装、继承、多态）、健壮性、跨平台性。</p>
<p>&emsp;&emsp;内存泄露（回收不了）和内存溢出还是会出现。</p>
<p>&emsp;&emsp;JDK：Java Development Kit、JRE：Java Runtime Environment。有人问过我，当时比较迷糊，因为我常记各种知识的获取渠道，需要就立马去找。</p>
<p>&emsp;&emsp;JDK = 开发工具集 + JRE；JRE = Java SE标准类库 + JVM；</p>
<p><img src="https://i.loli.net/2021/03/15/2ySiRewxE5hrMVl.png" alt="java概念图描述.PNG"></p>
<h1 id="简短的东西"><a href="#简短的东西" class="headerlink" title="简短的东西"></a>简短的东西</h1><p>&emsp;&emsp;<code>true</code>、<code>false</code>、<code>null</code>严格不算关键字，但可以当关键字使用。<code>strictfp</code>、<code>transient</code>、<code>volatile</code>、<code>assert</code>不完全见过。<code>goto</code>、<code>const</code>保留字。</p>
<table>
<thead>
<tr>
<th align="center">byte</th>
<th align="center">1</th>
<th align="center">7</th>
</tr>
</thead>
<tbody><tr>
<td align="center">short</td>
<td align="center">2</td>
<td align="center">15</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4</td>
<td align="center">31</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8</td>
<td align="center">63</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">4</td>
<td align="center">3.403  38</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td align="center">1.798  308</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;<code>float</code>和<code>double</code>比<code>long</code>范围大，因为<code>数|幂</code></p>
<p>&emsp;&emsp;<code>int a = 128; (byte)a = -128; int a = 129; (byte)a = -127;</code></p>
<p>&emsp;&emsp;原码取反变反码+1变补码。底层以补码保存。</p>
<p>&emsp;&emsp;<code>instanceof</code> 用过几次。</p>
<p>&emsp;&emsp;<code>&gt;&gt;&gt;</code>空位0补。 <code>~</code>取反成反码。</p>
<p>&emsp;&emsp;就近原则（脑子里应该有过，很难``遇到，所以没有脑子里多次触发）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">2</span>)</span><br><span class="line">        sout;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    sout;</span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;<code>switch</code>：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>枚举(5.0)</code>、<code>String(7.0)</code></p>
<p>&emsp;&emsp;<code>default</code>位置是灵活的。会有好玩的效果。</p>
<p>&emsp;&emsp;计算这一年过来多少天：到着走，<code>case 12:这个月的总天数 11 10 9 …… 2 1:日</code>，无需<code>break</code>。</p>
<p>&emsp;&emsp;质数：<code>for n % (2 …… n-1)</code> 改进：①非质数。②<code>2……sqrt(n)</code></p>
<p>&emsp;&emsp;<code>break</code>、<code>continue</code>关键字后面不能声明执行语句。（我以前都没考虑过，因为不会这样写。）</p>
<p>&emsp;&emsp;标签<code>lable:</code>、<code>continue lable;</code>用得比较少，因为多少靠脑子就可以不要跳多层了。</p>
<p>&emsp;&emsp;空指针：可以用二维数组触发，<code>[1][] -&gt; [0][0]</code>。有人问过我<code>equals</code>的写法，当时我只记得阿里巴巴的手册有写过。</p>
<p>&emsp;&emsp;快排思想：选基数，小的放一边，大的放一边，递归。</p>
<p>&emsp;&emsp;<code>Arrays</code>一些方法<code>equals</code>、<code>toString</code>、<code>fill</code>、<code>sort</code>、<code>binarySerach</code>。</p>
<p>&emsp;&emsp;面向过程：POP，面向对象：OOP。</p>
<p>&emsp;&emsp;<img src="https://pic2.zhimg.com/v2-ce955f2368f5a436f94ad63b45ce73d1_r.jpg" alt="内存解析"></p>
<p>&emsp;&emsp;<img src="https://img-blog.csdnimg.cn/20201210185926335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ldmVyX2xhdGU=,size_16,color_FFFFFF,t_70" alt="内存解析"></p>
<p>以前应该有人问过，忘记该答这个了。</p>
<p>&emsp;&emsp;重载可以出现自动类型提升<code>(int,int)-&gt;(double,double)</code>。</p>
<p>&emsp;&emsp;5.0可变参数 ，以前是数组。</p>
<h1 id="高级点的东西"><a href="#高级点的东西" class="headerlink" title="高级点的东西"></a>高级点的东西</h1><p>&emsp;&emsp;<code>printStream</code> 继承重写下打印，设置给<code>System</code>，可以实现有趣的打印效果。</p>
<p>&emsp;&emsp;类：缺省 <code>public</code>。</p>
<p>&emsp;&emsp;<mark>MVC</mark>：将整个程序分为三个层次：视图模型层、控制器层、数据模型层。</p>
<p>模型层：model主要处理数据。</p>
<ul>
<li>数据对象封装 <code>model.bean/domain</code></li>
<li>数据库操作类 <code>model.dao</code></li>
<li>数据库 <code>model.db</code></li>
</ul>
<p>视图层：view显示数据</p>
<ul>
<li>相关工具类 <code>view.utils</code></li>
<li>自定义view <code>view.ui</code></li>
</ul>
<p>控制层：controller处理业务逻辑 </p>
<ul>
<li>应用界面相关 <code>controller.activity</code></li>
<li>存放fragment <code>controller.fragment</code></li>
<li>显示列表的远程适配器 <code>controller.adapter</code></li>
<li>服务相关的 <code>controller.service</code></li>
<li>抽取的基类 <code>controller.base</code></li>
</ul>
<p>&emsp;&emsp;<code>import static java.lang.System.*;</code>然后<code>out.println();</code> <code>import static</code>落脚的是类（/接口）里的静态结构。</p>
<p>&emsp;&emsp;重写：权限：子≥父，返回值：void—&gt;void、类—&gt;类or子类，异常：父≥子。</p>
<p>&emsp;&emsp;多态：调用父类声明过的子类方法。属性不适用多态。虚拟方法调用。父类被重写的方法。</p>
<p>&emsp;&emsp;10 == 10.0 == char 10</p>
<p>&emsp;&emsp;单元测试：①类public，②公共无参构造器，③ 方法：<code>public void method(){}</code>，④@Test —&gt;org.junit.Test</p>
<p>&emsp;&emsp;三元有类型提升</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o1); <span class="comment">// 输出 1.0</span></span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;多态的理解：</p>
<ul>
<li>代码的通用性。</li>
<li><code>equals(Object obj)</code>，<code>connection</code>。</li>
<li>抽象类、接口的使用体现了多态型。</li>
</ul>
<p>&emsp;&emsp;<code>static</code>可以修饰内部类。</p>
<h1 id="再高级点的东西"><a href="#再高级点的东西" class="headerlink" title="再高级点的东西"></a>再高级点的东西</h1><h2 id="设计模式、代码块、抽象类、接口、内部类"><a href="#设计模式、代码块、抽象类、接口、内部类" class="headerlink" title="设计模式、代码块、抽象类、接口、内部类"></a>设计模式、代码块、抽象类、接口、内部类</h2><p>&emsp;&emsp;1995年GOF四人组。</p>
<p>创建型：工厂方法、抽象工厂、单例、建造者、原形。</p>
<p>结构性：适配器、装饰器、代理、外观、桥接、组合、享元。</p>
<p>行为型：策略、模板方法、观察者、迭代子、责任链、命令、备忘录、状态、访问者、中介者、解释器。</p>
<p>好多呀。我有一个感觉：Thread用了代理模式。</p>
<p>&emsp;&emsp;java.lang.Runtime用了饿汉的单例。</p>
<table>
<thead>
<tr>
<th align="center">饿：先造</th>
<th align="center">懒：要才造</th>
</tr>
</thead>
<tbody><tr>
<td align="center">对象加载时间长</td>
<td align="center">延迟对象的创建</td>
</tr>
<tr>
<td align="center">天然线程安全</td>
<td align="center">简单写法不安全</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;以前看过详细的讲解。涉及到反射、序列化，没完全记住:sob:。主要是混乱。</p>
<p>&emsp;&emsp;一些例子：网站计数器、日志、数据库连接池（用过一点点c3p0，在Apache下的，还有几个类似的，其实就一次）、读取配置的类、Application、win的任务管理器和RecycleBin（回收站）。</p>
<p>&emsp;&emsp;代码块：可以用来初始化。修饰只能用<code>static</code>。</p>
<p>&emsp;&emsp;<code>static {}</code>：随类加载执行。<code>{}</code>：对象的创建执行。可以对对象初始化。<font color="#FB6C1"><code>{}</code>比构造先。</font>(<code>color=&quot;#FFB6C1&quot;</code>变<code>color=&quot;\#FFB6C1&quot;</code>变成绿的了，它是圆盘上旋转180度了吗？添添删删颜色也会变，应该是识别的问题，我猜的)。我说：“有时不要被main迷糊了，它所在的类也要加载”。我还说：“我还看到过premain，好像和agent有关（我不太信），好像和在线调试有关”（全很是怀疑）。</p>
<p>&emsp;&emsp;属性赋值顺序：默认→显示/代码块（看位置）→构造→对象属性，方法。</p>
<p>&emsp;&emsp;子类也可以是抽象类。</p>
<p>&emsp;&emsp;<code>abstract</code>不修饰属性、构造器、私有方法、静态方法、final的方法和类。</p>
<p>&emsp;&emsp;多态的体现：模板方法，用了抽象。像英语作文的模板。比如数据库访问的封装、junit单元测试、servlet的doGet和doPost。</p>
<p>&emsp;&emsp;接口无构造器，接口直接可以多继承。</p>
<p>&emsp;&emsp;代理模式：个人感觉就是一个帮你做事并可以在此前做一些其他事，像VPN、中介的感觉。</p>
<p>&emsp;&emsp;应用场景：</p>
<ul>
<li>安全代理：屏蔽对真实角色的直接访问。</li>
<li>远程代理：通过代理类处理远程方法调用（RMI 不知道）。</li>
<li>延迟加载</li>
</ul>
<p>&emsp;&emsp;分类：静态和动态</p>
<p>&emsp;&emsp;工厂：将创建者和调用者分开。如果我没记错的话，<code>BigDecimal</code>就用了工厂，当时我翻源码的时候感觉的，虽然当时懂皮毛。</p>
<p>&emsp;&emsp;JDK7以前<code>public static final 全局常量</code>，JDk8有了静态方法和默认方法。静态方法只能自己用，相当于工具类了。默认方法可以重写。不重写的话，父类和接口都有则父类优先。关于方法的调用：方法名：调用自己的，super.方法：父类的，接口.super.方法：接口的。</p>
<p>&emsp;&emsp;内部类有成员和局部（方法内、代码块、构造器内）之分。对于成员内部类考虑静态和非静态，它们具有/能被/可以：①调用外部类结构。②static修饰。③4种权限。④属性、方法、构造器等。⑤final。⑥abstract。关于外部类的方法可以使用<code>外部类.this.(前面可省略)方法</code>。</p>
<p>&emsp;&emsp;对于实例化内部类，静态的可以用<code>new.外部类.外部类()</code>，非静态的可以先new外部类，在用<code>变量.new内部类</code>。</p>
<p>&emsp;&emsp;内部类使用方式一（常、标准）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComparble</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyComparable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;方式二、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Integer的内的缓存。Thread内的状态枚举类。</p>
<p>&emsp;&emsp;抽象类和接口大致区别：不能被实例化、都可以被继承（单继承VS多继承）、抽象方法、抽象类有构造器。</p>
<p>&emsp;&emsp;抽象类：InputStream、OutputStream、Reader、Writer内部定义了抽象的read（）、writer（）方法。</p>
<p>&emsp;&emsp; 我听过JDK9时，接口可有私有方法。</p>
<p>&emsp;&emsp;方法的局部内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//8以后就省略了，反正都是final，干脆就不写了。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            num.sout；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Throwable类下有Error：虚拟机无法决解的严重问题。StackOverflowError、OOM：<code>new Integer[1024*1024*1024]</code>Exception：一般性问题，可处理。空指针、不存在文件、越界。对于异常，分为受检（checked）异常：编译时和非受检（unchecked）异常：运行时。</p>
<p>checked：</p>
<ul>
<li>IO——read、writer、close<ul>
<li>FileNotFound——对文件。</li>
</ul>
</li>
<li>ClassNotFound</li>
</ul>
<p>unchecked：</p>
<ul>
<li>空指针——二维数组可触发，一位数组也可以：<code>null[3]</code>，<code>null.方法</code>。</li>
<li>越界——<code>abc.charAt(3)</code>。</li>
<li>ClassCast——我认为向下转型容易触发。</li>
<li>NumberFormat——字符串转数字。</li>
<li>InputMissMatch——Scanner，我几乎不会遇到。</li>
<li>Arithmetic——算术，明着来很难触发，<code>1/0</code>。</li>
</ul>
<p>&emsp;&emsp;几个<code>catch</code>排着的话，异常顺序为<code>子子……父</code>。</p>
<p>&emsp;&emsp;常见的方法：<code>e.getMessage()</code>、<code>e.printStackTrace()</code>。我认为如果开发中是不是要结合Log。</p>
<p>&emsp;&emsp;即使有<code>finally</code>，<code>try</code>和<code>catch</code>也可以有<code>return</code>，<code>finally</code>里的<code>return</code>大。</p>
<p>&emsp;&emsp;重写的话，异常类型：父≥子，父没有抛出，则子类只能<code>try</code>。例子：<code>run</code>方法。</p>
<p>&emsp;&emsp;对于递进的方法，一般抛出，外面<code>try</code>。</p>
<p>&emsp;&emsp;<code>try</code>还可以看到无<code>catch</code>的情形。</p>
<p>&emsp;&emsp;自定义异常类的步骤：①继承。②序列号<code>serialVersionUId</code>。③一般两个构造器<code>()(String msg)</code>。</p>
<h1 id="我和它之间还有些朦胧的东西，它有面纱。"><a href="#我和它之间还有些朦胧的东西，它有面纱。" class="headerlink" title="我和它之间还有些朦胧的东西，它有面纱。"></a>我和它之间还有些朦胧的东西，它有面纱。</h1><h2 id="线程相关"><a href="#线程相关" class="headerlink" title="线程相关"></a>线程相关</h2><h3 id="基本概念等小东西"><a href="#基本概念等小东西" class="headerlink" title="基本概念等小东西"></a>基本概念等小东西</h3><p>&emsp;&emsp;程序：为完成任务，指令的集合。</p>
<p>&emsp;&emsp;进程：已经运行的一个程序。</p>
<p>&emsp;&emsp;线程：一个程序内部的一条执行路径。调度和执行的单位，有独立的运行栈和程序计数器（PC）。</p>
<p>&emsp;&emsp;一个Java程序至少有三个线程：mian（），gc，异常处理。</p>
<p>&emsp;&emsp;我听过：Java的线程是一对一的，Go的是多对多的，K开头的那个东西帮Java弄成多对多的。</p>
<p>&emsp;&emsp;并行：多个CPU同时执行多个任务。</p>
<p>&emsp;&emsp;并发：一个CPU（时间片）同时执行多个任务。</p>
<p>多线程的优点：</p>
<ol>
<li>提高应用程序的响应，对图形化界面更有意义，可增强用户体验。</li>
<li>提高CPU的效率。</li>
<li>改善程序结构，利于理解和修改。</li>
</ol>
<h3 id="前两种创建线程的方式"><a href="#前两种创建线程的方式" class="headerlink" title="前两种创建线程的方式"></a>前两种创建线程的方式</h3><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><p>&emsp;&emsp;步骤：继承Thread，重写run，创建对象，调用<code>start()</code>。</p>
<p>&emsp;&emsp;如果直接调用<code>run()</code>，则相当于直接调用方法，还在同一个线程内。</p>
<p>&emsp;&emsp;不可多次<code>start()</code>，因为状态会报异常。</p>
<p>&emsp;&emsp;Thread的部分方法，注意<code>wite</code>、<code>notify</code>、<code>notifyAll</code>在Object里。（至于为什么在这里面，我想应该是同步监视器调方法的原因。）</p>
<ul>
<li>start、run。</li>
<li>currentThread——静态，得到当前线程。</li>
<li>getName</li>
<li>setName——创建是也可以取名字。</li>
<li>yield——释放当前CPU的的执行权。</li>
<li>join——其他线程调用join，当前线程进入阻塞状态（有异常）,直到调用join的线程结束才有机会。</li>
<li>stop——过时了，如其名。</li>
<li>sleep——lang的毫秒，有异常，静态。</li>
<li>isAlive——当前线程是否存活。（我听过：有个框架对于“is”开头的方法，处理（我猜是反射）会有问题。）</li>
</ul>
<p>&emsp;&emsp;线程的调度策略有时间片和抢占式：高优先级的线程抢占CPU。Java的方法是同优先级的用先进先出、时间片，高优先级的是使用优先调度的抢占式策略。</p>
<p>关于优先级：</p>
<ul>
<li>MAX——PRIORITY：10</li>
<li>MIN——PRIORITY：1</li>
<li>NORM——PRIORITY：5</li>
</ul>
<h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><p>&emsp;&emsp;实现Runnable接口，创建对象传入Thread，这里提现了多态。（应该是Threnad(Runnable target））</p>
<p>&emsp;&emsp;这种方式方便卖票。</p>
<p>&emsp;&emsp;优先选择这个，它没有单继承的局限性，可以共享数据。</p>
<h3 id="分类和周期"><a href="#分类和周期" class="headerlink" title="分类和周期"></a>分类和周期</h3><p>&emsp;&emsp;Java线程分为守护线程和用户线程。在<code>start()</code>调用前调用<code>setDaemon(true)</code>就可用户线程变守护线程。gc就是典型的守护线程。</p>
<p><img src="https://i.loli.net/2021/03/17/mpaZNjI6rk2yBMQ.png" alt="线程状态转换图.png"></p>
<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p>&emsp;&emsp;利用同步机制</p>
<h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>&emsp;&emsp;synchronnized、synchronized、synchronizeds、synchronized、synchronized、synchronized</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    操作共享数据的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;同步监视器：锁：任何一个类的对象。</p>
<p>&emsp;&emsp;多个线程公用一把锁。</p>
<p>&emsp;&emsp;Runnable可以用<code>this</code>，继承的方式可以用<code>类.class</code>。推出类也是对象<code>Class clazz = 类.class</code>，<code>类.class</code>只会加载一次。</p>
<h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>&emsp;&emsp;用<code>synchronized</code>修饰。非静态的锁是<code>this</code>，非静态的锁是<code>当前类本身</code>。</p>
<h4 id="Lock锁——JDK5-0"><a href="#Lock锁——JDK5-0" class="headerlink" title="Lock锁——JDK5.0"></a>Lock锁——JDK5.0</h4><p>&emsp;&emsp;Lock本身是一个接口，我们使用它的一个子类ReentrantLock，参数可以是一个boolean，ture的话是公平的Lock。</p>
<ol>
<li>实例化Lock，<code>new ReentrantLock()</code>。</li>
<li>把要处理的代码放到<code>try</code>里。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//调用lock()方法</span></span><br><span class="line">    实例Lock.lock();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    实例Lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;感觉可以应用模板方法。</p>
<p>&emsp;&emsp;<code>synchronized</code>与<code>lock</code>的异同：都可以解决线程安全问题。<code>synchronized</code>在执行相应的同步代码以后，自动地释放锁。<code>lock</code>需要手动启动同步，结束同步也需要手动实现。</p>
<p>&emsp;&emsp;建议：lock→同步代码块→同步方法。其实谁都可以。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>单例修改:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(类<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        intstance = <span class="keyword">new</span> 构造();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效率差些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(类<span class="class">.<span class="keyword">class</span>)｛</span></span><br><span class="line"><span class="class">        <span class="title">if</span>(<span class="title">instance</span> </span>== <span class="keyword">null</span>)&#123;</span><br><span class="line">            intstance == <span class="keyword">new</span> 构造();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br></pre></td></tr></table></figure>

<p>效率高些</p>
<p>&emsp;&emsp;死锁：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了死锁。</p>
<p>&emsp;&emsp;一种可能形成死锁的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()&#123;两个<span class="keyword">synchronized</span>，两个锁嵌套&#125;.start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;两个<span class="keyword">synchronized</span>交换锁嵌套&#125;).start();</span><br></pre></td></tr></table></figure>





<h3 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h3><p>&emsp;&emsp;<code>wait()</code>：会释放锁。<code>notify()</code>：唤醒一个被wait的线程，喂，起来搬砖了。<code>notifiyAll</code>：唤醒所有被wait的线程。要在synchronized块里或者synchronized方法里，lock用的别的方式。</p>
<p>&emsp;&emsp;如果在外面另外声明一个唯一的对象，比如obj。此时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line">    <span class="keyword">this</span>.notify();<span class="comment">//非法的monitorState</span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;所以上面的方法，调用者必须是同步代码块或同步方法的同步监视器。</p>
<table>
    <tr>
        <th colspan=2>`sllep()`和`wait()`异同</th>
    </tr>
    <tr>
        <td colspan=2>当前线程进入阻塞状态</td>
    </tr>
    <tr>
        <td>在Thread类</td>
        <td>在Object类</td>
    </tr>
    <tr>
        <td>几乎无限制</td>
        <td>synchronized代码块和synchronized方法内，由同步监视器调用</td>
    </tr>
    <tr>
        <td>不会释放锁</td>
        <td>释放锁</td>
    </tr>
</table>




<h3 id="后两种创建线程的方式"><a href="#后两种创建线程的方式" class="headerlink" title="后两种创建线程的方式"></a>后两种创建线程的方式</h3><h4 id="Callable——有泛型"><a href="#Callable——有泛型" class="headerlink" title="Callable——有泛型"></a>Callable——有泛型</h4><p>&emsp;&emsp;可以有返回值、方法可以抛出异常、支持泛型的返回值。不过有些需要借助FutureTask类，比如获取返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableExample</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          ……</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Future接口可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。FutureTask是Future接口的唯一实现类，有泛型。FutureTask同时实现（间接）了Runnable、Future接口。它既可以作为Runnable被线程执行，又可以作为Future对到Callable的返回值。</p>
<p>&emsp;&emsp;从列子里得到步骤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。</span></span><br><span class="line">		FutureTask&lt;Integer&gt; result = <span class="keyword">new</span> FutureTask&lt;&gt;(td);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(result).start();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.接收线程运算后的结果</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Integer sum = result.get();  <span class="comment">//FutureTask 可用于 闭锁</span></span><br><span class="line">			System.out.println(sum);</span><br><span class="line">			System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">			sum += i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;创建实现Callable的类，实现Call方法，创建对象。创建FutureTask对象。用Thread接收Callable实现类对象并start。用FutureTask的get得到返回值。</p>
<p>&emsp;&emsp;Callable比Runnable强大的原因：call()有返回值、call()可以抛出异常、支持泛型。</p>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>&emsp;&emsp;当经常创建和销毁，使用量特别大的资源：并发。</p>
<p>&emsp;&emsp;好处就是：提高响应速度（减少创建新线程的时间）、降低资源消耗（重复利用）、便于管理。</p>
<p>&emsp;&emsp;5.0：ExecutorService真正的线程池接口。常见子类ThreadPoolExecutor。</p>
<ul>
<li><code>void execute(Runnable command)</code>：执行任务/命令，没有返回值。一般用来执行runnable。</li>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值。一般用来执行callable。</li>
<li><code>void shutdown()</code>：关闭连接池。</li>
</ul>
<p>&emsp;&emsp;Executors工具类，线程池的工具类，用于创建并返回不同类型的线程池。</p>
<ul>
<li><code>Executors.newCacheThreadPool()</code>：创建一个可根据需要创建新线程的线程池。</li>
<li><code>Executors.newFixedThreadPool(n)</code>：创建一个可重用固定线程数的线程池。</li>
<li><code>Executors.newSingleThradExecutor()</code>：创建一个只有一个线程的线程池。</li>
<li><code>Executors.newScheduledThradPool(n)</code>：创建一个线程池。它可以安排在给定延迟后运行命令或者定期地执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多态</span></span><br><span class="line"><span class="comment">//后面其实是ThreadPoolExecutor</span></span><br><span class="line">ExecutorService service  = Executors.newFixedTheadPool(<span class="number">10</span>);</span><br><span class="line">service.execute(Runnable实现类对象);</span><br><span class="line">service.submit(Runnable或Callable实现类对象);</span><br><span class="line">service.shutdown();</span><br></pre></td></tr></table></figure>



<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>&emsp;&emsp;final类，implements了<code>java.io.Serializale</code>、<code>Comparable</code>、<code>CharSequence</code>。用<code>final char[] value</code>存储字符串数据。其中new在堆，””在字符常量池。</p>
<ul>
<li><code>new String()</code>——<code>this.value = new char[0];  &quot;&quot;.value;</code></li>
<li><code>new String(original)</code>——<code>this.value = original.value</code></li>
<li><code>new String)(char[])</code>——<code>this.value = Arrays.copyof(vallue,value.length)</code></li>
</ul>
<p>&emsp;&emsp;一个人类，<code>P1.name.equals(P2.name) == true</code>，<code>P1.name == P2.name == true</code>。</p>
<p>&emsp;&emsp;<code>&quot;A&quot; + &quot;B&quot; = &quot;AB&quot;</code>涉及到变量名的组合，在堆里，相当于new。<code>final的变量（&quot;A&quot;） + &quot;B&quot; = &quot;AB&quot;</code></p>
<p>&emsp;&emsp;<code>intern()</code>返回常量池已经存在的，没有就添加。&gt; 返回字符串对象的规范表示。</p>
<p>&emsp;&emsp;一些方法：<code>length()</code>、<code>charAt()</code>、<code>isEmpty():return value.length == 0;</code>、<code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>trim()</code>、<code>equals(obj)</code>、<code>euqalsIgnorecCase(str)</code>、<code>concat(str)↔&quot;+&quot;</code>、<code>comapreTo(str)</code>、<code>substring(begin)</code>、<code>substring(begin,end)   [)</code>、<code>contains(CharSequence s)</code>、<code>indexOf(str)</code>、<code>indexOf(str,index)</code>、<code>rreplace(oc,nc)</code>、<code>replace(CahrSequence target,CharSequence replacement)</code>、<code>repalceAll(regex,replacement)</code>、<code>repalceFirst(regex,repalcement)</code>、<code>matches(regex)</code>、<code>split</code>、<code>toCharArray</code></p>
<ul>
<li><code>endWith(str)</code>：是否以str结束。</li>
<li><code>startWith(str)</code>：是否以str结束。</li>
<li><code>startWith(str,index)</code>：是否是子串的开始。</li>
<li><code>last类别两个index</code>：反向搜索。</li>
</ul>
<p>&emsp;&emsp;转换成字符数组：<code>str.getByte()</code>默认字符集，<code>(&quot;gbk&quot;)</code>使用GBK。复习：936——GBK，65001——utf8。</p>
<h3 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h3><p>&emsp;&emsp;都是可变的。StringBuffer线程安全，效率低。StringBuilder线程不安全，效率高。都是<code>char[]</code>。</p>
<p>&emsp;&emsp;<code>new StringBuffer()</code>→<code>new char[16]</code>。</p>
<p>&emsp;&emsp;<code>new StringBuffer(str)</code>→<code>new char[str.length + 16]</code>。</p>
<p>&emsp;&emsp;<code>length</code>→<code>count</code>。</p>
<p>&emsp;&emsp;默认扩容是原容量的2倍+2。</p>
<p>&emsp;&emsp;一些方法，<code>append(xxx)</code>有返回，方法链。<code>delete(start,end)</code>、<code>replace(start,end,str)</code>、<code>insert(offset,xxx)</code>、<code>reverse()</code>、<code>indexOf(str)</code>、<code>substring(start,end)</code>、<code>length</code>、<code>charAt()</code>、<code>setCahrAt(n,ch)</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line">StingBufer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(str);</span><br><span class="line">sb.len == <span class="number">4</span>;</span><br><span class="line">sb <span class="string">"null"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常</span></span><br><span class="line">StringBufer sb1 = <span class="keyword">new</span> StringBuffer(str)</span><br></pre></td></tr></table></figure>



<h3 id="字符常量池"><a href="#字符常量池" class="headerlink" title="字符常量池"></a>字符常量池</h3><p>&emsp;&emsp;1.6 方法区（永久区）</p>
<p>&emsp;&emsp;1.7 堆空间</p>
<p>&emsp;&emsp;1.8 方法区（元空间）</p>
<h3 id="8之前的日期和时间API"><a href="#8之前的日期和时间API" class="headerlink" title="8之前的日期和时间API"></a>8之前的日期和时间API</h3><h4 id="System的和Date"><a href="#System的和Date" class="headerlink" title="System的和Date"></a>System的和Date</h4><p>&emsp;&emsp;<code>System.currentTimeMillis()</code>单位毫秒，从1970年开始，long型。</p>
<p>&emsp;&emsp;<code>java.utils.Date</code>不利于国际化。有两个构造器<code>()</code>、<code>(long)</code>，有两个方法<code>toString()</code>、<code>getTime() 毫秒数</code>。它的子类<code>java.sql.Date</code>对应数据库的日期变量。它的构造器<code>(long)</code>，另一个无了。</p>
<p>&emsp;&emsp;<code>java.util.Date</code>向下转型到<code>java.sql.Date</code>，也可以通过<code>getTime()</code>进行new出。</p>
<h4 id="java-text-SimpleDateFormat"><a href="#java-text-SimpleDateFormat" class="headerlink" title="java.text.SimpleDateFormat"></a><code>java.text.SimpleDateFormat</code></h4><p>&emsp;&emsp;不与语言有关的方式来格式化和解析日期。</p>
<p>&emsp;&emsp;<code>SimpleDateFormat()</code>：默认模式和语言环境，也可以用<code>SimpleDateFormat(pattern)</code>来指定pattern格式。通过<code>format(Date date)</code>来格式化时间对象。通过<code>Date parse(String sourse)</code>来解析字符串。</p>
<p>&emsp;&emsp;简单使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">String str = sdf.format(d);<span class="comment">//19-2-18 上午 11:48</span></span><br><span class="line">Date d1 = sdf.parse(str);</span><br><span class="line"></span><br><span class="line">sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">str = sdf.format(d);</span><br><span class="line">d1 = sdf.parse(str);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;字符串时间转<code>java.sql.Date</code>：先得到<code>java.util.Date</code>，在通过<code>getTime()</code>生成。</p>
<h4 id="Calendar-日历"><a href="#Calendar-日历" class="headerlink" title="Calendar 日历"></a>Calendar 日历</h4><p>&emsp;&emsp;1.1加入，弃用Date，但并不好多少。<code>java.util.Calendar</code>抽象类。通过<code>Calendar.getInstance()</code>得到实例，通过<code>getClass</code>发现其实是子类<code>GregorianCalendar</code>。</p>
<p>&emsp;&emsp;一些方法：<code>get(field)</code>多种field，比如<code>Calendar.DAY_OF_WEEK</code>，多种<code>set(XXX)</code>，还有<code>add(XXX)</code>，还有<code>getTime Date</code>和<code>setTime(Date)</code>。</p>
<p>&emsp;&emsp;注意，月份是从0开始，星期是日到六。</p>
<h3 id="8中新的"><a href="#8中新的" class="headerlink" title="8中新的"></a>8中新的</h3><p>&emsp;&emsp;因为一些问题：</p>
<ul>
<li>可变性：日期时间这些类应该是不可变的（Calendar）。</li>
<li>偏移性：Date年从1900开始，而月份从0开始。</li>
<li>格式化：只对Date有用，Calendar不行。</li>
<li>线程不安全，不能处理润秒。</li>
</ul>
<p>&emsp;&emsp;<code>java,time</code>吸收了Joda-Time的精华。包含了<code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>ZoneDateTime</code>和持续时间（<code>Duration</code>）。</p>
<p>&emsp;&emsp;Date用<code>toInstant()</code>转换成<code>Instant</code>。</p>
<ul>
<li>java.time ：包含值对象的基础包。<ul>
<li>chrono ：提供不同的日历系统的访问。</li>
<li>format ：格式化和解析时间和日期。</li>
<li>temporal ：包括底层框架和扩展特性。</li>
<li>Zone ：包含时区支持的类</li>
</ul>
</li>
</ul>
<p>&emsp;&emsp;多数使用<code>time</code>、<code>format</code>，可能使用<code>temporal</code>。</p>
<p>&emsp;&emsp;<code>now()</code>创建对象，<code>LocalDate.now()</code>、<code>LocalTime.now()</code>、<code>LocalDateTime.now()</code>，可以加上时区。</p>
<p>&emsp;&emsp;<code>of()</code>可以指定，<code>LocalDateTime.of(2020,10,6,13,23,43)</code>。</p>
<p>&emsp;&emsp;<code>getXXX()</code>比如<code>getDayOfMobth</code>、<code>getMonth</code>。</p>
<p>&emsp;&emsp;<code>withXXX(XXX)</code>进行设置，有返回值，新的对象。</p>
<p>&emsp;&emsp;<code>plusXXX</code>加<code>minusXXX</code>减。</p>
<h4 id="Instant-瞬时"><a href="#Instant-瞬时" class="headerlink" title="Instant 瞬时"></a>Instant 瞬时</h4><p>&emsp;&emsp;1970年1月1日0时0分0秒，UTC，类似与Date。因为<code>java.time</code>包是基于纳秒计算的，所有Instant可以到达纳秒级。</p>
<p>&emsp;&emsp;<code>now()</code>默认UTC的Instant类的对象。</p>
<p>&emsp;&emsp;<code>ofEpochMilli(long)</code>1970上加上指定毫秒的Instant对象。</p>
<p>&emsp;&emsp;<code>对象.atOffset(ZoneOffset offset)</code>结合即时的偏移来创建OffsetDateTime对象。<code>ZoneOffset.ofHours(8)</code></p>
<p>&emsp;&emsp;<code>对象.toEpochMilli</code>即时间戳。</p>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>&emsp;&emsp;DateTimeFormatter有三种格式化方法。</p>
<ol>
<li><p>预定义的标准格式</p>
<p><code>ISO_LOCAL_DATE_TIME</code>、<code>ISO_LOCAL_DATE</code>、<code>ISO_LOCAL_TIME</code>用DateTimeFormatter点上就可创建对象。</p>
</li>
<li><p>本地化相关的格式</p>
<p><code>ofLocalizedDateTime(FormatStayle.LONG)</code> 还有<code>MEDIUM</code>、<code>SHORT</code>。用DateTimeFormatter点上就可创建对象。</p>
<p><code>ofLocalizedDate(FormatStyle.LONG)</code>多一个<code>FULL</code>。</p>
</li>
<li><p>自定义格式</p>
<p><code>ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;)</code>。用DateTimeFormatter点上就可创建对象。</p>
</li>
</ol>
<p>&emsp;&emsp;都有<code>format</code>和<code>parse</code>方法。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>&emsp;&emsp;Comparable，自然排序。当this ＞obj,返回+；当this＜obj，返回-；当this＝obj，返回0。</p>
<p>&emsp;&emsp;<del>Arrayss的sort是升序</del>。在使用时也可以利用一些包装类的compare方法。</p>
<p>&emsp;&emsp;Comparator，定制排序，里面有很多静态方法。当不方便修改代码时或已经实现的不适合时，可用。实现<code>compare</code>方法，还可以有泛型。</p>
<h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><p>&emsp;&emsp;<code>String getProperty(String key)</code>获取属性。</p>
<p>常见的</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">java.version</td>
<td align="center">如其名</td>
</tr>
<tr>
<td align="center">java.home</td>
<td align="center">java的安装目录</td>
</tr>
<tr>
<td align="center">os.name</td>
<td align="center">系统的名称</td>
</tr>
<tr>
<td align="center">os.version</td>
<td align="center">系统的版本</td>
</tr>
<tr>
<td align="center">user.name</td>
<td align="center">用户名</td>
</tr>
<tr>
<td align="center">user.home</td>
<td align="center">用户主目录</td>
</tr>
<tr>
<td align="center">user.dir</td>
<td align="center">当前工作目录</td>
</tr>
</tbody></table>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>&emsp;&emsp;<code>long round(double  a)</code>，<code>toDegrees</code>、<code>toRadians</code></p>
<h3 id="BigXXX"><a href="#BigXXX" class="headerlink" title="BigXXX"></a>BigXXX</h3><p>&emsp;&emsp;<code>BigInteger</code>不可变的任意精度整数。</p>
<p>&emsp;&emsp;<code>BigDecimal</code>不可变的任意精度有富豪十进制定点数。</p>
<h1 id="好玩的东西"><a href="#好玩的东西" class="headerlink" title="好玩的东西"></a>好玩的东西</h1><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>&emsp;&emsp;类的对象只有有限个，确定的，称此类为枚举类。一组常量，建议使用枚举类。如果只有一个对象，可以作为单例模式的实现方式。</p>
<p>&emsp;&emsp;jdk5.0前的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String SeasonName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String SeasonDesc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//私有构造器</span></span><br><span class="line">    <span class="function">privite <span class="title">Season</span><span class="params">(String neme, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SeasonName = name;</span><br><span class="line">        <span class="keyword">this</span>.SeasonDesc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供枚举类的多个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>, <span class="string">"春天在哪里"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>, <span class="string">"宁夏"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">"秋天"</span>, <span class="string">"秋天不回来"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">"冬天"</span>, <span class="string">"大约在冬季"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其他诉求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"全年都在 弹棉花"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;另一种定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Season &#123;</span><br><span class="line">    <span class="comment">//提供当前枚举类对象</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>, <span class="string">"春天在哪里"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>, <span class="string">"宁夏"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>, <span class="string">"秋天不回来"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>, <span class="string">"大约在冬季"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String desc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function">privite <span class="title">Season</span><span class="params">(String name, String desc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其他诉求</span></span><br><span class="line">    <span class="comment">//toString可不重写，sout或输出对象名。</span></span><br><span class="line">    <span class="comment">//说明父类不是Object，而是java.lang.Enum。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Enum类的常用方法：</p>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">toString()</td>
<td align="center">返回对象名。</td>
</tr>
<tr>
<td align="center">valueOf(objname)</td>
<td align="center">根据提供的objname，返回与objname同名对象。异常：非法参数。</td>
</tr>
<tr>
<td align="center">values()</td>
<td align="center">返回对象数组。（我发现不在API里，查<a href="https://www.pianshen.com/article/9971363552/）" target="_blank" rel="noopener">https://www.pianshen.com/article/9971363552/）</a></td>
</tr>
<tr>
<td align="center">equals</td>
<td align="center">可以用”==“判断枚举常量相等。本身也是”==“。</td>
</tr>
<tr>
<td align="center">hashCode</td>
<td align="center">为了和equals保持一致。不可变。</td>
</tr>
<tr>
<td align="center">getDeclaringClass</td>
<td align="center">得到所属枚举类型的class对象，用了判断两个枚举常量。</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">建议优先使用toString。</td>
</tr>
<tr>
<td align="center">ordinal</td>
<td align="center">得到当前枚举常量的次序。</td>
</tr>
<tr>
<td align="center">comapreTo</td>
<td align="center">大小（声明顺序排列）</td>
</tr>
<tr>
<td align="center">clone</td>
<td align="center">枚举不能clone。防止子类实现clone。ENUM实现了一个仅抛出不支持clone的 异常的不变clone。</td>
</tr>
</tbody></table>
<blockquote>
<p>The compiler automatically adds some special methods when it creates an enum. For example, they have a static <code>values</code> method that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type.  <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a></p>
</blockquote>
<p>&emsp;&emsp;实现接口有两种，第一种，没啥可说的。第二种，让枚举对象分别去实现<code>SPRING(&quot;春天&quot;){实现方法}</code>。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>&emsp;&emsp;JDK5.0增加了对元数据（metedata）的支持——注解。可用于修饰类、构造器、方法、成员变量、参数、局部变量的声明。</p>
<p>&emsp;&emsp;在SE中，注解存在的目的比较简单。在EE/Android中是重要角色，代替EE旧版中遗留的繁冗代码和xml配置。一定程度上，框架 = 注解 + 反射 + 设计模式。</p>
<p>&emsp;&emsp;示例：生成文档相关。<code>author</code>、<code>version</code>、<code>see</code>参考转向、<code>since</code>从哪个版本开始增加、<code>param 参数类型 说明</code>、<code>return 类型 说明</code>、<code>exception 类型 说明</code>。</p>
<p>&emsp;&emsp;示例：编译时进行格式检查。JDK内置的三个基本注解：<code>Override</code>、<code>Deprecated</code>、<code>SuppressWarrings</code>有<code>unused</code>、<code>unchecked</code>等。</p>
<p>&emsp;&emsp;示例：跟踪代码依赖性，实现替代配置文件功能。Servlet3.0使得不再需要在web.xml进行servlet配置<code>@WebServletd(&quot;/login&quot;)</code>。</p>
<p>&emsp;&emsp;示例：Spring中的事物管理。<code>@Transactional(propagation=propagation.REQUIRES_NEW,isolation=isolation.READ_COMMITTED,readonly=false,timeout=3)</code>。</p>
<p>&emsp;&emsp;示例：单元测试。<code>timeout=1000</code>超时时间，超过时间测试失败。<code>expected=Expection.class</code>声明会发生的异常。配合<code>@Test</code>使用的，单独用无意义的有：</p>
<ul>
<li><code>@BeforeClass</code>静态方法，只执行一次，类初始化时执行。</li>
<li><code>@AfterClass</code>静态方法，只执行一次，所有方法完成后执行。</li>
<li><code>@Before</code> 非静态方法，在<code>@Test</code>前，每一个<code>@Test</code>都会执行。</li>
<li><code>@After</code>非静态方法，在<code>@Test</code>后，每一个<code>@Test</code>都会执行。</li>
<li><code>@Ignore</code>不参与测试的方法上。</li>
</ul>
<p>&emsp;&emsp;自定义的话，参照SuppressWarraings。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "搬砖"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;自动继承<code>java.lang.annotation.Annotation</code>接口。成员变量以无参方法的形式来声明，类型可以有八种基本数据类型、String、class、enum、Annotation和以上对应数组。成员变量可以指定初始值，用<code>default</code>。如果只有一个参数成员，建议使用value。没有成员定义的称为标记。配上注解的信息处理流程才有用意义。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>&emsp;&emsp;JDK提供4种元注解用来修饰其他注解，解释说明。</p>
<p>&emsp;&emsp;<code>@Retention(XXX)</code>指定声明周期，有一个枚举类RetentionPolicy。<code>SOURCE</code>源文件有效，编译器直接丢弃这种策略的注释。<code>CLASS</code>在class文件有效，运行java程序时，JVM不会保留注解。这是默认值。<code>RUNNTIME</code>运行时有效，运行java程序时，JVM会保留注释，程序可以通过反射获取该注解。</p>
<p>&emsp;&emsp;<code>@Target(value={ElementType.XXX……})</code>指定能用于哪些程序元素。<code>CONSTRUCTOR</code>，<code>FIELD</code>域、<code>LOCAL_VARIABLE</code>局部变量、<code>METHOD</code>、<code>PACKAGE</code>包，比较特殊的感觉、<code>PARAMETER</code>参数、<code>TYPE</code>类，接口（包含注解类型），enum的声明。</p>
<p>&emsp;&emsp;自定义注解一般都会用Retention和Target。</p>
<p>&emsp;&emsp;频率低的注解，一般不会用。在下面。</p>
<p>&emsp;&emsp;<code>@Documented</code>将被javadoc提取成文档。默认javadoc无注解。此时Retention值为RUNTIME。</p>
<p>&emsp;&emsp;<code>@Inherit</code>使具有继承性。类被注解，子类自动有注解。实际应用中，使用较少。</p>
<p>&emsp;&emsp;反射获取注解信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Demo&gt; clazz Demo<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Annotation[] annotataions = clazz.getAnnotations();</span><br><span class="line">遍历打印一下</span><br></pre></td></tr></table></figure>



<h2 id="JDK8的注解新特性"><a href="#JDK8的注解新特性" class="headerlink" title="JDK8的注解新特性"></a>JDK8的注解新特性</h2><h3 id="可重复注解"><a href="#可重复注解" class="headerlink" title="可重复注解"></a>可重复注解</h3><p>&emsp;&emsp;以前的方式。一个<code>MyAnnotation</code>，一个<code>MyAnnotations{MyAnnotation[] value();}</code>。用<code>@MyAnnotations({@MyAnnotation(value=&quot;XXX&quot;),@MyAnnotation(value=&quot;XXXX&quot;)})</code>。</p>
<p>&emsp;&emsp;现在。新的注解<code>@Repeatable(MyAnnotations.class)</code>。要求MyAnnotation和MyAnnotations的Target、Retention等元注解一致。用<code>@MyAnnotations(value=&quot;XXX&quot;) @MyAnnotations(value=&quot;XXXX&quot;)……</code>。</p>
<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>&emsp;&emsp;<code>class Demo&lt;注解 T&gt;{}</code>Target要有<code>TYPE_PARAMETER</code>。能写在类型变量的声明语句中，比如泛型声明。</p>
<p>&emsp;&emsp;<code>throws 注解 异常类名</code>、<code>ArrayList&lt;注解 String&gt;</code>、<code>int num = (注解 int)10L;</code>Target要有<code>TYPE_USE</code>。能写在使用类型的任何语句中。</p>
<p>&emsp;&emsp;反射能拿到。</p>
<h1 id="大头但也好玩"><a href="#大头但也好玩" class="headerlink" title="大头但也好玩"></a>大头但也好玩</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>&emsp;&emsp;可以分为Collection和Map两大体系。</p>
<pre class="mermaid">flowchart BT;
subgraph iterator [ ]
a1[ListIIterator] --继承-->a2[terator];
end

a3[Collection 单列 存对象] --获取-->iterator;

a4[List 接口 有重 类似动态数组] --继承-->a3;
a4 --获取--> iterator;
a6[Vector] -.实现.-> a4;
a7[ArrayList] -.实现.->a4;
a8[LinkedList] -.实现.->a4;
Stack -.继承.-> a6;

a5[Set 接口 不重 类似数学集合] --继承-->a3;
a9[HashSet] -.实现.->a5;
a10[SortedSet] --继承-->a5;
a11[LinkedHashSet] --继承-->a9;
a12[TreeSet] -.实现.->a10;</pre>

<pre class="mermaid">flowchart BT;
Hashtable -.实现.-> Map;
HashMap -.实现.-> Map;
SortedMap --继承--> Map;

Properties --继承--> Hashtable;
LinkedHashMap --继承--> HashMap;
TreeMap --实现--> SortedMap;</pre>

<p>&emsp;&emsp;Hashtable没错。</p>
<h3 id="Collection接口部分API"><a href="#Collection接口部分API" class="headerlink" title="Collection接口部分API"></a>Collection接口部分API</h3><p>&emsp;&emsp;<code>add(obj)</code>、<code>size()</code>、<code>addAll(Collection coll)</code>、<code>isEmpty() size==0</code>、<code>clear()</code>、<code>contains(Object obj)</code>用的equals、<code>containsAll(Collection c)</code>、<code>remove(Object obj)</code>、<code>removeAll(Collection c)</code>差集，去掉共同部分、<code>retrainAll(Collection c)</code>相当于交集、<code>equals(Object o)</code>、<code>hashcode()</code>。</p>
<p>&emsp;&emsp;得到Collection可以用<code>Arrays.asList(T... a)</code>，变成数组可以用<code>toArray()</code>。小心<code>Arrays.asList(new int[]{123,456})</code>，会吧数组当成一个元素。可以<code>Arrays.asList(123,456)</code>或者<code>int</code>换<code>Integer</code>。</p>
<p>&emsp;&emsp;<code>iterator()</code>返回Iterator接口实例。迭代器模式：提供一种方法访问容器对象中各个元素而不需要暴露该对象的内部细节。迭代器过多<code>next()</code>会<code>NosuchElementException</code>。每次遍历都要重新生成迭代器。<code>迭代器对象.remove()</code>删除元素。未调用<code>next()</code>或上次next调用了remove，再调用remove，会<code>IllegalStateException</code>。</p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>&emsp;&emsp;ArrayList、LInkedList、Vector的异同。都实现了List接口，有序，可重复。</p>
<ul>
<li>ArrayList 作为List的主要实现类 1.2 效率高 线程不安全。<code>Object[] elementData</code>。</li>
<li>Vector 作为List的古老实现类 1.0前朝的臣子 效率低 线程安全。<code>Object[] elementData</code>。</li>
<li>LinkedList 其次的 双向链表存储 频繁地插入和删除比ArrayList效率高。</li>
</ul>
<p>&emsp;&emsp;反源码看到的<code>modCount++</code>，涉及快速失败机制。</p>
<h3 id="7与8"><a href="#7与8" class="headerlink" title="7与8"></a>7与8</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>&emsp;&emsp;()→10的Object[] elementData。扩容1.5倍。</p>
<p>&emsp;&emsp;add(123)→elementData[0] = new Integer(123)。</p>
<p>&emsp;&emsp;不够时扩容，同时复制原来数据。</p>
<p>&emsp;&emsp;建议使用带参构造器。</p>
<p>&emsp;&emsp;8中代码修改了，注释没改。第一个add时才创建10的数组。()→{}，add判断{}是否取得最大容量，后续无异。</p>
<p>&emsp;&emsp;7类似于饿汉。8类似于懒汉，延迟数组的创建，节省内存。</p>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>&emsp;&emsp;没什么，就是为了虚假的强迫症。node体现双向链表。</p>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>&emsp;&emsp;78()→(10)，扩容2倍。为了安全也不愿意用Vector，有collections的synchronizedList得到一个安全的。</p>
<h3 id="List的一些方法"><a href="#List的一些方法" class="headerlink" title="List的一些方法"></a>List的一些方法</h3><ul>
<li><code>add(index, o)</code></li>
<li><code>addAll(index, coll)</code></li>
<li><code>get(index)</code></li>
<li><code>indexOf(o)</code></li>
<li><code>lastIndexOf(o)</code></li>
<li><code>Object remove(index)</code> 和Collcetion的<code>Object remove(o)</code></li>
<li><code>Object set(index, o)</code></li>
<li><code>sublist(from, to)</code></li>
</ul>
<h3 id="一个关于LIst的题"><a href="#一个关于LIst的题" class="headerlink" title="一个关于LIst的题"></a>一个关于LIst的题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        updateList(list);</span><br><span class="line">        System.out.println(<span class="string">"list = "</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>  没有定义新的方法。</p>
<ul>
<li>HashSet：set接口主要实现类，不安全，null值。</li>
<li>LinkedHashSet：HashSet子类，遍历内部数据可以按照添加的顺序。</li>
<li>TreeSet：红黑树，可以按照对象指定属性进行排序。</li>
</ul>
<p>  Set无序性≠随机性。以HashSet为例，存储的数据在底层数组中并非按照数组索引顺序添加而是根据Hash值。</p>
<p>  不可重复性要用equals和hashcode。</p>
<p>  底层是数组+链表。</p>
<p>  向Set添加数据，一定要重写hashcode和equals。</p>
<p>  一致性：相等的对象必须具有相等的散列码。</p>
<p>  HashSet和HashMap有关系：HashSet里在<code>new HashMap&lt;&gt;()</code>。</p>
<h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>  <img src="https://i.loli.net/2021/03/15/k72TfynWlw8CP9N.png" alt="LinkedHashSet感觉图.png"></p>
<p>  频繁遍历比HashSet高。</p>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>  数据要是相同类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add <span class="number">123</span> <span class="number">456</span> <span class="string">"AA"</span>  ClassCastException</span><br><span class="line">数字从小到大</span><br></pre></td></tr></table></figure>

<p>  自然排序中，相同用<code>compareTo</code>判断是否相同。相同返回0。</p>
<p>  红黑树，查询速度比List快。</p>
<p><code>new TreeSet(Comparator com)</code>定制排序。判断相同用<code>compare</code>，相同返回0。</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一个Persion，重写了equals和hashcode。</span><br><span class="line"> </span><br><span class="line">p1 （<span class="number">1001</span>, “AA”）</span><br><span class="line">p2  (<span class="number">1002</span>, <span class="string">"BB"</span>)</span><br><span class="line">set.add(p1) set.add(p2)</span><br><span class="line">p1.name=<span class="string">"CC"</span> <span class="comment">//hashcode变了</span></span><br><span class="line">set.remove(p1) <span class="comment">//删不了</span></span><br><span class="line">sout 有两个</span><br><span class="line">set.add(<span class="keyword">new</span> P(<span class="number">1001</span>, <span class="string">"CC"</span>))<span class="comment">//我：成功，因为位置不一样。</span></span><br><span class="line">sout 有三个</span><br><span class="line">set.add(<span class="keyword">new</span> P(<span class="number">1001</span>, <span class="string">"AA"</span>))<span class="comment">//我：位置相同但equals不一样。</span></span><br><span class="line">sout 有四个</span><br></pre></td></tr></table></figure>



<h4 id="对应"><a href="#对应" class="headerlink" title="对应"></a>对应</h4><p>  为什么不讲源码就是因为。</p>
<pre class="mermaid">graph TB;
HashSet --对应-->HashMap
LinkedHashSet --对应--> LinkedHashMap
TrssSet --对应--> TreeMap</pre>





<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>HsahMap：Map的主要实现类，不安全，效率高，null的key和value。<ul>
<li>LinkedHashMap：保证在遍历时，按照添加顺序遍历。</li>
</ul>
</li>
<li>TreeMap：红黑树，保证按照添加的key-value对进行排序，实现排序遍历（key)。</li>
<li>Hashtable：Map的古老实现类，安全，效率第，不能null的key和value，会空指针。<ul>
<li>Properties：配置文件，key和value都是String。</li>
</ul>
</li>
</ul>
<p>  put的是Entry，Entry有key和value，也是无序不可重复，使用Set存储所有Entry。</p>
<p>  key是无序的，不可重复的，使用Set存储所有的key。</p>
<p>  value是无序的，可重复的，使用Collection存储所有的value。</p>
<p><img src="https://i.loli.net/2021/03/15/dDO76np8m3KBPQt.png" alt="Map结构的理解.PNG"></p>
<p>&emsp;&emsp;针对上图，此时我还没翻源码，但我想到的一种可能：内部类或者内部接口。</p>
<p>  以HashMap为例，key要<code>equals</code>和<code>hashcode</code>，value要<code>equals</code>。</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><ul>
<li><p>7 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HsahMap map = <span class="keyword">new</span> HashMap();<span class="comment">// 长度是16的一位数组Entry[] table。</span></span><br><span class="line">……</span><br><span class="line">map.put(k,v);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算key的hash值，与上数组长度-1得数组位置。</span></span><br><span class="line"><span class="comment">空则加入成功，不空则比较hash值。</span></span><br><span class="line"><span class="comment">不同则加入成功，同则比较equals，true则替换value，false则加入成功。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>扩容：2倍，复制。</p>
<p><img src="https://i.loli.net/2021/03/15/4kr1qp69fYxwdy2.png" alt="HashMap存储结构7.PNG"></p>
</li>
<li><p>8</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HashMap();<span class="comment">//没有创建16的数组。数组不加Entry，叫node。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">首次put创建长度16的数组。当数组的某个位置上的元素以链表形式存在的数据个数＞8，且数组长度＞64时，此时此索引位置上的数据改为使用红黑树存储。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/03/15/bDOEJcpZA8M2Yzy.png" alt="HashMap存储结构8.PNG"></p>
</li>
<li><p>7的码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(capacity &lt; <span class="number">16</span>)</span><br><span class="line">    capacity &lt;&lt;= <span class="number">1</span>;<span class="comment">//变2的多少幂</span></span><br><span class="line"></span><br><span class="line">hash&amp;(length-<span class="number">1</span>)<span class="comment">//length-1转成二进制数，基本就明白了吧</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其他和量</p>
<p>put返回旧值/null，曾经做leetcode的一个题里，有人利用到了这个，真是太棒了。</p>
<p>超临界值且要存放的位置非空时，扩容，2倍。</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>DEFAULT_INITIAL_CAPACITY</code></td>
<td align="center">默认容量16</td>
</tr>
<tr>
<td align="center"><code>MAIMUM_CAPACITHY</code></td>
<td align="center">支持最大扩容2^30</td>
</tr>
<tr>
<td align="center"><code>DEFAULT_LOAD_FACTOR</code></td>
<td align="center">默认加载因子0.75</td>
</tr>
<tr>
<td align="center"><code>TREEIFY_THRESHOLD</code></td>
<td align="center">Bucket中链表长度大于改默认值，转化为红黑树</td>
</tr>
<tr>
<td align="center"><code>UNTREEIFY_THRESHOLD</code></td>
<td align="center">Bucket中红黑树存储的Node小于该默认值，转化为链表</td>
</tr>
<tr>
<td align="center"><code>MIN_TREEIFY_CAPACITY</code></td>
<td align="center">桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少是TREEIF_THRESHOLD的4倍。）</td>
</tr>
<tr>
<td align="center"><code>table</code></td>
<td align="center">存储元素的数组，总是2的n次幂</td>
</tr>
<tr>
<td align="center"><code>entrySet</code></td>
<td align="center">存储具体元素的集</td>
</tr>
<tr>
<td align="center"><code>size</code></td>
<td align="center">HashMap中存储的键值对的数量</td>
</tr>
<tr>
<td align="center"><code>modCount</code></td>
<td align="center">HashMap扩容和结构改变的次数（我：快速失败机制）</td>
</tr>
<tr>
<td align="center"><code>threshold</code></td>
<td align="center">扩充临界值</td>
</tr>
<tr>
<td align="center"><code>loadFactor</code></td>
<td align="center">填充因子</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>&emsp;&emsp;HashMap的子类，重写了newNode。</p>
<p>&emsp;&emsp;内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;HashMap的内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="title">implement</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;当时看到这里，产生了内部接口的概念，查了一下，有相关的东西。</p>
<h4 id="Map的一些方法，以HashMap为例"><a href="#Map的一些方法，以HashMap为例" class="headerlink" title="Map的一些方法，以HashMap为例"></a>Map的一些方法，以HashMap为例</h4><p>&emsp;&emsp;<code>Object put(ok,ov)</code>、<code>void putAll(Map m)</code>、<code>Object remove(ok)</code>、<code>void clear()</code>、<code>get(ok)</code>、<code>boolean containsKey(ok)</code>、<code>boolean containsValue(ov)</code>、<code>size()</code>、<code>isEmpty()</code>、<code>equals(o)</code>、<code>Set keySet()</code>、<code>Collection values()</code>、<code>Sete entrySet()</code>。</p>
<h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>&emsp;&emsp;操作Set、List、Map的工具类。</p>
<ul>
<li><p>排序</p>
<p><code>reverse(list)</code>、<code>shuffle(list)</code>、<code>sort(list)</code>、<code>sort(list,comparator)</code>、<code>swap(list,int,int)</code></p>
</li>
<li><p>查找替换</p>
<p><code>Object max(coll)</code>、<code>Object max(coll,comparator)</code>、<code>min 同理</code>、<code>int frequency(coll,obj)ob次数</code>、<code>void copy(List dest,List src) src复制到dest（List dest=Arrays.asList(new Object[src.size)()])）</code>、<code>boolean replaceAll(List&lt;T&gt; list,T old, T new)新的换所有旧值</code>、<code>synchronizedXXX()</code>。</p>
</li>
</ul>
<h2 id="泛型-不大但按顺序放这里"><a href="#泛型-不大但按顺序放这里" class="headerlink" title="泛型,不大但按顺序放这里"></a>泛型,不大但按顺序放这里</h2><p>&emsp;&emsp;容器设计阶段和声明阶段不能确定到底存什么类型对象，所以1.5前只能把元素类型设计为Object。1.5后用泛型解决。</p>
<p>&emsp;&emsp;<code>ClassCastException</code>：XX→O→XX。</p>
<p>&emsp;&emsp;1.5接口、集合、集合类都修改为带泛型的结构。</p>
<p>&emsp;&emsp;实例化时未指明泛型，默认Object类型。</p>
<blockquote>
<p>切不可轻视初学者，轻视他人有无边无量的罪。下下人有上上智，上上人有没意志。——慧能</p>
</blockquote>
<p>&emsp;&emsp;自定义泛型结构<code>class Demo&lt;T&gt;{ T orderT  ;}</code>，定义了泛型实例化时建议带上。子类继承时，可以指明。指明后子类就是普通类。子类继承可以部分保留分类的泛型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">ArrayList&lt;Integer&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//list1 list2不能相互赋值</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在类/接口上声明的泛型，在静态方法中不能使用类的泛型。异常类不能是泛型。</p>
<p>&emsp;&emsp;不能使用<code>new E[]</code>，但可以<code>E[] eles = (E[])new Object[capacity]</code>。（不太好吧。）</p>
<p>&emsp;&emsp;泛型方法：在方法总中出现了泛型的结构，泛型参数与类的泛型参数没有关系。→泛型方法所属的类是不是泛型类都没有关系。可以是静态的，泛型参数调用时确定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">arrayToList</span><span class="params">(E[] arr)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;通配符：？(数据库占位符)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">list = list;</span><br><span class="line">list = list2;</span><br><span class="line"></span><br><span class="line">list&lt;String&gt; list3 = <span class="keyword">new</span> ArraysList&lt;&gt;();</span><br><span class="line">list3.add(<span class="string">"AA"</span>);</span><br><span class="line">list3.add(<span class="string">"BB"</span>);</span><br><span class="line">list3.add(<span class="string">"CC"</span>);</span><br><span class="line">list = list3;</span><br><span class="line">list.add(<span class="string">"不能添加数据"</span>);</span><br><span class="line">list.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Object o = list.get(<span class="number">0</span>);<span class="comment">//总归是Object的子类</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;对于<code>List&lt;?&gt;</code>不能向其添加数据但null可以加。</p>
<p>&emsp;&emsp;有限制条件的通配符:<code>&lt;? extends Person&gt;</code>：上限Persion，<code>&lt;?  super Persion&gt;</code>：下限Persion。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Persion&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;? <span class="keyword">super</span> Persion&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; list3 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Persion&gt; list4 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Object&gt; list5 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = list3;</span><br><span class="line">list1 = list4;</span><br><span class="line">list1 = list5;<span class="comment">//不行</span></span><br><span class="line"></span><br><span class="line">list2 = list3;<span class="comment">//不行</span></span><br><span class="line">list2 = list4;</span><br><span class="line">list2 = list5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="comment">//假设上面都赋值了</span></span><br><span class="line">list1 = list4;</span><br><span class="line">Object o = list1.get(<span class="number">0</span>);</span><br><span class="line">Persion p = list1.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">list1 = list3;</span><br><span class="line">Persion p = list1.get(<span class="number">0</span>);</span><br><span class="line">Student s = list1.get(<span class="number">0</span>);<span class="comment">//不行 得到的可能比Persion小，为了包含所有，要取大的，相当于上确界。</span></span><br><span class="line"></span><br><span class="line">list2 = list4;</span><br><span class="line">Object o = list2.get(<span class="number">0</span>);<span class="comment">//只能是Object 得到的可能比Persion大，但再大大不过Object。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入 要理解多态</span></span><br><span class="line">list1.add(<span class="keyword">new</span> Student());<span class="comment">//不行 </span></span><br><span class="line"></span><br><span class="line">list2.add(<span class="keyword">new</span> Persion());</span><br><span class="line">list2.add(<span class="keyword">new</span> Student());</span><br></pre></td></tr></table></figure>







<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>&emsp;&emsp;可以是文件也可以是目录，在<code>java.io</code>下。它的构造器有<code>File(&quot;233.txt&quot;)</code>、<code>File(&quot;parent&quot;,&quot;child&quot;)</code>、<code>File(File parten, &quot;child&quot;)</code>和<code>File(URI uri)</code>。</p>
<p>&emsp;&emsp;对于分隔符，windo和DOSs用<code>\</code>，UNIX和URL用<code>/</code>，为了跨平台，File类提供一个常量<code>public static final Sting separator</code>来分割。</p>
<ul>
<li><p>获取功能</p>
<p><code>getAbsolutePath()</code>、<code>getPath()</code>、<code>getName()</code>、<code>getParent()</code>上层文件目录路径，无则null、<code>long length()</code>、<code>lastModified()</code>最后一次修改时间。文件不在也不会报错</p>
</li>
</ul>
<p>  <code>String[] list()</code>、<code>File[] lastFile()</code>。</p>
<ul>
<li><p>重命名功能</p>
<p><code>boolean renameTo(File dest)</code>重名为指定的文件路径。要成功的话，调用者要在硬盘存在，dest不能存在。可以文件移动、重命名、修改文件夹名称。</p>
</li>
<li><p>判断功能</p>
<p><code>isDirectory()</code>、<code>isFile()</code>、<code>exists()</code>、<code>canRead()</code>、<code>canWrite()</code>、<code>isHidden()</code>。不存在时，要注意</p>
</li>
<li><p>创建功能</p>
<p><code>boolean creatNewFile()</code>存在则不创建，返回false、<code>boolean mkdir()</code>存在则不创建，上层目录不存在也不创建、<code>boolean mkdirs()</code>。</p>
</li>
<li><p>删除功能</p>
<p><code>delete()</code>不走回收站。</p>
</li>
</ul>
<h3 id="IO流-1"><a href="#IO流-1" class="headerlink" title="IO流"></a>IO流</h3><p>&emsp;&emsp;input和output相对于（内存）程序而言。</p>
<p>分类：</p>
<ul>
<li><p>字节流（8bit）,字符流（16bit）。</p>
</li>
<li><p>输入流，输出流。</p>
</li>
<li><p>节点流，处理流。（大部分教什么大水管套小水管，根本不好理解，反而节点流、处理流好理解多了。）</p>
<table>
<thead>
<tr>
<th align="center">（抽象基类）</th>
<th align="center">字节流</th>
<th align="center">字符流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">输入流</td>
<td align="center">InputStream</td>
<td align="center">Reader</td>
</tr>
<tr>
<td align="center">输出流</td>
<td align="center">OutPutStream</td>
<td align="center">Writer</td>
</tr>
</tbody></table>
</li>
</ul>
<p>&emsp;&emsp;java的IO流共涉及40多个类，都是从抽象基类派生的。</p>
<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">字节输入流</th>
<th align="center">字节输出流</th>
<th align="center">字符输入流</th>
<th align="center">字符输出流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">抽象基类</td>
<td align="center"><font color= blue>InputStream</font></td>
<td align="center"><font color= blue>OutputStram</font></td>
<td align="center"><font color= blue>Reader</font></td>
<td align="center"><font color= blue>Writer</font></td>
</tr>
<tr>
<td align="center">访问文件（节点流）</td>
<td align="center"><font color= blue>FileInputStream</font></td>
<td align="center"><font color= blue>FileOutputStram</font></td>
<td align="center"><font color= blue>FileReader</font></td>
<td align="center"><font color= blue>FileWriter</font></td>
</tr>
<tr>
<td align="center">访问数组</td>
<td align="center">ByteArrayInputStream</td>
<td align="center">ByteArrayOutputStram</td>
<td align="center">CharArrayReader</td>
<td align="center">CharArrayWriter</td>
</tr>
<tr>
<td align="center">访问管道</td>
<td align="center">PipedInputStream</td>
<td align="center">PipedOutputStram</td>
<td align="center">PipedReader</td>
<td align="center">PipedWriter</td>
</tr>
<tr>
<td align="center">访问字符串</td>
<td align="center">✖</td>
<td align="center">✖</td>
<td align="center">StringReader</td>
<td align="center">StringWriter</td>
</tr>
<tr>
<td align="center">缓冲流</td>
<td align="center"><font color= blue>BufferedInputStream</font></td>
<td align="center"><font color= blue>BufferedOutputStram</font></td>
<td align="center"><font color= blue>BufferedReader</font></td>
<td align="center"><font color= blue>BufferedWriter</font></td>
</tr>
<tr>
<td align="center">转换流</td>
<td align="center">✖</td>
<td align="center">✖</td>
<td align="center">InputStreamReader</td>
<td align="center">OutputStramWriter</td>
</tr>
<tr>
<td align="center">对象流</td>
<td align="center"><font color= blue>ObjectInputStream</font></td>
<td align="center"><font color= blue>ObjectOutputStram</font></td>
<td align="center">✖</td>
<td align="center">✖</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">FilterInputStream</td>
<td align="center">FilterOutputStram</td>
<td align="center">FilterReader</td>
<td align="center">FilterWriter</td>
</tr>
<tr>
<td align="center">打印流</td>
<td align="center">✖</td>
<td align="center">PrintStream</td>
<td align="center">✖</td>
<td align="center">PrintWriter</td>
</tr>
<tr>
<td align="center">推回输入流</td>
<td align="center">PushbackInputStream</td>
<td align="center">✖</td>
<td align="center">PushbackReader</td>
<td align="center">✖</td>
</tr>
<tr>
<td align="center">特殊流</td>
<td align="center">DataInputStream</td>
<td align="center">DataOutputStram</td>
<td align="center">✖</td>
<td align="center">✖</td>
</tr>
</tbody></table>
<h3 id="FileReader和FileWriter"><a href="#FileReader和FileWriter" class="headerlink" title="FileReader和FileWriter"></a>FileReader和FileWriter</h3><p>&emsp;&emsp;<code>read()</code>返回一个字符（int），如果到达文件末尾，返回-1。<code>read(char[] cbuf)</code>返回读入数组的字符个数。<code>read(char[] cbuf, int off, int len)</code>很少用。</p>
<p>&emsp;&emsp;输出时，如果文件不存在会自动创建文件，如果文件存在，当<code>FileWriter(file,append:false)</code>时（默认覆盖），覆盖，当<code>FileWriter(file,append:true)</code>时，追加。</p>
<h3 id="FileInputStream和FileOutputStram"><a href="#FileInputStream和FileOutputStram" class="headerlink" title="FileInputStream和FileOutputStram"></a>FileInputStream和FileOutputStram</h3><p>&emsp;&emsp;处理文本文件（读）,可能出现乱码。复制到是可以。</p>
<p>&emsp;&emsp;关闭外层流的同时內层流也会自动关闭。</p>
<h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><p>&emsp;&emsp;一种处理流。提高了速度。</p>
<p>&emsp;&emsp;缓冲8192，8kb。</p>
<p>&emsp;&emsp;<code>flush()</code>刷新缓冲区。</p>
<p>&emsp;&emsp;BufferedReader有<code>String readLine()</code>，到末尾返回null。不包含换行符，可以用<code>newLine()</code>。</p>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>&emsp;&emsp;字节流和字符流之间的转换。编码解码。</p>
<p><img src="https://i.loli.net/2021/03/16/ImZGgzUxphQY3CA.png" alt="转换流.PNG"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"233.txt"</span>), <span class="string">"UTF-8"</span>))&#123;</span><br><span class="line">    <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(cbuf, <span class="number">0</span>, len));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><p>&emsp;&emsp;<code>System.in</code>标准输入流，默认键盘输入，类型是InputStream。<code>System.out</code>标准输出流，默认从控制台输出，类型是PrintStream，是OutputStream的子类。通过<code>setIn</code>、<code>setOut</code>进行重定向。</p>
<p>&emsp;&emsp;一个题目键盘读入转大写输出，e或exit退出。①Scaner，②</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))) &#123;</span><br><span class="line">    System.out.println(<span class="string">"请输入你要转换的字符："</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        String data = br.readLine();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"e"</span>.equalsIgnoreCase(data) || <span class="string">"exit"</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"欢迎下次再用，再见！"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(data.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><p>&emsp;&emsp;实现将基本数据类型的数据格式转化为字符串输出。</p>
<p>打印流：PrintStream和PrintWriter。</p>
<ul>
<li>提供了一系列重载的<code>printl()</code>和<code>println()</code>方法。</li>
<li>不会抛出IOExcepiton。</li>
<li>有自动的flush功能。</li>
<li>打印所有的字符都使用平台默认的字符编码转换为字节。在需要写入字符而不是字节的情况下，应该使用PrintWriter类。</li>
<li><code>System.out</code>返回的是PrintStream的实例。</li>
</ul>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>&emsp;&emsp;DataInputStream和DataOutputStram，为了方便得操作java的基本数据类型和String（字节数组）。</p>
<ul>
<li><p>DataInputStream的方法</p>
<p><code>XXX readXXX()</code>、<code>String readUTF()</code>、<code>void readFully(bute[] b)</code>。</p>
</li>
<li><p>DataOutputStram的方法</p>
<p>read改成write。</p>
</li>
</ul>
<p>&emsp;&emsp;（EOF异常）</p>
<p>&emsp;&emsp;（IO流体现装饰器设计模式）</p>
<h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>&emsp;&emsp;用于存储和读取基本数据类型数据或对象的处理流。</p>
<p>&emsp;&emsp;序列化和反序列化。</p>
<p>&emsp;&emsp;不能序列化static和transient修饰的成员变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"233.dat"</span>))) &#123;</span><br><span class="line">    oos.writeUTF(<span class="string">"修身养性"</span>);</span><br><span class="line">    oos.flush();<span class="comment">//必须要显示写吗？有什么道道吗</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;方法我我认为和数据流的差不多。</p>
<h4 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h4><p>&emsp;&emsp;实现Serializable或Extrenailzable接口之一（NotSerializableException）。需要一个全局常量<code>public static seriaVersionUTD</code>用来表明类的不同版本的兼容性。没有显示定义的话，它的值是java运行时根据类的内部细节自动生成的。没写的话，类变了，反序列化会报错。保证内部属性也必须是可序列化的。</p>
<h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h3><p>&emsp;&emsp;在<code>java.io</code>下，直接继承与<code>java.lang.Object</code>。实现了DataInput和DataOutput，可读可写，还是要两个。支持“随机访问”的方式。程序可以直接跳到文件的任意地方读写文件。支持只访问文件的部分内容。包含一个记录指针来标记当前读写位置。<code>long getFilePointer()</code>得到位置，<code>void seek(long pos)</code>定位到pos位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"src\\女神.tif"</span>, <span class="string">"r"</span>);</span><br><span class="line">     RandomAccessFile raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"src\\女神1.tif"</span>, <span class="string">"rw"</span>)) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        mode访问模式</span></span><br><span class="line"><span class="comment">        r只读 不创建文件</span></span><br><span class="line"><span class="comment">        rw 不存在则创建</span></span><br><span class="line"><span class="comment">        rwd rw+同步文件内容的更新</span></span><br><span class="line"><span class="comment">        rws rw+同步文件内容的更新和元数据的更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">byte</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = raf1.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        raf2.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">abcdefg</span><br><span class="line">0123456</span><br><span class="line">*&#x2F;</span><br><span class="line">raf2.seek(3);</span><br><span class="line">raf2.write(&quot;xyz&quot;.getBytes());</span><br><span class="line">&#x2F;&#x2F;efg变xyz</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;断点续传。</p>
<h3 id="NIO-New-Non-BlockingIO"><a href="#NIO-New-Non-BlockingIO" class="headerlink" title="NIO(New /  Non-BlockingIO)"></a>NIO(New /  Non-BlockingIO)</h3><p>&emsp;&emsp;从1.4开始，新的IOAPI。面向缓冲区的基于通道的IO操作。</p>
<p>&emsp;&emsp;高效的文件读写。</p>
<p>&emsp;&emsp;一套标准输入输出NIO，一套网络编程NIO。</p>
<p>&emsp;&emsp;写得一般，所以在1.7出了NIO2。</p>
<p><code>java.nio.channels.Channel</code></p>
<ul>
<li>FileChannel 处理本地文件</li>
<li>SocketChannel TCP网络编程的客户端的channel</li>
<li>ServerSocketChannel 网络编程的服务器的channel</li>
<li>DatagramChannel UDP网络编程的发送端和服务端的channel</li>
</ul>
<h3 id="Path、Paths、Files占位"><a href="#Path、Paths、Files占位" class="headerlink" title="Path、Paths、Files占位"></a>Path、Paths、Files占位</h3><p>&emsp;&emsp;占位。有空仔细了解再写这里，因为当时刷，过去了，就展示了一些方法。</p>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>&emsp;&emsp;OSI（七层）参考模型过于理想化，未能在因特网上进行广泛推广。</p>
<table align = "center">
    <tr>
        <td rowspan=5>TCP/IP 4层</td>
    </tr>
    <tr>
        <td>应用层</td>
        <td>HTTP、FTP、Telnet、DNS</td>
    </tr>
    <tr>
         <td>传输层</td>
        <td>TCP、UDP</td>
    </tr>
     <tr>
        <td>网络层</td>
         <td>IP、ICMP、ARP</td>
    </tr>
    <tr>
        <td>物理+数据链路层</td>
        <td>Link</td>
    </tr>
</table>

<p>&emsp;&emsp;感觉我的三级网络技术还是有点用。</p>
<p>&emsp;&emsp;InetAddress类代表IP。通过<code>getByName</code>和<code>getLocalHost</code>得到实例。有至少两个方法<code>getHostname</code>和<code>getHostAddress</code>。</p>
<p>&emsp;&emsp;0 ~ 1023：公认端口，1024 ~ 49151：注册端口，49152 ~ 65535：动态/私有端口。（为什么端口只有65535个，不告诉你。）</p>
<p>&emsp;&emsp;UDP每个数据报的大小限制在64K内。无须释放资源，开销小，速度快。</p>
<p>&emsp;&emsp;TCP的三次握手，四次挥手。虽然考过三级网络技术，做过相关的题，但感觉很难从口中说出。</p>
<div><div class="fold_hider"><div class="close hider_title">自动关资源的try好呀</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader bf = <span class="keyword">null</span>;</span><br><span class="line">    Scanner scanner;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">        scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            bos.write((scanner.nextLine() + <span class="string">"\n"</span>).getBytes());</span><br><span class="line">            bos.flush();</span><br><span class="line">            System.out.println(<span class="string">"转换为 "</span> + bf.readLine());</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bf != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bf.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        socket = ss.accept();</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            String s = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">"需要转换： "</span> + s);</span><br><span class="line">            bos.write(s.toUpperCase().concat(<span class="string">"\n"</span>).getBytes());</span><br><span class="line">            bos.flush();</span><br><span class="line">            System.out.println(<span class="number">233</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p>&emsp;&emsp;read是阻塞的方法，read相关的应该也是阻塞的。shutdownInput和shutDownOutput是不是过于粗暴了。文字相关的我是加的“\n”，来到达可以不停的发送和读。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket()) &#123;</span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(<span class="string">"ABC"</span>.getBytes(), <span class="number">0</span>, <span class="number">3</span>, InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>)) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(cbuf, <span class="number">0</span>, cbuf.length);</span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(datagramPacket.getData()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;先启动接收，在启动发送。</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com/img/flexible/logo/pc/result.png"</span>);</span><br><span class="line">    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">    urlConnection.connect();</span><br><span class="line">    is = urlConnection.getInputStream();</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"src\\百度的图片.png"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*无异常*/</span></span><br><span class="line">    urlConnection.disconnect();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;URL的常用方法：<code>getProtocol</code>协议、<code>getHost</code>主机名、<code>getPort</code>端口、<code>getPath</code>文件路径、<code>getFile</code>文件名、<code>getQuery</code>查询名。</p>
<h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射 Reflection"></a>反射 Reflection</h2><p>&emsp;&emsp;是视为动态语言的关键。Java是静态语言，可以视作准动态语言。</p>
<p>&emsp;&emsp;静态语言：Java、C、C++。</p>
<p>&emsp;&emsp;动态语言：Object-C、C#、js、PHP（最美的语言）、Python、Erlang。</p>
<p>&emsp;&emsp;加载类后，堆内存的方法区就产生一个Class类型的对象。</p>
<p>能（运行时）:</p>
<ul>
<li>判读任意一个对象所属的类。</li>
<li>构造任意一个类的对象。</li>
<li>判断任意一个类所具有的成员变量和方法。</li>
<li>获取泛型信息。</li>
<li>调用任意一个对象的成员变量和方法。</li>
<li>处理注解。</li>
<li>生成动态代理。</li>
</ul>
<h3 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h3><p>&emsp;&emsp;加载到内存的类，我们称为运行时类，此运行时类，就作为Class的一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Persion&gt; clazz = Persion<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">Persion p = <span class="keyword">new</span> Persion();</span><br><span class="line">Class&lt;Persion&gt; clazz2 = p.getClass();</span><br><span class="line"></span><br><span class="line">Class&lt;Persion&gt; clazz3 = Class.forName(<span class="string">"Persion全类名"</span>);</span><br><span class="line"></span><br><span class="line">clazz1 == clazz2;</span><br><span class="line">clazz2 == clazz3;</span><br><span class="line"></span><br><span class="line">ClassLoader cl = 当前类<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">Class&lt;Persion&gt; clazz4 = cl.loadClass(<span class="string">"全类名"</span>);</span><br><span class="line"></span><br><span class="line">clazz1 == clazz4;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>forName</code>体现动态性。</p>
<h3 id="Class类实例的对应结构"><a href="#Class类实例的对应结构" class="headerlink" title="Class类实例的对应结构"></a>Class类实例的对应结构</h3><p>&emsp;&emsp;<code>Object.class</code> 外部类，成员（成员内部类、静态内部类），局部内部类，匿名内部类。</p>
<p>&emsp;&emsp;<code>Comparable.class</code> Interface。</p>
<p>&emsp;&emsp;<code>String[].class</code> <code>int[][].class</code> []。</p>
<p>&emsp;&emsp;<code>ElementType.clas</code> emun （target）。</p>
<p>&emsp;&emsp;<code>Override.class</code> annotation。</p>
<p>&emsp;&emsp;<code>int.class</code> primitive type 基本数据类型。</p>
<p>&emsp;&emsp;<code>void.class</code> void</p>
<p>&emsp;&emsp;<code>Class.class</code></p>
<p>&emsp;&emsp;[]：元素类型与维度一样，就是同一个class。</p>
<p>（空参构造器为什么要写？方便框架反射造javabean，保证子类调super）</p>
<h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><pre class="mermaid">flowchart LR
subgraph a1[类的加载,load]
a12[class文件读入内存,创建class对象]
end
subgraph a2[类的链接,link]
a21[类的二进制数据合并到JRE中]

end
subgraph a3[类的初始化,initialize]
a31[JVM负责对类进行初始化]

end
a1-->a2
a2-->a3</pre>

<p><mark>加载：</mark></p>
<p>&emsp;&emsp;class文件加载到内存中并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象作为方法区中类数据的访问入口。所有需要访问和使用类数据只能通过这个class对象。这个加载过程需要类加载器参与。</p>
<p><mark>链接：</mark></p>
<p>&emsp;&emsp;将java类的二进制代码合并到JVM的运行状态之中的过程。</p>
<ul>
<li><strong>验证：</strong>确保加载的类信息符合JVM规范。例如：以cafe开头，没有安全方面的问题。</li>
<li><strong>准备：</strong>正式为类变量(static)分配内存并设置类变量默认初始值的阶段。这些内存都将在方法区中进行分配。</li>
<li><strong>解析：</strong>虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程。</li>
</ul>
<p><mark>初始化：</mark></p>
<ul>
<li>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。执行类构造器<code>&lt;clinit&gt;()</code>方法是由编译期自动收集类中所有变量的赋值动作和静态代码中的语句合并产生的。</li>
<li>当初始化一个类的时候，如果发现器父类还没有初始化，则需要先触发其父类的初始化。</li>
<li>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确加锁和同步。</li>
</ul>
<h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210620163503.png" alt="image-20210620161845947" title="我自己在ppt里画的"></p>
<p>&emsp;&emsp;<mark>引导类加载器：</mark>C++编写。JVM自带加载器。负责Java平台核心库，用来装载核心类库。该加载器无法直接获取。</p>
<p>&emsp;&emsp;<mark>扩展类加载器：</mark>负责jre/lib/ext目录下的jar包或-Djava.ext.dirs指定目录下的jar包载入工作库。</p>
<p>&emsp;&emsp;<mark>系统类加载器：</mark>负责Java-classpath或-Djava.class.path所指的目录下的类与jar包装入工作，是最常用的类加载器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//module下</span></span><br><span class="line"><span class="comment">//FIS fis = new FIS("jdbc.properties");</span></span><br><span class="line"><span class="comment">//module的src下</span></span><br><span class="line">Inputstream is = 当前类.class.getClassLoader().getResourceAsStream("jdbc.properties");</span><br><span class="line">pros.load(is);</span><br><span class="line">pros.getProperty(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure>



<h3 id="各种获取"><a href="#各种获取" class="headerlink" title="各种获取"></a>各种获取</h3><h4 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h4><p>要有空参构造器，权限得够。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Person obj = clazz.newInstance();</span><br></pre></td></tr></table></figure>

<h4 id="反射动态性体会"><a href="#反射动态性体会" class="headerlink" title="反射动态性体会"></a>反射动态性体会</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"全类名"</span>);</span><br><span class="line"><span class="keyword">return</span> clazz.newInstance();</span><br></pre></td></tr></table></figure>

<h4 id="获取运行时类的属性结构"><a href="#获取运行时类的属性结构" class="headerlink" title="获取运行时类的属性结构"></a>获取运行时类的属性结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//当前运行时类及其父类中声明为public的属性</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"><span class="comment">//当前运行时类中声明的属性</span></span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">Field f = declaredFields[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//权限</span></span><br><span class="line">f.getModifier();<span class="comment">//是int的、</span></span><br><span class="line">Modifier.toString(f.getModifiers());</span><br><span class="line"><span class="comment">//类型</span></span><br><span class="line">Class type = f.getType();</span><br><span class="line">type.getName();</span><br><span class="line"><span class="comment">//变量名</span></span><br><span class="line">f.getName();</span><br></pre></td></tr></table></figure>

<h4 id="获取运行时类的方法结构"><a href="#获取运行时类的方法结构" class="headerlink" title="获取运行时类的方法结构"></a>获取运行时类的方法结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前运行时类及其父类中声明为public的方法</span></span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line"><span class="comment">//当前运行时类中声明的方法</span></span><br><span class="line">Method[] DeclaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">Method m = DeclaredMethods[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line">Annotation[] annos = m.getAnnotations();</span><br><span class="line"><span class="comment">//权限</span></span><br><span class="line">Modifier.toString(m.getModifiers);</span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line">m.getReturnType.getName();<span class="comment">//先返回一个class。</span></span><br><span class="line"><span class="comment">//方法名</span></span><br><span class="line">m.getName();</span><br><span class="line"><span class="comment">//形参类型</span></span><br><span class="line">class&lt;?&gt;[] parameters = m.getParameterTypes();</span><br><span class="line"><span class="keyword">if</span>(parameters != <span class="keyword">null</span> &amp;&amp; parameters.length != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//处理，可以每一个getNmae.对于形参名，以前反射不可以，现在可以。不过可能需要在编译时添加一个参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异常类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>&lt;?&gt; <span class="title">excptionTypes</span> </span>= m.getExcptionTypes();</span><br><span class="line"><span class="comment">//同上取一个处理。</span></span><br></pre></td></tr></table></figure>

<h4 id="获取运行时类的构造器"><a href="#获取运行时类的构造器" class="headerlink" title="获取运行时类的构造器"></a>获取运行时类的构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前运行时类（及其父类？忘了，测试没有）public的构造器</span></span><br><span class="line">Constructor[] constructors = clazz.getConstructors();</span><br><span class="line"><span class="comment">//当前运行时类所有的构造器</span></span><br><span class="line">Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br></pre></td></tr></table></figure>

<h4 id="获取运行时类的父类相关"><a href="#获取运行时类的父类相关" class="headerlink" title="获取运行时类的父类相关"></a>获取运行时类的父类相关</h4><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class superClass = clazz.getSuperClass();</span><br></pre></td></tr></table></figure>

<p>带泛型的父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Type genericSuperclass = clazz.getGenericSuperclass();</span><br></pre></td></tr></table></figure>

<p>带泛型父类的泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParameterizedType paramType = (ParameterizedType) genericSuperclass;</span><br><span class="line">Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line">System.out.println(actualTypeArguments[<span class="number">0</span>].getTypeName());</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Type是接口，Class实现了Type，所以可以强转为Class再使用getName。</p>
<h4 id="获取运行时类的接口"><a href="#获取运行时类的接口" class="headerlink" title="获取运行时类的接口"></a>获取运行时类的接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class[] interfaces = clazz.getInterfaces();</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;父类的接口可以先获取到父类，再获取接口</p>
<h4 id="获取运行时类所在的包"><a href="#获取运行时类所在的包" class="headerlink" title="获取运行时类所在的包"></a>获取运行时类所在的包</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Packge pack = clazz.getPackage();</span><br></pre></td></tr></table></figure>

<h4 id="获取运行时类的注解"><a href="#获取运行时类的注解" class="headerlink" title="获取运行时类的注解"></a>获取运行时类的注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Annotations[] annos = clazz.getAnnotations();</span><br></pre></td></tr></table></figure>



<h3 id="各种调用"><a href="#各种调用" class="headerlink" title="各种调用"></a>各种调用</h3><h4 id="调用指定属性"><a href="#调用指定属性" class="headerlink" title="调用指定属性"></a>调用指定属性</h4><p>要求public</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field id = clazz.getField(<span class="string">"id"</span>);</span><br><span class="line">id.set(p,<span class="number">1001</span>);</span><br><span class="line">id.get(p);</span><br></pre></td></tr></table></figure>

<p>常用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field name = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">name.setAccessable(<span class="keyword">true</span>);</span><br><span class="line">name.set(p,<span class="string">"Tom"</span>);<span class="comment">//p也可以是null</span></span><br><span class="line">name.get(p);</span><br></pre></td></tr></table></figure>

<h4 id="调用指定方法"><a href="#调用指定方法" class="headerlink" title="调用指定方法"></a>调用指定方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method show = clazz.getDeclaredMethod(<span class="string">"show"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">show.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = show.invoke(p,<span class="string">"china"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method showDesc = clazz.getDeclaredmethod(<span class="string">"showDesc"</span>);<span class="comment">//无返回值。</span></span><br><span class="line">showDesc.setAccessable(<span class="keyword">true</span>);</span><br><span class="line">Objiect rval = showDesc.invoke(Persion<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Objiect rval = showDesc.invoke(<span class="keyword">null</span>);<span class="comment">//本身clazz知道静态是啥（现在我无法准确理解，但在我笔记上就在这位置）</span></span><br></pre></td></tr></table></figure>

<h4 id="调用构造器"><a href="#调用构造器" class="headerlink" title="调用构造器"></a>调用构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor dcon = clazz。getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">dcon.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Person person = dcon.newInstace(<span class="string">"Tom"</span>);</span><br></pre></td></tr></table></figure>



<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>&emsp;&emsp;Spring两大核心：IOC容器：常见方式依赖注入、AOP：原理：动态代理。</p>
<p>先来静态的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span>  <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">Class ProxyClothFactory implements ClothFactory&#123;</span><br><span class="line">    privite ClothFactory factory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        syso(<span class="string">"代理工厂做一些工作"</span>);</span><br><span class="line">        factory.produceCloth();</span><br><span class="line">        syso(<span class="string">"代理工厂做后续工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class NikeClothFactory implements ClothFactory&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        syso(<span class="string">"Nike工厂生产运动服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ClothFactory nike = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">    ClothFactory proxyClothFactory = <span class="keyword">new</span> ProxyClothFactory(nike);</span><br><span class="line">    proxyClothFactory.produceCloth();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I believe I can fly!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我喜欢吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================通用方法一===================="</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"====================通用方法二===================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要想实现动态代理，需要解决的问题？</span></span><br><span class="line"><span class="comment">问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。</span></span><br><span class="line"><span class="comment">问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        HumanUtil util = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        util.method1();</span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line">        util.method2();</span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Object proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);<span class="comment">//可以强转（可以泛型吗？）</span></span><br><span class="line">        Human proxyInstance = （Human）proxyInstance；</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">"四川麻辣烫"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line"></span><br><span class="line">        NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line"></span><br><span class="line">        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);</span><br><span class="line"></span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/5f3c8c3f68f040849bfed639ae4c40bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfNDY0OTc2NzU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="AOP代理的方法"></p>
<p>它在<code>HumanUtil</code>有体现。</p>
<h1 id="1-0-1-2-1-5-1-7-1-8-1-10-1-11"><a href="#1-0-1-2-1-5-1-7-1-8-1-10-1-11" class="headerlink" title="1.0 1.2 1.5 1.7 1.8 1.10 1.11"></a>1.0 1.2 1.5 1.7 1.8 1.10 1.11</h1><p>&emsp;&emsp;1.1的Calendar</p>
<p>&emsp;&emsp;<code>switch</code>：5.0时的枚举，7.0时的<code>String</code>。</p>
<p>&emsp;&emsp;5.0可变参数。</p>
<p>&emsp;&emsp;5.0自动装箱和 拆箱。</p>
<p>&emsp;&emsp;5.0LocK锁</p>
<p>&emsp;&emsp;5.0StringBuilder</p>
<p>&emsp;&emsp;5.0注解</p>
<p>&emsp;&emsp;5.0foreach</p>
<p>&emsp;&emsp;5.0泛型</p>
<p>&emsp;&emsp;8.0接口静态方法、默认方法</p>
<p>&emsp;&emsp;8.0省略了方法的局部内部类关于变量的<code>final</code>的省略。</p>
<p>&emsp;&emsp;8.0新的时间</p>
<p>&emsp;&emsp;8.0两个新的注解特性</p>
<p>&emsp;&emsp;8.0<code>::</code></p>
<p>&emsp;&emsp;我认为7891011有类型推断，只不过有些许差别。</p>
<h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><p>这个输入皮肤挺好看的。</p>
<p><img src="https://i.loli.net/2021/03/15/3IVgCh19enx2ULm.png" alt="输入法皮肤.PNG"></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我想物尽其用，在SD卡上安装kali、pe，甚至多系统，并体验kali安装过程而导致电脑引导不符合预期的这样一件事。——应该是这样</title>
    <url>/2021/07/13/%E5%85%B3%E4%BA%8E%E6%88%91%E6%83%B3%E7%89%A9%E5%B0%BD%E5%85%B6%E7%94%A8%EF%BC%8C%E5%9C%A8SD%E5%8D%A1%E4%B8%8A%E5%AE%89%E8%A3%85kali%E3%80%81pe%EF%BC%8C%E7%94%9A%E8%87%B3%E5%A4%9A%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%B9%B6%E4%BD%93%E9%AA%8Ckali%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%80%8C%E5%AF%BC%E8%87%B4%E7%94%B5%E8%84%91%E5%BC%95%E5%AF%BC%E4%B8%8D%E7%AC%A6%E5%90%88%E9%A2%84%E6%9C%9F%E7%9A%84%E8%BF%99%E6%A0%B7%E4%B8%80%E4%BB%B6%E4%BA%8B%E3%80%82%E2%80%94%E2%80%94%E5%BA%94%E8%AF%A5%E6%98%AF%E8%BF%99%E6%A0%B7/</url>
    <content><![CDATA[<p> &emsp;&emsp;刚开时想的是，大家肯定和我一样，勤俭持家。于是，在互联网上搜索一些教程和工具，看有没有傻瓜工具一键完成的。结果没有，而且都很麻烦。印象比较深的有两种方式。一种是通过虚拟机安装kali。不知道为什么，我当时就是不想用，还觉得有点不可靠。第二种方式是先安装kali，然后备份，接着用老毛桃操作，再接着分区工具分20G出来，5G给kali还原用，15G拿来做持久化。我就是因为像大白菜、老毛桃等这些工具不干净，才用的微PE的。</p>
<p>&emsp;&emsp;然后因为教程基本就这些，我就想自己尝试。最初想法是先分好区，然后分别安装。结果一格式化就全盘格式化。GG。</p>
<p>&emsp;&emsp;手机上查查，电脑上查查，找到一个工具——YUMI。这个工具好，比较傻瓜。但还是失败了。怎么失败的忘了，反正就是失败了。</p>
<p>&emsp;&emsp;上厕所的时候，我有发现了一个工具。这个工具堪称神器，简直就是我这种人的福音。这个工具就是ventoy。第一次失败是因为分区的问题，当时没有预留空间，在kali安装分区后就失败了。第二次就搞好了。这个工具对我来说，使用那些不用安装的iso真的很方便。</p>
<p>&emsp;&emsp;kali安装过程中为了搞清楚要有哪些分区的照片。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713195307%E5%A4%A7%E8%87%B4%E5%88%86%E5%8C%BA.jpg" alt="大致分区" title="要有什么分区"></p>
<p>&emsp;&emsp;最后启动成功的画面照片。我当时超高兴。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713195510kali2021%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.jpg" alt="kali安装成功" title="启动成功"></p>
<p>&emsp;&emsp;当然啦，为了确认真的成功了还要方法测试。初步测试还是很成功的，只要拔掉插上再测试一遍就可以的。但是出现想不到的画面了，后来也出现的几次应该都是同一个界面，但还是有点区别。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713200025grub%E7%95%8C%E9%9D%A2.jpg" alt="我不喜欢的界面" title="GRUB"></p>
<p>&emsp;&emsp;找到的教程里有提到在里不停的找，但我没找到。</p>
<p>&emsp;&emsp;但我再次用读卡器插上SD卡后，有可以进到kali的引导界面（应该是）。这个界面里有<code>Windows Boot Manager</code>和    <code>system setup</code>，我当时还感叹，挺智能的，不错。结果后来就感觉不对了。虽然可以通过<code>Windows Boot Manager</code>到达我以前双系统的选择界面（应该是UEFI的引导吧）。而且都可以成功进入。因此就是不停的进入两个PE、win10、kali和插拔。最后在PE的工具里删除了一些UEFI BOIS启动项。因为通过观察，我感觉有多个引导在起作用。如过没猜错，应该是先启动到kali的，再根据选项启动我以前笔记本启动项。至于为什么敢删，是因为我之前机械硬盘坏了，用过PE，再加上观察类别，还有保存呢。删除后，拔掉SD卡也可以正常进入系统了，SD卡里的PE也可以启动。至于kali没关心了，因为以后肯定重新安装。就算要启动也可以恢复启动项来启动。</p>
<p>&emsp;&emsp;本以为皆大欢喜了，笔记本本身安装的PE没用了，重启也没有系统选择界面，直接就进系统了。通过设置里的高级启动，又可以见到选择界面，但是表面上是PE，但进入后仍是win10。反复进SD卡里的PE检查，想着可能引导坏了，尝试过修复引导，添加过启动项，重新安装过PE都没效果（我又想到应该方法，我观察过efi文件的位置，查阅微PE的资料应该可以通过添加启动项试试。）。最后还发现了两个问题。希望第二个问题是自欺欺人。</p>
<p>&emsp;&emsp;BOIS变了，两个选项不能选，还有一些选项没有了，十分简陋，就连更改启动顺序的也不见了。网络上常见的修改也找不到。</p>
<p>&emsp;&emsp;另外一个就是我尝试再安装PE时发现的。我认为应该是UEFI的。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713201149%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%9E%8B%E4%B8%8D%E6%98%AFUEFI.PNG" alt="启动类型" title="我认为应该是UEFI，后来安慰自己是兼容，两种都有"></p>
<p>&emsp;&emsp;查阅BOIS的相关教程时，生成的信息图。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713203149cmd%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF.PNG" alt="2021-07-13_130614">)<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713203216winr%E7%94%9F%E6%88%90%E7%9A%84%E4%BF%A1%E6%81%AF.PNG" alt="2021-07-13_183519"></p>
<p>&emsp;&emsp;我试过刷BOIS，但是找的工具不想。而且也不敢强刷，毕竟笔记本就一个，而且囊中羞涩。保持理性。</p>
<p>&emsp;&emsp;在这次过程中下载的工具。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713203659Sd%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%B7%A5%E5%85%B7.PNG" alt="2021-07-13_203646" title="工具"></p>
<p>&emsp;&emsp;这过程中浏览的历史。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210713203802SD%E5%8D%A1%E6%B5%8F%E8%A7%88%E5%8E%86%E5%8F%B2.PNG" alt="2021-07-13_183150" title="浏览历史"></p>
<p>&emsp;&emsp;最后的结果就是双系统的PE找不着，启动不了。SD卡里的PE可以用，kali可以通过手段启动。有失有得。</p>
<blockquote>
<p>祸兮福所倚，福兮祸所伏</p>
</blockquote>
<p>&emsp;&emsp;假如我将我的系统盘里的东西（C盘）复制出来，完整保存注册表和环境变量，然后格了（低格还是什么格）我的固态，在里装上我的系统，最后恢复注册表和环境变量。这样是否可以做到和原先一样，所有软件正常运行，环境也是正确的，安装过的软件也可以在卸载管理里找到？</p>
<p>&emsp;&emsp;注册表里包含环境变量。</p>
<p>&emsp;&emsp;我始终觉得解决这件事理论上应该是一个不难的事，一种直觉。第一步，首先是解决开机见到系统选择界面。于是，我用bcdedit复制了一个，同时，我直接打bcdedit命令看到，看到了pe的path。于是去pe里把UEFI启动项里复制的<code>Windows Boot Manager</code>再次修改了，换成了path位置里的efi文件。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210720200755msconfig%E5%92%8Cbcdedit.PNG" alt="2021-07-20_190200" title="两者不一样"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210720200848%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E9%87%8C%E7%9A%84%E5%90%AF%E5%8A%A8.PNG" alt="2021-07-20_194107"></p>
<p>&emsp;&emsp;重启，见到了系统选择界面。点击pe，不是进的pe，而是像重新启动，再次进入系统选择界面。very good。有戏。于是我重新进入win10，安装微pe。我发现启动类型变成UEFI了，非常开心。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210720201247UEFI%E5%90%AF%E5%8A%A8.PNG" alt="2021-07-20_194329"></p>
<p>&emsp;&emsp;重新安装后，启动，进入pe，ok，启动，进入win10，ok，删除复制的win10，启动，进入pe，ok，启动，进入win10，ok。</p>
<p>&emsp;&emsp;由于之前重新买了u盘，因此SD卡的利用就换了，那就是win to go 和kali to go结合在一起。生命不息，折腾不止。最后就只剩文中提到的问题了。</p>
]]></content>
      <categories>
        <category>记录</category>
        <category>这是失败记录吗？</category>
      </categories>
      <tags>
        <tag>T6Ti-X7</tag>
        <tag>kali</tag>
        <tag>PE</tag>
        <tag>bois</tag>
        <tag>u盘</tag>
      </tags>
  </entry>
  <entry>
    <title>异形工厂（shapezio）简单制造工厂</title>
    <url>/2021/08/11/%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%EF%BC%88shapezio%EF%BC%89%E7%AE%80%E5%8D%95%E5%88%B6%E9%80%A0%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/fca8e5562f29b0a07a42391b3679cd98f91d592fa16ff5c7bce303164e255298/68747470733a2f2f692e696d6775722e636f6d2f59355a326971512e706e67" one-link-mark="yes"><img src="https://camo.githubusercontent.com/fca8e5562f29b0a07a42391b3679cd98f91d592fa16ff5c7bce303164e255298/68747470733a2f2f692e696d6775722e636f6d2f59355a326971512e706e67" alt="shapez.io Logo" data-canonical-src="https://i.imgur.com/Y5Z2iqQ.png" style="max-width:100%;"></a></p>

<p>&emsp;&emsp;你还为每过一关就要再造一个生产线而感到烦恼吗？快来建造一个工厂吧。我这个工厂简单易懂，甚至可以不用电路，仅需一点点操作。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>&emsp;&emsp;为了能做这个工厂，你必须要解锁图片中的设施。不用每一个都完全解锁，每种有一个就行。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210811224510%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E8%A6%81%E6%B1%82.PNG" alt="要求"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>&emsp;&emsp;我们制作工厂是为了尽可能解放双手的操作，因此在设计之初暂不考虑效率，先解决有无的问题。速度不行的话还可以堆数量。虽然这不是一个完全自动化的工厂，但慢慢改嘛。</p>
<p>&emsp;&emsp;由于暂时没有电路加持，工厂只能造简单的图形。类似于<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210811234108%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%9C%BA1.png" alt="机2_1">)和<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210811234139%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82.png" alt="机1_1">，这种图形暂时只能单独造机器。自动化的方式还没思考出来。</p>
<style>
    img[alt="机1_1"]
    {
        display:inline-block;
        margin: 0;
    }
     img[alt="机2_1"]
    {
        display:inline-block;
        margin: 0;
    }
</style>

<p>&emsp;&emsp;该教程是根据关卡徐徐渐进的，未解锁的物品如果能被替换，就会先被替换，解锁后更改。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>&emsp;&emsp;最终思路：从底层出发，对每一层进行分解。首先将原材料染色，然后进行旋转，接着根据产出材料的种类选择合成方式（二、三、四，一直接走旁边产物通道）。合成出每一层后再根据层数进行叠加。</p>
<h2 id="开搓"><a href="#开搓" class="headerlink" title="开搓"></a>开搓</h2><p>&emsp;&emsp;先看一个整体图，好有一个直观的感受。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210811234757%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%B7%A5%E5%8E%82.PNG" alt="全 - 副本"></p>
<p>&emsp;&emsp;在异形工厂中，所有图形都可以分解为一下四中图形的组合，我们将他们作为原材料输入到工厂中。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812000843%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%8E%9F%E6%9D%90%E6%96%99.PNG" alt="原材料"></p>
<p>&emsp;&emsp;可以在地图上找到相应的图形进行开采，或者单独为每种材料供应。如果采用图中挖掘包含所有材料的图形的话，要注意安装垃圾桶防止堵塞。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812001517%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%8E%9F%E6%9D%90%E6%96%99%E7%94%9F%E4%BA%A7.PNG" alt="原材料生成"></p>
<p>&emsp;&emsp;前期，我刚可以开始造工厂时，关卡要求都是两层图形。因此我们先考虑两层。不过在考虑两层前，我们先考虑一层。我们将图形分为四个象限。先进行染色在进行旋转。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812002147%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E8%B1%A1%E9%99%90.PNG" alt="一个象限"></p>
<p>&emsp;&emsp;这个工厂的一部分属于染色旋转区。由于没有颜料供应，染色器处于阻塞状态，没有产物输出。对于无色图形，我们通过控制传送带的断连来输出产物。在输出位置可以看到，我做了相应的旋转。这是为了旋转到相应的象限。</p>
<p>&emsp;&emsp;相信你从上图中看出来，现阶段的工厂还需要我们操作，不过已经不用频繁造生成线了。这就像工厂生成物品一样，需要操作一些机器。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812002917%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%A2%9C%E6%96%99%E5%88%86%E9%85%8D.PNG" alt="基础颜色分配器"></p>
<p>&emsp;&emsp;这是我们的颜料分配器。它从下方输入7种颜料，从右侧输出颜料。可以看到，图中有4排传送带，它依次对应颜色的材料。将两者结合就可以得到下面这张图。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812003527%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%A2%9C%E6%96%99%E5%88%86%E9%85%8D%E4%BA%BA%E6%95%B0.PNG" alt="颜色和象限"></p>
<p>&emsp;&emsp;要使用它首先要人为确定该层该象限的图形和颜色。确定好后，选择对应材料的传送带，顺着传送带回走。在颜料分配区，选择对应的颜色，用传送带连接上平衡器。（在使用过程中，我有一种以前那种一次性烧录芯片烧录程序的感觉，虽然我没操作过，但我看过。）</p>
<p>&emsp;&emsp;在这一个区域，总的来说，染色的话就用传送带连接对应平衡器。如果是无色的话，就断开所有颜色分配的传送带连接，连接上无色分配的传送带（在输出位置）。在关卡结束后，要断开所有自己手动连接添上的传送带。</p>
<p>&emsp;&emsp;相信你已经造好了一个象限所需要的装置（上图），接下来，将其复制，拢共制作4份共4个象限，记得修改输出位置的旋转角度。制作好的效果类似于下图。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812005816%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83.PNG" alt="一个单元"></p>
<p>&emsp;&emsp;仔细观察上图，你会发现4个红色的地方。这个地方是垃圾桶，因为我不是单独供应原材料，如果不销毁多余的材料就无法剪出需要的材料。后期解锁过滤器后可以修改并保存大量原材料。</p>
<p>&emsp;&emsp;将上面的装置复制一份就可以处理两层图形了，再复制两份就可以最多处理四层图形了。效果类似于下图。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812010756%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%824%E5%8D%95%E5%85%83.PNG" alt="4层"></p>
<p>&emsp;&emsp;接下来就是颜料供应了。我的供应是这样的。这个随你造了，反正都差不多。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812011016%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%A2%9C%E6%96%99%E4%BE%9B%E5%BA%94.PNG" alt="颜色"></p>
<p>&emsp;&emsp;颜料齐全后，就可以制造单层图形了。这里面要考虑只有一个象限、只有两个象限、只有三个象限、四个象限都有。因为当前无法自动化，先手工连接对应的合成模块。我的合成模块如下图。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812011635%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%90%88%E6%88%90%E6%A8%A1%E5%9D%97.PNG" alt="合成模块"></p>
<p>&emsp;&emsp;现在可以制造出每一层了，接下来就是层与层之间的叠加了。要考虑那个在下，那个在上。从左至右，分别是最底层、上一层、再上一层和最顶层。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812012432%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%8F%A0%E5%8A%A0.PNG" alt="叠加区域"></p>
<p>&emsp;&emsp;叠加层数也是通过传送带的断连来控制。</p>
<p>&emsp;&emsp;到此时，一个需要人为操作而不要造的工厂就诞生了。它的使用方式是，分析每层每个象限是什么，要什么颜色。连接上传送带输出染色后的材料。接着根据每层的情况选择合适数量的合成模块制造出每一层。最后根据层数连接对应传送带。最最后通过该关卡后，要断开你所有连接的传送带。</p>
<p>&emsp;&emsp;到这里，教程就可以算做是结束了。针对后期不在要求数量而是要求速度（产量），可以先挂机存储，合适时机在释放。</p>
<hr color="pink">

<p>&emsp;&emsp;随着关卡的解锁，新的装置解锁后，可以修改原设置，使之更方便。</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>&emsp;&emsp;在解锁过滤器后，原先通过拆掉或连上传送带的动作可以利用过滤器和开关来简化动作，这样就只需要左击开关就可以控制流向了。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812170124%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%97%A0%E8%89%B2%E8%BF%87%E6%BB%A4%E5%99%A8.PNG" alt="无色开关"></p>
<p>&emsp;&emsp;当然在颜色分配器上，也可以修改，使之更容易操作，减少右键带来的误操作。有点久了，忘了合并器是在什么时候解锁的了，如何你没有解锁，也可以用平衡器替换合并器进行改造。<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812170535%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%A2%9C%E8%89%B2%E5%BC%80%E5%85%B3.PNG" alt="开关颜色分配"></p>
<p>&emsp;&emsp;如果想直观显示颜色，可以像上面接个容器或者像下面一样接上显示器。</p>
<p><img src="https://i.loli.net/2021/08/12/fXtQZw8u1zslRd6.png" alt="显示颜色"></p>
<p>&emsp;&emsp;有了过滤器和容器，就可以在原材料制作处进行改进了。这样就不用担心原材料消耗不同而导致阻塞必须添加垃圾桶的境况。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812174618%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E8%A7%A3%E5%86%B3%E9%98%BB%E5%A1%9E.PNG" alt="解决阻塞"></p>
<h2 id="某某生产教程"><a href="#某某生产教程" class="headerlink" title="某某生产教程"></a>某某生产教程</h2><p>&emsp;&emsp;整体思路：通过叠加缩小图形，再通过剪切的方式将其保留在需要的大图形上。</p>
<h3 id="CbCuCbCu-Sr——-–CrSrCr-CwCwCwCw"><a href="#CbCuCbCu-Sr——-–CrSrCr-CwCwCwCw" class="headerlink" title="CbCuCbCu:Sr——:–CrSrCr:CwCwCwCw"></a>CbCuCbCu:Sr——:–CrSrCr:CwCwCwCw</h3><p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812174910%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%8E%9F%E5%9E%8B%E6%9C%BA.PNG" alt="原型机1"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210812175112%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E7%94%9F%E6%88%90%E6%9C%BA.PNG" alt="单个生成机1"></p>
<p><img src="https://i.loli.net/2021/08/12/1JYxCVpy8eHhSWE.png" alt="电路"></p>
<h3 id="RuCw–Cw-—-Ru–"><a href="#RuCw–Cw-—-Ru–" class="headerlink" title="RuCw–Cw:—-Ru–"></a>RuCw–Cw:—-Ru–</h3><p><img src="https://i.loli.net/2021/08/12/jh4lHDQENw18qMe.png" alt="&quot;RuCw--Cw:----Ru--&quot;"></p>
<p>&emsp;&emsp;等待更新</p>
<h2 id="较高程度自动化"><a href="#较高程度自动化" class="headerlink" title="较高程度自动化"></a>较高程度自动化</h2><p><del>我目前已经解锁全部设施了，已经在思考了。</del></p>
<p><img src="https://tva1.sinaimg.cn/large/006Xzox4ly1gdur6fuq71j306o06oaab.jpg" alt="别催了，虽然每人催"></p>
<p><del>等待更新和等待思考</del></p>
<p>&emsp;&emsp;我这个和一般的自动化不一样，这个是将最底层视为第一层，因为在最初考虑时，还没有电线解锁，只能用自己手动操作。电路设计上，优先考虑不改变工厂布局和原有设计。</p>
<p>&emsp;&emsp;先看整体电路布局。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210824215742%20%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%9B%BE%E5%BD%A2%E6%A3%80%E6%B5%8B%E5%90%88%E6%88%90.PNG" alt="2021-08-22_215944"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210824215831%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E7%94%B5%E8%B7%AF%E6%95%B4%E4%BD%93%E4%B8%8B.PNG" alt="2021-08-23_212313"></p>
<p>&emsp;&emsp;第一步将基地图像信号引出。在解锁自动化前，相信你已经知道有悬空的图形（就是上面的生产教程）了 。因此，我们要先进行判读图形是否是悬空图形。检测电路如下。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20210824215931%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%90%88%E6%88%90%E6%A3%80%E6%B5%8B.PNG" alt="图像信号合成检测"></p>
<p>&emsp;&emsp;它的原理是将图形拆分一层后将其和下一次拆分后的图形进行叠加，接着重复，最后将结果进行比较，根据结果将图像信号分别传输到不同位置。这两个位置在最后叠加方式不同。一个是按原有设计：最底层和上一层叠加，叠加结果和再上一层叠加，最后再和最顶层合成。另一个是：最顶层和下一层叠加，叠加结果和再下一层叠加，最后和最底层叠加。分这两种是为了尽可能合成悬空图形。</p>
<blockquote>
<p>作为后，写博客时，发现我做复杂了，因此我先说整体思路吧，后面的内容就一个地方做复杂了，它其实是可以删掉的。</p>
<p>首先将图像信号分层，将每一层信号分成4个象限，对每个象限进行分析颜色和图形，通过与门控制对应图形的对应颜色开关进行染色（无色也是一种颜色），将象限的图形和颜色信号输出到合成层的地方，根据信号进行合成。最后根据层信号进行层与层之间的合成。</p>
</blockquote>
<p>&emsp;&emsp;我们先采用原本设计好的叠加方式，也就是第一种方式。（<font color = red>此处理论可删除，只须改动合成层的电路逻辑</font>）在我的设计中，从左至右，4个单元分别是最底层、倒数第二层、倒数第三层和最顶层。层与层之间是先叠加最底层和倒数第二层，然后在叠加倒数第三层，最后叠加最顶层。然而模拟拆分器先拆分出最顶层，因此最底层不确定是在哪一根线输出。所以要做一个不管有几层输入，都会依次从最低层开始输出的机器。（此电路可以删除的，不过叠加的就要思考一下了）</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102225900%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%80%86%E5%BA%8F%E6%9C%BA%E5%8E%9F%E5%9E%8B.PNG" alt="逆序机1"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102225954%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E9%80%86%E5%BA%8F%E6%9C%BA%E5%AE%9E%E8%A3%85.PNG" alt="逆序机2"></p>
<p>&emsp;&emsp;这个机器如果输入1会输出1，如果输入12会输出21，如果输入123会输出321，如果输入1234会输出4321。至于原理，我就解释不清楚了，因为我是一个目标一个目标实现的。做成这个的思想就是遇到问题不要害怕，将难题分解或一步一步解决。首先就是先实现2个的，再实现3个的，最后实现4个，也不用考虑简化呀什么的，能用就行。</p>
<p>&emsp;&emsp;接下来就是每一层的信号送到对应每一层的单元（如果不对应，随意的话，需要考虑叠加的判断），每个单元里有分为四个象限。因此需要提取出每个象限的图形和颜色。</p>
<p>&emsp;&emsp;<img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102230023%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E8%B1%A1%E9%99%90%E5%9B%BE%E5%BD%A2%E5%92%8C%E9%A2%9C%E8%89%B2%E6%8B%86%E5%88%86.PNG" alt="颜色和图形"></p>
<p>&emsp;&emsp;这个简单机器就是提取象限的颜色和图形。每个象限的机器不太一样，因为比较简单就自己做了，只要能输出颜色（无色）和图形（无）信号就行了。不要担心无色和却项，通过与可以解决。</p>
<p>&emsp;&emsp;有颜色和图形信号后，就可以考虑染色了。通过比较器在指定位置输出图形信号到后面的染色区，通过比较器在指定位置输出颜色信号。这其中将无色信号输送到染色区了。染料通过图形信号和颜色信号的与运算控制指定的染料开关。如下图。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102215944%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%9F%93%E6%96%99%E5%8C%BA%E6%8E%A7%E5%88%B6.PNG" alt="染色材料"></p>
<p>&emsp;&emsp;在染色区，染料输送过来后，会自动合成。对于无色的输出，同样是使用与运算进行控制。染色后就送至合成区，同时将图像信号输送到合成区，用于后续判断等。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102225724%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%9F%93%E8%89%B2%E6%8E%A7%E5%88%B6.PNG" alt="无色"></p>
<p>&emsp;&emsp;在合成区，原先的合成是收到切换的，现在要改成自动化。原先做了3个合成来合成2个、3个、4个象限的图形。最开始想到的判断象限数量来切换使用不同的路径。问题是如何判断数量、如何判断是那几个道出材料、以及如何切换，要设计的话得很久，天荒地老的那种（夸张）。因此，我重新设计了一个合成模块。</p>
<p>&emsp;&emsp;思路也比较简单。一步一步分析，首先，总体思路选择两两合成——两个象限合成一个，两个象限合成一个，再一合成就完了。因为这种不用考虑那么多。我们在前面象限拆分时，往下输送了该象限的图形信号，因此可以判断当前道的材料有无。如果4条道都有，那么关闭通道，让材料进入合成。如果有有3条道有材料，可以通过与运算判断。与出1说明2条道有，关闭通道让材料进入合成，另外一边则与出0，打开通道让有材料的通过，而合成器会因为只有一边输入导致阻塞，无法输出。如果有2条道有，可以理解3条道中的两条紧挨的道，或者是两条3条道中独立的那一条。后续则是这样的，它的情况就考虑1条道和2条道，仿照前面的就可以了。理解不了就看图，师傅领进门，修行看个人。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102225703%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%96%B0%E5%90%88%E6%88%90%E5%8E%9F%E5%9E%8B%E6%9C%BA.PNG" alt="合成新方式"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102225629%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%96%B0%E5%90%88%E6%88%90%E5%8E%9F%E5%9E%8B%E6%9C%BA%E7%94%B5%E8%B7%AF.PNG" alt="新和成电路"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102230420%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E6%96%B0%E5%90%88%E6%88%90%E7%94%B5%E8%B7%AF%E5%AE%9E%E8%A3%85.PNG" alt="层"></p>
<p>&emsp;&emsp;层与层的叠加基本不变，只是此刻你应该可以有单层的图像信号了（前面通过分层、逆序已经得到了）。有了图形信号就可将不要的删除了，优化一下，加快速度。同时有了层信号可以对层与层的合成进行判断了。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102231258%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%B1%82%E5%90%88%E6%88%90%E7%94%B5%E8%B7%AF.PNG" alt="合成层"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102231357%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E5%B1%82%E5%90%88%E6%88%90%E6%8E%A7%E5%88%B6.PNG" alt="层层控制"></p>
<p>&emsp;&emsp;很快，你发现提交要求不在是数量而是速度了，然而一个工厂的合成速度肯定是不足的，解决 办法可以是多几个工厂或者将产品存储起来，一定时间后释放，此时，速度就与传动带速度相关了。时间可以用一个物品在传送带上走，用一个检测器输出信号就可以了。开信号需要持续一定时间，关信号也要持续一段时间，而检测器只输出很短的信号，因此，使用一个SR锁存器进行信号切换。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102232342%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82SR%E9%94%81%E5%AD%98.PNG" alt="SR锁存"></p>
<p>&emsp;&emsp;输入一个短脉冲，它就会改变输出信号。然而，这种SR锁存会在短脉冲来的时候将输出变成高频，但影响不大。当然开和关的持续时间不一样，所以可以在不同状态下，让物品在不同传送带上走。同时也可以加一个开关来控制是否启用计时。</p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220102232955%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E5%BC%80%E5%85%B3.PNG" alt="状态切换抖动"></p>
<p><img src="https://gitee.com/pengxiandyou/imgbed/raw/master/2021/20220103002820%E5%BC%82%E5%BD%A2%E5%B7%A5%E5%8E%82SR%E5%AE%9E%E8%A3%85.PNG" alt="2021-08-23_212643"></p>
<p>&emsp;&emsp;到这，自动化基本就完成了，剩下的基本上是优化和改进了。</p>
<h2 id="完全自动化"><a href="#完全自动化" class="headerlink" title="完全自动化"></a>完全自动化</h2><p>包含叠加时恰好无共同象限，导致3层变2层，4层变3层等情况。</p>
<p>难，应该很难想出来。</p>
<p>（20220102）将另一种叠加方式做出来，加上全局开关基本就完全自动化了。相信大家可以完成了（老师视角）。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>如果某一层同一材料在不同象限都有使用，那么会由于合成不足，拖慢速度。可以通过提高传送带速度或每一象限单独供应原料。</p>
<h2 id="意想不到"><a href="#意想不到" class="headerlink" title="意想不到"></a>意想不到</h2><ol>
<li>我在设计的时候是把最底层作为第一层的，结果模拟拆分器把最顶层作为第一层的。</li>
</ol>
]]></content>
      <categories>
        <category>游戏</category>
        <category>教程向</category>
      </categories>
      <tags>
        <tag>异形工厂</tag>
        <tag>shapezio</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
</search>
